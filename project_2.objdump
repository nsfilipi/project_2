
project_2.elf:     file format elf32-littlenios2
project_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d9d8 memsz 0x0000d9d8 flags r-x
    LOAD off    0x0000e9f8 vaddr 0x0000d9f8 paddr 0x0000f454 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010eb0 vaddr 0x00010eb0 paddr 0x00010eb0 align 2**12
         filesz 0x00000000 memsz 0x00000368 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d38c  000001d0  000001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000049c  0000d55c  0000d55c  0000e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000d9f8  0000f454  0000e9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000368  00010eb0  00010eb0  00010eb0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  00010480  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001536  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027a53  00000000  00000000  0001274e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000085cc  00000000  00000000  0003a1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014b9d  00000000  00000000  0004276d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b38  00000000  00000000  0005730c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000240a  00000000  00000000  00058e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c55d  00000000  00000000  0005b24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000677ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000677c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006b3fd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006b400  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006b403  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006b404  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006b408  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006b40c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0006b410  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006b419  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006b422  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0006b42b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002d  00000000  00000000  0006b436  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  0006b463  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d0 l    d  .text	00000000 .text
0000d55c l    d  .rodata	00000000 .rodata
0000d9f8 l    d  .rwdata	00000000 .rwdata
00010eb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000208 l       .text	00000000 alt_after_alt_main
000000b4 l       .exceptions	00000000 end_switch
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00010ef0 l     O .bss	00000018 timer
00000000 l    df *ABS*	00000000 thread.c
00010eb4 l     O .bss	00000004 this_thread
00010eb8 l     O .bss	00000004 main_context
00010f08 l     O .bss	00000058 queue
00000000 l    df *ABS*	00000000 lib2-divmod.c
000009a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0000d9f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000015ec l     F .text	00000058 __sprint_r
0000d732 l     O .rodata	00000010 blanks.3452
0000d722 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003668 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
0000381c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005244 l     F .text	00000058 std
00005350 l     F .text	00000008 __fp_lock
00005358 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f428 l     O .rwdata	00000004 charset
0000d764 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d8ac l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000928c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000acc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ad24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ad50 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ae88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000afac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b08c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b1ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b6b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f444 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000bb10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e3b4 l     O .rwdata	00001060 JTAG_UART
0000bc00 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000be40 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c068 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c6e4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c8b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ccc4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ce14 l     F .text	000000f8 alt_file_locked
0000d098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00001430 g     F .text	0000001c putchar
000068f4 g     F .text	00000094 _mprec_log10
000069e0 g     F .text	00000088 __any_on
00000230 g     F .text	00000020 resetFlag
00008460 g     F .text	00000070 _isatty_r
0000d884 g     O .rodata	00000028 __mprec_tinytens
0000b24c g     F .text	0000006c alt_main
00001454 g     F .text	000000a0 _puts_r
00010f88 g     O .bss	00000100 alt_irq
000084d0 g     F .text	00000078 _lseek_r
0000f454 g       *ABS*	00000000 __flash_rwdata_start
00009dac g     F .text	00000088 __eqdf2
00011218 g       *ABS*	00000000 __alt_heap_start
000013b8 g     F .text	00000044 printf
00007dcc g     F .text	00000068 __sseek
000052ac g     F .text	000000a4 __sinit
00007fcc g     F .text	00000130 __swbuf_r
00005fb8 g     F .text	00000084 _setlocale_r
000053ac g     F .text	0000009c __sfmoreglue
0000b2d8 g     F .text	00000020 __malloc_unlock
00006370 g     F .text	000000e0 memmove
0000539c g     F .text	00000010 _cleanup
00006a68 g     F .text	000000bc _Balloc
00009ebc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000083ec g     F .text	00000074 _fstat_r
00010ec8 g     O .bss	00000004 errno
00010edc g     O .bss	00000004 alt_argv
00017414 g       *ABS*	00000000 _gp
00000554 g     F .text	00000120 mythread_create
0000e234 g     O .rwdata	00000180 alt_fd_list
0000144c g     F .text	00000008 _putchar_r
0000d118 g     F .text	00000094 alt_find_dev
000062d0 g     F .text	000000a0 memcpy
00005390 g     F .text	0000000c _cleanup_r
0000a054 g     F .text	000000f8 __floatsidf
0000cd9c g     F .text	00000078 alt_io_redirect
00009fcc g     F .text	00000088 __ltdf2
0000d55c g       *ABS*	00000000 __DTOR_END__
000014f4 g     F .text	00000014 puts
0000d0f8 g     F .text	00000020 altera_nios2_irq_init
00006844 g     F .text	000000b0 __ratio
0000c280 g     F .text	00000224 altera_avalon_jtag_uart_read
00000c64 g     F .text	00000014 malloc
000013fc g     F .text	00000034 _printf_r
00000ae4 g     F .text	00000008 __udivsi3
0000aee8 g     F .text	000000c4 isatty
0000d794 g     O .rodata	000000c8 __mprec_tens
00005f94 g     F .text	00000008 __locale_charset
00010ebc g     O .bss	00000004 __malloc_top_pad
0000f424 g     O .rwdata	00000004 __mb_cur_max
00005f9c g     F .text	0000000c _localeconv_r
000071cc g     F .text	0000003c __i2b
00005978 g     F .text	0000049c __sfvwrite_r
00001508 g     F .text	00000070 _sbrk_r
00008548 g     F .text	00000078 _read_r
0000e200 g     O .rwdata	0000000c __lc_ctype
0000f43c g     O .rwdata	00000004 alt_max_fd
0000a870 g     F .text	00000138 __unpack_d
000082c8 g     F .text	00000110 _fclose_r
00005210 g     F .text	00000034 fflush
00010ec0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000971c g     F .text	00000074 __adddf3
00006724 g     F .text	00000120 __b2d
00008c2c g     F .text	00000660 __umoddi3
0000b0f8 g     F .text	000000f4 lseek
0000f418 g     O .rwdata	00000004 _global_impure_ptr
00007760 g     F .text	000005f4 _realloc_r
00011218 g       *ABS*	00000000 __bss_end
0000cbcc g     F .text	000000f8 alt_iic_isr_register
0000b8e0 g     F .text	0000010c alt_tick
000085c0 g     F .text	0000066c __udivdi3
0000d85c g     O .rodata	00000028 __mprec_bigtens
00007454 g     F .text	00000120 __s2b
0000a224 g     F .text	00000194 __floatunsidf
00000808 g     F .text	000000a8 mythread
00006644 g     F .text	00000060 __mcmp
00010eb0 g     O .bss	00000004 global_flag
00005378 g     F .text	00000018 __fp_lock_all
0000cb84 g     F .text	00000048 alt_ic_irq_enabled
0000b848 g     F .text	00000098 alt_alarm_stop
00010eec g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000c8 alt_irq_handler
0000e20c g     O .rwdata	00000028 alt_dev_null
0000c7e4 g     F .text	0000001c alt_dcache_flush_all
00006510 g     F .text	00000070 __hi0bits
0000a14c g     F .text	000000d8 __fixdfsi
0000020c g     F .text	00000024 isFlagSet
0000f454 g       *ABS*	00000000 __ram_rwdata_end
0000f434 g     O .rwdata	00000008 alt_dev_list
0000b9ec g     F .text	00000124 write
00007678 g     F .text	000000e8 _putc_r
0000d9f8 g       *ABS*	00000000 __ram_rodata_end
0000adb0 g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007334 g     F .text	00000120 __pow5mult
00010ecc g     O .bss	00000004 __nlocale_changed
00000aec g     F .text	00000008 __umodsi3
00011218 g       *ABS*	00000000 end
000003ac g     F .text	0000002c isQueueFull
0000bd80 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d558 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c754 g     F .text	00000090 alt_avalon_timer_sc_init
0000a4dc g     F .text	00000080 __clzsi2
0000c4a4 g     F .text	00000240 altera_avalon_jtag_uart_write
0000529c g     F .text	00000004 __sfp_lock_acquire
000061ec g     F .text	000000e4 memchr
00001644 g     F .text	00001ec4 ___vfprintf_internal_r
00005664 g     F .text	00000314 _free_r
0000b2f8 g     F .text	00000258 alt_printf
0000366c g     F .text	000001b0 __call_exitprocs
00010ed0 g     O .bss	00000004 __mlocale_changed
0000f420 g     O .rwdata	00000004 __malloc_sbrk_base
000001d0 g     F .text	0000003c _start
00010ee4 g     O .bss	00000004 _alt_tick_rate
00006e2c g     F .text	0000014c __lshift
00010ee8 g     O .bss	00000004 _alt_nticks
0000b590 g     F .text	00000124 read
0000bba4 g     F .text	0000005c alt_sys_init
0000d424 g     F .text	00000134 __register_exitproc
00000970 g     F .text	00000038 mythread_destroy
00006f78 g     F .text	00000254 __multiply
0000c118 g     F .text	00000074 altera_avalon_jtag_uart_close
00000af4 g     F .text	00000038 __mulsi3
0000d9f8 g       *ABS*	00000000 __ram_rwdata_start
0000d55c g       *ABS*	00000000 __ram_rodata_start
00010f60 g     O .bss	00000028 __malloc_current_mallinfo
00006b24 g     F .text	0000017c __d2b
0000bc38 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d2cc g     F .text	000000d0 alt_get_fd
0000a9a8 g     F .text	000000c8 __fpcmp_parts_d
00008258 g     F .text	00000070 _close_r
0000d3b0 g     F .text	00000074 memcmp
0000bce8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00011218 g       *ABS*	00000000 __alt_stack_base
0000bd30 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00000b64 g     F .text	000000ac _fwrite_r
0000352c g     F .text	0000013c __swsetup_r
00009b54 g     F .text	00000258 __divdf3
00005448 g     F .text	000000f0 __sfp
00006988 g     F .text	00000058 __copybits
0000ddf8 g     O .rwdata	00000408 __malloc_av_
000003d8 g     F .text	0000017c queuePrint
000052a8 g     F .text	00000004 __sinit_lock_release
00009790 g     F .text	000003c4 __muldf3
00000250 g     F .text	00000034 myinterrupt_handler
00007eb0 g     F .text	00000060 __sread
0000d1ac g     F .text	00000120 alt_find_file
0000c800 g     F .text	000000b4 alt_dev_llist_insert
0000b2b8 g     F .text	00000020 __malloc_lock
0000b78c g     F .text	000000bc sbrk
00005014 g     F .text	000001fc _fflush_r
00008190 g     F .text	000000c8 _calloc_r
00010eb0 g       *ABS*	00000000 __bss_start
00006450 g     F .text	00000098 memset
00000354 g     F .text	0000002c main
00010ee0 g     O .bss	00000004 alt_envp
00010ec4 g     O .bss	00000004 __malloc_max_total_mem
0000bc90 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000080fc g     F .text	0000001c __swbuf
00007dc4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000083d8 g     F .text	00000014 fclose
00011088 g     O .bss	00000190 _atexit0
00003a60 g     F .text	000015b4 _dtoa_r
00000c78 g     F .text	00000740 _malloc_r
0000f440 g     O .rwdata	00000004 alt_errno
00005edc g     F .text	000000b8 _fwalk
00007574 g     F .text	00000104 putc
00000a24 g     F .text	00000060 __divsi3
0000d8b8 g     O .rodata	00000014 __thenan_df
00005538 g     F .text	0000012c _malloc_trim_r
0000d55c g       *ABS*	00000000 __CTOR_END__
00007f10 g     F .text	000000bc strcmp
0000d55c g       *ABS*	00000000 __flash_rodata_start
0000d55c g       *ABS*	00000000 __DTOR_LIST__
00009e34 g     F .text	00000088 __nedf2
0000bb70 g     F .text	00000034 alt_irq_init
0000b714 g     F .text	00000078 alt_release_fd
0000d8cc g     O .rodata	00000100 __clz_tab
00010ed4 g     O .bss	00000004 _PathLocale
0000d39c g     F .text	00000014 atexit
00000738 g     F .text	000000d0 mythread_disjoin
00008118 g     F .text	00000078 _write_r
00000380 g     F .text	0000002c isQueueEmpty
0000603c g     F .text	0000001c setlocale
0000f414 g     O .rwdata	00000004 _impure_ptr
00010ed8 g     O .bss	00000004 alt_argc
0000c978 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000066a4 g     F .text	00000080 __ulp
00007d54 g     F .text	00000040 __isinfd
00005360 g     F .text	00000018 __fp_unlock_all
0000f42c g     O .rwdata	00000008 alt_fs_list
00000284 g     F .text	000000d0 os_prototype
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005fa8 g     F .text	00000010 localeconv
0000c9f8 g     F .text	00000050 alt_ic_isr_register
00000c10 g     F .text	00000040 fwrite
0000f454 g       *ABS*	00000000 _edata
00011218 g       *ABS*	00000000 _end
000001d0 g       *ABS*	00000000 __ram_exceptions_end
0000c18c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000cae4 g     F .text	000000a0 alt_ic_irq_disable
00007e34 g     F .text	0000007c __swrite
0000f41c g     O .rwdata	00000004 __malloc_trim_threshold
00000b2c g     F .text	00000038 exit
00005e14 g     F .text	000000c8 _fwalk_reent
00006ca0 g     F .text	0000018c __mdiff
00000a84 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000052a0 g     F .text	00000004 __sfp_lock_release
00007d94 g     F .text	00000030 __isnand
0000ad90 g     F .text	00000020 _exit
0000aa70 g     F .text	00000154 alt_alarm_start
0000a3b8 g     F .text	00000124 __muldi3
00006058 g     F .text	00000194 __smakebuf_r
00001578 g     F .text	00000074 strlen
0000cf0c g     F .text	0000018c open
00009f44 g     F .text	00000088 __gedf2
0000b550 g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c9dc g     F .text	0000001c alt_icache_flush_all
0000f450 g     O .rwdata	00000004 alt_priority_mask
0000ca48 g     F .text	0000009c alt_ic_irq_enable
00003508 g     F .text	00000024 __vfprintf_internal
0000969c g     F .text	00000080 __subdf3
00006580 g     F .text	000000c4 __lo0bits
0000f448 g     O .rwdata	00000008 alt_alarm_list
0000c914 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000abc4 g     F .text	00000100 close
0000b00c g     F .text	00000080 alt_load
0000a55c g     F .text	00000314 __pack_d
00000c50 g     F .text	00000014 free
000052a4 g     F .text	00000004 __sinit_lock_acquire
000008b0 g     F .text	000000c0 myscheduler
00007208 g     F .text	0000012c __multadd
000064e8 g     F .text	00000028 _Bfree
00000674 g     F .text	000000c4 mythread_join



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407414 	ori	at,at,464
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
 ********************************************************/


.section .exceptions.exit.user, "xa"
// only switch contexts if global_flag = 1 (interrupt triggered by alarm)
call isFlagSet
  98:	000020c0 	call	20c <isFlagSet>
beq  r2, r0, end_switch
  9c:	10000526 	beq	r2,zero,b4 <end_switch>
// r4 is the argument register.  Pass sp to myscheduler.
add  r4, sp, r0
  a0:	d809883a 	mov	r4,sp
call myscheduler
  a4:	00008b00 	call	8b0 <myscheduler>
// Before switching contexts, store the current thread's frame pointer.
stw  fp, -4(sp)
  a8:	df3fff15 	stw	fp,-4(sp)
// r2 contains the return value from myscheduler. Set sp to new thread's context.
add  sp, r2, r0
  ac:	1037883a 	mov	sp,r2
// Load the new thread's frame pointer.
ldw  fp, -4(sp)
  b0:	df3fff17 	ldw	fp,-4(sp)

000000b4 <end_switch>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 100:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 118:	0005313a 	rdctl	r2,ipending
 11c:	e0bffc15 	stw	r2,-16(fp)

  return active;
 120:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 124:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 128:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 12c:	00800044 	movi	r2,1
 130:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 134:	e0ffff17 	ldw	r3,-4(fp)
 138:	e0bffe17 	ldw	r2,-8(fp)
 13c:	1884703a 	and	r2,r3,r2
 140:	1005003a 	cmpeq	r2,r2,zero
 144:	1000161e 	bne	r2,zero,1a0 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	00c00074 	movhi	r3,1
 150:	18c3e204 	addi	r3,r3,3976
 154:	100490fa 	slli	r2,r2,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	11400017 	ldw	r5,0(r2)
 160:	e0bffd17 	ldw	r2,-12(fp)
 164:	00c00074 	movhi	r3,1
 168:	18c3e204 	addi	r3,r3,3976
 16c:	100490fa 	slli	r2,r2,3
 170:	10c5883a 	add	r2,r2,r3
 174:	10800104 	addi	r2,r2,4
 178:	11000017 	ldw	r4,0(r2)
 17c:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bffb15 	stw	r2,-20(fp)

  return active;
 188:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 18c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	1004c03a 	cmpne	r2,r2,zero
 198:	103fe31e 	bne	r2,zero,128 <alt_irq_handler+0x20>
 19c:	00000706 	br	1bc <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a0:	e0bffe17 	ldw	r2,-8(fp)
 1a4:	1085883a 	add	r2,r2,r2
 1a8:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1ac:	e0bffd17 	ldw	r2,-12(fp)
 1b0:	10800044 	addi	r2,r2,1
 1b4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b8:	003fde06 	br	134 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

Disassembly of section .text:

000001d0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d69d0514 	ori	gp,gp,29716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	1083ac14 	ori	r2,r2,3760

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18c48614 	ori	r3,r3,4632

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x30>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	000b00c0 	call	b00c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	000b24c0 	call	b24c <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <alt_after_alt_main>

0000020c <isFlagSet>:
// Global flag for alarm interrupt
unsigned int global_flag = 0;

// Determine if flag is set
unsigned int isFlagSet()
{
     20c:	deffff04 	addi	sp,sp,-4
     210:	df000015 	stw	fp,0(sp)
     214:	d839883a 	mov	fp,sp
    return global_flag != 0;
     218:	d0a6a717 	ldw	r2,-25956(gp)
     21c:	1004c03a 	cmpne	r2,r2,zero
}
     220:	e037883a 	mov	sp,fp
     224:	df000017 	ldw	fp,0(sp)
     228:	dec00104 	addi	sp,sp,4
     22c:	f800283a 	ret

00000230 <resetFlag>:

// Reset the global flag
void resetFlag()
{
     230:	deffff04 	addi	sp,sp,-4
     234:	df000015 	stw	fp,0(sp)
     238:	d839883a 	mov	fp,sp
    global_flag = 0;
     23c:	d026a715 	stw	zero,-25956(gp)
}
     240:	e037883a 	mov	sp,fp
     244:	df000017 	ldw	fp,0(sp)
     248:	dec00104 	addi	sp,sp,4
     24c:	f800283a 	ret

00000250 <myinterrupt_handler>:

// Alarm interrupt handler
alt_u32 myinterrupt_handler(void* context)
{
     250:	defffe04 	addi	sp,sp,-8
     254:	df000115 	stw	fp,4(sp)
     258:	df000104 	addi	fp,sp,4
     25c:	e13fff15 	stw	r4,-4(fp)
    global_flag = 1;
     260:	00800044 	movi	r2,1
     264:	d0a6a715 	stw	r2,-25956(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     268:	00800074 	movhi	r2,1
     26c:	1083b904 	addi	r2,r2,3812
     270:	10800017 	ldw	r2,0(r2)
    return alt_ticks_per_second();
}
     274:	e037883a 	mov	sp,fp
     278:	df000017 	ldw	fp,0(sp)
     27c:	dec00104 	addi	sp,sp,4
     280:	f800283a 	ret

00000284 <os_prototype>:

/*
 *  Creates threads, joins threads, then endlessly prints message.
 */
void os_prototype()
{
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
    unsigned int i;
    tcb *newThread;

    for (i = 0; i < NUM_THREADS; i++)
     294:	e03fff15 	stw	zero,-4(fp)
     298:	00000a06 	br	2c4 <os_prototype+0x40>
    {
        // Create a thread with id=i that will execute mythread
        newThread = mythread_create(i, mythread);
     29c:	e13fff17 	ldw	r4,-4(fp)
     2a0:	01400034 	movhi	r5,0
     2a4:	29420204 	addi	r5,r5,2056
     2a8:	00005540 	call	554 <mythread_create>
     2ac:	e0bffe15 	stw	r2,-8(fp)
        // Add the thread to the wait queue
        mythread_join(newThread);
     2b0:	e13ffe17 	ldw	r4,-8(fp)
     2b4:	00006740 	call	674 <mythread_join>
void os_prototype()
{
    unsigned int i;
    tcb *newThread;

    for (i = 0; i < NUM_THREADS; i++)
     2b8:	e0bfff17 	ldw	r2,-4(fp)
     2bc:	10800044 	addi	r2,r2,1
     2c0:	e0bfff15 	stw	r2,-4(fp)
     2c4:	e0bfff17 	ldw	r2,-4(fp)
     2c8:	10800230 	cmpltui	r2,r2,8
     2cc:	103ff31e 	bne	r2,zero,29c <os_prototype+0x18>
     2d0:	00800074 	movhi	r2,1
     2d4:	1083b904 	addi	r2,r2,3812
     2d8:	10800017 	ldw	r2,0(r2)
     2dc:	1009883a 	mov	r4,r2
        newThread = mythread_create(i, mythread);
        // Add the thread to the wait queue
        mythread_join(newThread);
    }
    
    if (alt_alarm_start(&timer, ALARMTICKS(QUANTUM_LENGTH), myinterrupt_handler, NULL) < 0)
     2e0:	01400284 	movi	r5,10
     2e4:	0000af40 	call	af4 <__mulsi3>
     2e8:	1009883a 	mov	r4,r2
     2ec:	01400284 	movi	r5,10
     2f0:	0000ae40 	call	ae4 <__udivsi3>
     2f4:	100b883a 	mov	r5,r2
     2f8:	01000074 	movhi	r4,1
     2fc:	2103bc04 	addi	r4,r4,3824
     300:	01800034 	movhi	r6,0
     304:	31809404 	addi	r6,r6,592
     308:	000f883a 	mov	r7,zero
     30c:	000aa700 	call	aa70 <alt_alarm_start>
     310:	1004403a 	cmpge	r2,r2,zero
     314:	1000031e 	bne	r2,zero,324 <os_prototype+0xa0>
    {
        printf("No system clock available\r\n");
     318:	01000074 	movhi	r4,1
     31c:	21355704 	addi	r4,r4,-10916
     320:	00014f40 	call	14f4 <puts>
    }

    /* an endless while loop */
    while (1)
    {
        printf ("This is the OS prototype for my exciting CSE351 course projects!\n");
     324:	01000074 	movhi	r4,1
     328:	21355e04 	addi	r4,r4,-10888
     32c:	00014f40 	call	14f4 <puts>
        
        /* delay printf for a while */
        for (i = 0; i < MAX; i++);
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000306 	br	344 <os_prototype+0xc0>
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	10800044 	addi	r2,r2,1
     340:	e0bfff15 	stw	r2,-4(fp)
     344:	e0ffff17 	ldw	r3,-4(fp)
     348:	00b0d3d4 	movui	r2,49999
     34c:	10fffa2e 	bgeu	r2,r3,338 <os_prototype+0xb4>
    }
     350:	003ff406 	br	324 <os_prototype+0xa0>

00000354 <main>:

/*
 *  Begins OS prototype
 */
int main()
{
     354:	defffe04 	addi	sp,sp,-8
     358:	dfc00115 	stw	ra,4(sp)
     35c:	df000015 	stw	fp,0(sp)
     360:	d839883a 	mov	fp,sp
    os_prototype();
     364:	00002840 	call	284 <os_prototype>
    return 0;
     368:	0005883a 	mov	r2,zero
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <isQueueEmpty>:
static Queue queue = {NULL, 0, 0};

/**
 * Determines if queue is empty or not.
 */
unsigned int isQueueEmpty(){
     380:	deffff04 	addi	sp,sp,-4
     384:	df000015 	stw	fp,0(sp)
     388:	d839883a 	mov	fp,sp
	return (queue.size <= 0);
     38c:	00800074 	movhi	r2,1
     390:	1083c204 	addi	r2,r2,3848
     394:	10801517 	ldw	r2,84(r2)
     398:	1005003a 	cmpeq	r2,r2,zero
}
     39c:	e037883a 	mov	sp,fp
     3a0:	df000017 	ldw	fp,0(sp)
     3a4:	dec00104 	addi	sp,sp,4
     3a8:	f800283a 	ret

000003ac <isQueueFull>:

/**
 * Determines if queue is full or not.
 */
unsigned int isQueueFull(){
     3ac:	deffff04 	addi	sp,sp,-4
     3b0:	df000015 	stw	fp,0(sp)
     3b4:	d839883a 	mov	fp,sp
	return (queue.size >= MAX_QUEUE_SIZE);
     3b8:	00800074 	movhi	r2,1
     3bc:	1083c204 	addi	r2,r2,3848
     3c0:	10801517 	ldw	r2,84(r2)
     3c4:	10800528 	cmpgeui	r2,r2,20
}
     3c8:	e037883a 	mov	sp,fp
     3cc:	df000017 	ldw	fp,0(sp)
     3d0:	dec00104 	addi	sp,sp,4
     3d4:	f800283a 	ret

000003d8 <queuePrint>:

/*
 * Used for debugging purposes only
 */
void queuePrint()
{
     3d8:	defffc04 	addi	sp,sp,-16
     3dc:	dfc00315 	stw	ra,12(sp)
     3e0:	df000215 	stw	fp,8(sp)
     3e4:	df000204 	addi	fp,sp,8
	int back = ((queue.front + queue.size)%MAX_QUEUE_SIZE);
     3e8:	00800074 	movhi	r2,1
     3ec:	1083c204 	addi	r2,r2,3848
     3f0:	10c01417 	ldw	r3,80(r2)
     3f4:	00800074 	movhi	r2,1
     3f8:	1083c204 	addi	r2,r2,3848
     3fc:	10801517 	ldw	r2,84(r2)
     400:	1889883a 	add	r4,r3,r2
     404:	01400504 	movi	r5,20
     408:	0000aec0 	call	aec <__umodsi3>
     40c:	e0bfff15 	stw	r2,-4(fp)

	int i = queue.front;
     410:	00800074 	movhi	r2,1
     414:	1083c204 	addi	r2,r2,3848
     418:	10801417 	ldw	r2,80(r2)
     41c:	e0bffe15 	stw	r2,-8(fp)
	printf( "[");
     420:	010016c4 	movi	r4,91
     424:	00014300 	call	1430 <putchar>
	if (i < back){
     428:	e0fffe17 	ldw	r3,-8(fp)
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	1880130e 	bge	r3,r2,480 <queuePrint+0xa8>
		while (i<back){
     434:	00000e06 	br	470 <queuePrint+0x98>
			printf("%d, ", queue.threads[i]->thread_id);
     438:	e0bffe17 	ldw	r2,-8(fp)
     43c:	00c00074 	movhi	r3,1
     440:	18c3c204 	addi	r3,r3,3848
     444:	1085883a 	add	r2,r2,r2
     448:	1085883a 	add	r2,r2,r2
     44c:	10c5883a 	add	r2,r2,r3
     450:	10800017 	ldw	r2,0(r2)
     454:	11400017 	ldw	r5,0(r2)
     458:	01000074 	movhi	r4,1
     45c:	21356f04 	addi	r4,r4,-10820
     460:	00013b80 	call	13b8 <printf>
			i=(i+1);
     464:	e0bffe17 	ldw	r2,-8(fp)
     468:	10800044 	addi	r2,r2,1
     46c:	e0bffe15 	stw	r2,-8(fp)
	int back = ((queue.front + queue.size)%MAX_QUEUE_SIZE);

	int i = queue.front;
	printf( "[");
	if (i < back){
		while (i<back){
     470:	e0fffe17 	ldw	r3,-8(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	18bfef16 	blt	r3,r2,438 <queuePrint+0x60>
     47c:	00002d06 	br	534 <queuePrint+0x15c>
			printf("%d, ", queue.threads[i]->thread_id);
			i=(i+1);
		}
	}
	else if (i>=back && queue.size != 0)
     480:	e0fffe17 	ldw	r3,-8(fp)
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	18802a16 	blt	r3,r2,534 <queuePrint+0x15c>
     48c:	00800074 	movhi	r2,1
     490:	1083c204 	addi	r2,r2,3848
     494:	10801517 	ldw	r2,84(r2)
     498:	1005003a 	cmpeq	r2,r2,zero
     49c:	1000251e 	bne	r2,zero,534 <queuePrint+0x15c>
	{
		while (i< MAX_QUEUE_SIZE){
     4a0:	00000e06 	br	4dc <queuePrint+0x104>
			printf("%d, ", queue.threads[i]->thread_id);
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	00c00074 	movhi	r3,1
     4ac:	18c3c204 	addi	r3,r3,3848
     4b0:	1085883a 	add	r2,r2,r2
     4b4:	1085883a 	add	r2,r2,r2
     4b8:	10c5883a 	add	r2,r2,r3
     4bc:	10800017 	ldw	r2,0(r2)
     4c0:	11400017 	ldw	r5,0(r2)
     4c4:	01000074 	movhi	r4,1
     4c8:	21356f04 	addi	r4,r4,-10820
     4cc:	00013b80 	call	13b8 <printf>
			i=(i+1);
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10800044 	addi	r2,r2,1
     4d8:	e0bffe15 	stw	r2,-8(fp)
			i=(i+1);
		}
	}
	else if (i>=back && queue.size != 0)
	{
		while (i< MAX_QUEUE_SIZE){
     4dc:	e0bffe17 	ldw	r2,-8(fp)
     4e0:	10800510 	cmplti	r2,r2,20
     4e4:	103fef1e 	bne	r2,zero,4a4 <queuePrint+0xcc>
			printf("%d, ", queue.threads[i]->thread_id);
			i=(i+1);
		}
		i=0;
     4e8:	e03ffe15 	stw	zero,-8(fp)
		while (i<back){
     4ec:	00000e06 	br	528 <queuePrint+0x150>
			printf("%d, ", queue.threads[i]->thread_id);
     4f0:	e0bffe17 	ldw	r2,-8(fp)
     4f4:	00c00074 	movhi	r3,1
     4f8:	18c3c204 	addi	r3,r3,3848
     4fc:	1085883a 	add	r2,r2,r2
     500:	1085883a 	add	r2,r2,r2
     504:	10c5883a 	add	r2,r2,r3
     508:	10800017 	ldw	r2,0(r2)
     50c:	11400017 	ldw	r5,0(r2)
     510:	01000074 	movhi	r4,1
     514:	21356f04 	addi	r4,r4,-10820
     518:	00013b80 	call	13b8 <printf>
			i=(i+1);
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10800044 	addi	r2,r2,1
     524:	e0bffe15 	stw	r2,-8(fp)
		while (i< MAX_QUEUE_SIZE){
			printf("%d, ", queue.threads[i]->thread_id);
			i=(i+1);
		}
		i=0;
		while (i<back){
     528:	e0fffe17 	ldw	r3,-8(fp)
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	18bfef16 	blt	r3,r2,4f0 <queuePrint+0x118>
			printf("%d, ", queue.threads[i]->thread_id);
			i=(i+1);
		}
	}
	printf("]\n");
     534:	01000074 	movhi	r4,1
     538:	21357104 	addi	r4,r4,-10812
     53c:	00014f40 	call	14f4 <puts>
}
     540:	e037883a 	mov	sp,fp
     544:	dfc00117 	ldw	ra,4(sp)
     548:	df000017 	ldw	fp,0(sp)
     54c:	dec00204 	addi	sp,sp,8
     550:	f800283a 	ret

00000554 <mythread_create>:
 * @param (*mythread)(thread_id) - function pointer to mythread in main.  Passes thread_id as parameter.
 *
 * @return tcb*	- pointer to the thread control buffer that was created.
 */
tcb *mythread_create(unsigned int thread_id, void (*mythread)(unsigned int thread_id))
{
     554:	defffa04 	addi	sp,sp,-24
     558:	dfc00515 	stw	ra,20(sp)
     55c:	df000415 	stw	fp,16(sp)
     560:	df000404 	addi	fp,sp,16
     564:	e13ffe15 	stw	r4,-8(fp)
     568:	e17fff15 	stw	r5,-4(fp)
	// Pointer to the thread's context
	unsigned int *threadContext;

    // allocate a tcb for a thread
    tcb *newThread;
    newThread = (tcb *)malloc(sizeof(tcb));
     56c:	01000304 	movi	r4,12
     570:	0000c640 	call	c64 <malloc>
     574:	e0bffc15 	stw	r2,-16(fp)
    if (newThread == NULL)
     578:	e0bffc17 	ldw	r2,-16(fp)
     57c:	1004c03a 	cmpne	r2,r2,zero
     580:	1000051e 	bne	r2,zero,598 <mythread_create+0x44>
    {
        printf("Error allocating space for new tcb!\n");
     584:	01000074 	movhi	r4,1
     588:	21357204 	addi	r4,r4,-10808
     58c:	00014f40 	call	14f4 <puts>
        exit(1);
     590:	01000044 	movi	r4,1
     594:	0000b2c0 	call	b2c <exit>
    }
    
    // Pointer to thread's TCB
    newThread->thread_id = thread_id;
     598:	e0fffc17 	ldw	r3,-16(fp)
     59c:	e0bffe17 	ldw	r2,-8(fp)
     5a0:	18800015 	stw	r2,0(r3)

    // allocate a stack for the new thread
    newThread->stack = (unsigned int *)malloc(sizeof(unsigned int) * THREAD_FRAME_SIZE);
     5a4:	01040004 	movi	r4,4096
     5a8:	0000c640 	call	c64 <malloc>
     5ac:	1007883a 	mov	r3,r2
     5b0:	e0bffc17 	ldw	r2,-16(fp)
     5b4:	10c00115 	stw	r3,4(r2)
    if (newThread->stack == NULL)
     5b8:	e0bffc17 	ldw	r2,-16(fp)
     5bc:	10800117 	ldw	r2,4(r2)
     5c0:	1004c03a 	cmpne	r2,r2,zero
     5c4:	1000051e 	bne	r2,zero,5dc <mythread_create+0x88>
    {
        printf("Error allocating space for tcb's frame!\n");
     5c8:	01000074 	movhi	r4,1
     5cc:	21357b04 	addi	r4,r4,-10772
     5d0:	00014f40 	call	14f4 <puts>
        exit(1);
     5d4:	01000044 	movi	r4,1
     5d8:	0000b2c0 	call	b2c <exit>
    }

    /*
     * Set the context pointer to point to the context section in the frame.
     */
    newThread->context = (unsigned int *)(newThread->stack + THREAD_FRAME_SIZE - CONTEXT_SIZE);
     5dc:	e0bffc17 	ldw	r2,-16(fp)
     5e0:	10800117 	ldw	r2,4(r2)
     5e4:	10c3ed04 	addi	r3,r2,4020
     5e8:	e0bffc17 	ldw	r2,-16(fp)
     5ec:	10c00215 	stw	r3,8(r2)

    /*
     * When the interrupt occurs, the thread will return to
     *    the mythread function in main.
     */
    newThread->context[18] = (unsigned int)mythread;
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800217 	ldw	r2,8(r2)
     5f8:	10c01204 	addi	r3,r2,72
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	18800015 	stw	r2,0(r3)

    /*
     * Set Processor Interrupt-Enable bit (PIE) = 1 in the r5 register.
     * When PIE=1, internal and maskable external interrupts can be taken.
     */
    newThread->context[17] = 1;
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800217 	ldw	r2,8(r2)
     60c:	10c01104 	addi	r3,r2,68
     610:	00800044 	movi	r2,1
     614:	18800015 	stw	r2,0(r3)

    /*
     * Pass the thread_id as an argument using r4 register.
     */
    newThread->context[5] = thread_id;
     618:	e0bffc17 	ldw	r2,-16(fp)
     61c:	10800217 	ldw	r2,8(r2)
     620:	10c00504 	addi	r3,r2,20
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	18800015 	stw	r2,0(r3)

    /*
     * Set the return address to the thread_destroy function where
     *   the memory will be released.
     */
    newThread->context[0] = (unsigned int)mythread_destroy;
     62c:	e0bffc17 	ldw	r2,-16(fp)
     630:	10c00217 	ldw	r3,8(r2)
     634:	00800034 	movhi	r2,0
     638:	10825c04 	addi	r2,r2,2416
     63c:	18800015 	stw	r2,0(r3)

    /*
     * Store the value of the Frame pointer pointer into memory
     * Will be loaded in the context_switch.
     */
    newThread->context[-1] = (unsigned int *)(newThread->context + CONTEXT_SIZE);
     640:	e0bffc17 	ldw	r2,-16(fp)
     644:	10800217 	ldw	r2,8(r2)
     648:	10ffff04 	addi	r3,r2,-4
     64c:	e0bffc17 	ldw	r2,-16(fp)
     650:	10800217 	ldw	r2,8(r2)
     654:	10801304 	addi	r2,r2,76
     658:	18800015 	stw	r2,0(r3)

    return newThread;
     65c:	e0bffc17 	ldw	r2,-16(fp)
}
     660:	e037883a 	mov	sp,fp
     664:	dfc00117 	ldw	ra,4(sp)
     668:	df000017 	ldw	fp,0(sp)
     66c:	dec00204 	addi	sp,sp,8
     670:	f800283a 	ret

00000674 <mythread_join>:
 * Adds the thread to the run queue
 *
 * @param the pointer to the thread to be added to the run queue
 */
void mythread_join(tcb *newThread)
{
     674:	defffc04 	addi	sp,sp,-16
     678:	dfc00315 	stw	ra,12(sp)
     67c:	df000215 	stw	fp,8(sp)
     680:	df000204 	addi	fp,sp,8
     684:	e13fff15 	stw	r4,-4(fp)
    int back;
    if (isQueueFull()){
     688:	00003ac0 	call	3ac <isQueueFull>
     68c:	1005003a 	cmpeq	r2,r2,zero
     690:	10000b1e 	bne	r2,zero,6c0 <mythread_join+0x4c>
    	fprintf(stderr, "Unable to add pointer to queue: Queue Full!\n");
     694:	00800074 	movhi	r2,1
     698:	10bd0504 	addi	r2,r2,-3052
     69c:	10800017 	ldw	r2,0(r2)
     6a0:	11c00317 	ldw	r7,12(r2)
     6a4:	01000074 	movhi	r4,1
     6a8:	21358504 	addi	r4,r4,-10732
     6ac:	01400044 	movi	r5,1
     6b0:	01800b04 	movi	r6,44
     6b4:	0000c100 	call	c10 <fwrite>
    	exit(1);
     6b8:	01000044 	movi	r4,1
     6bc:	0000b2c0 	call	b2c <exit>
    }
    
    back = (queue.front + queue.size) % MAX_QUEUE_SIZE;
     6c0:	00800074 	movhi	r2,1
     6c4:	1083c204 	addi	r2,r2,3848
     6c8:	10c01417 	ldw	r3,80(r2)
     6cc:	00800074 	movhi	r2,1
     6d0:	1083c204 	addi	r2,r2,3848
     6d4:	10801517 	ldw	r2,84(r2)
     6d8:	1889883a 	add	r4,r3,r2
     6dc:	01400504 	movi	r5,20
     6e0:	0000aec0 	call	aec <__umodsi3>
     6e4:	e0bffe15 	stw	r2,-8(fp)
    queue.threads[back] = newThread;
     6e8:	e0bffe17 	ldw	r2,-8(fp)
     6ec:	00c00074 	movhi	r3,1
     6f0:	18c3c204 	addi	r3,r3,3848
     6f4:	1085883a 	add	r2,r2,r2
     6f8:	1085883a 	add	r2,r2,r2
     6fc:	10c7883a 	add	r3,r2,r3
     700:	e0bfff17 	ldw	r2,-4(fp)
     704:	18800015 	stw	r2,0(r3)
    
    queue.size++;
     708:	00800074 	movhi	r2,1
     70c:	1083c204 	addi	r2,r2,3848
     710:	10801517 	ldw	r2,84(r2)
     714:	10c00044 	addi	r3,r2,1
     718:	00800074 	movhi	r2,1
     71c:	1083c204 	addi	r2,r2,3848
     720:	10c01515 	stw	r3,84(r2)
}
     724:	e037883a 	mov	sp,fp
     728:	dfc00117 	ldw	ra,4(sp)
     72c:	df000017 	ldw	fp,0(sp)
     730:	dec00204 	addi	sp,sp,8
     734:	f800283a 	ret

00000738 <mythread_disjoin>:
 *
 * @returns pointer to thread control buffer that was just removed
 *            from the queue.
 */
tcb *mythread_disjoin()
{
     738:	defffd04 	addi	sp,sp,-12
     73c:	dfc00215 	stw	ra,8(sp)
     740:	df000115 	stw	fp,4(sp)
     744:	df000104 	addi	fp,sp,4
    void *newThread = NULL;
     748:	e03fff15 	stw	zero,-4(fp)
    
    if(isQueueEmpty()){
     74c:	00003800 	call	380 <isQueueEmpty>
     750:	1005003a 	cmpeq	r2,r2,zero
     754:	10000b1e 	bne	r2,zero,784 <mythread_disjoin+0x4c>
    	fprintf(stderr,"Unable to remove pointer from queue: Queue Empty!\n");
     758:	00800074 	movhi	r2,1
     75c:	10bd0504 	addi	r2,r2,-3052
     760:	10800017 	ldw	r2,0(r2)
     764:	11c00317 	ldw	r7,12(r2)
     768:	01000074 	movhi	r4,1
     76c:	21359104 	addi	r4,r4,-10684
     770:	01400044 	movi	r5,1
     774:	01800c84 	movi	r6,50
     778:	0000c100 	call	c10 <fwrite>
    	exit(1);
     77c:	01000044 	movi	r4,1
     780:	0000b2c0 	call	b2c <exit>
    }
    
    newThread = queue.threads[queue.front];
     784:	00800074 	movhi	r2,1
     788:	1083c204 	addi	r2,r2,3848
     78c:	10801417 	ldw	r2,80(r2)
     790:	00c00074 	movhi	r3,1
     794:	18c3c204 	addi	r3,r3,3848
     798:	1085883a 	add	r2,r2,r2
     79c:	1085883a 	add	r2,r2,r2
     7a0:	10c5883a 	add	r2,r2,r3
     7a4:	10800017 	ldw	r2,0(r2)
     7a8:	e0bfff15 	stw	r2,-4(fp)
    
    queue.front = (queue.front+1) % MAX_QUEUE_SIZE;
     7ac:	00800074 	movhi	r2,1
     7b0:	1083c204 	addi	r2,r2,3848
     7b4:	10801417 	ldw	r2,80(r2)
     7b8:	11000044 	addi	r4,r2,1
     7bc:	01400504 	movi	r5,20
     7c0:	0000aec0 	call	aec <__umodsi3>
     7c4:	1007883a 	mov	r3,r2
     7c8:	00800074 	movhi	r2,1
     7cc:	1083c204 	addi	r2,r2,3848
     7d0:	10c01415 	stw	r3,80(r2)
    queue.size--;
     7d4:	00800074 	movhi	r2,1
     7d8:	1083c204 	addi	r2,r2,3848
     7dc:	10801517 	ldw	r2,84(r2)
     7e0:	10ffffc4 	addi	r3,r2,-1
     7e4:	00800074 	movhi	r2,1
     7e8:	1083c204 	addi	r2,r2,3848
     7ec:	10c01515 	stw	r3,84(r2)
    
    return newThread;
     7f0:	e0bfff17 	ldw	r2,-4(fp)
}
     7f4:	e037883a 	mov	sp,fp
     7f8:	dfc00117 	ldw	ra,4(sp)
     7fc:	df000017 	ldw	fp,0(sp)
     800:	dec00204 	addi	sp,sp,8
     804:	f800283a 	ret

00000808 <mythread>:
/**
 *  This is the thread's function.  Do not update this!  
 *  Provided in assignment.
 */
void mythread(int thread_id)
{
     808:	defff904 	addi	sp,sp,-28
     80c:	dfc00615 	stw	ra,24(sp)
     810:	df000515 	stw	fp,20(sp)
     814:	df000504 	addi	fp,sp,20
     818:	e13ffe15 	stw	r4,-8(fp)
	// The declaration of j as an integer was added on 10/24/2011
	int i, j, n;
	n = (thread_id % 2 == 0)? 10: 15;
     81c:	e0bffe17 	ldw	r2,-8(fp)
     820:	1080004c 	andi	r2,r2,1
     824:	1004c03a 	cmpne	r2,r2,zero
     828:	1000031e 	bne	r2,zero,838 <mythread+0x30>
     82c:	00800284 	movi	r2,10
     830:	e0bfff15 	stw	r2,-4(fp)
     834:	00000206 	br	840 <mythread+0x38>
     838:	008003c4 	movi	r2,15
     83c:	e0bfff15 	stw	r2,-4(fp)
     840:	e0bfff17 	ldw	r2,-4(fp)
     844:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++){
     848:	e03ffd15 	stw	zero,-12(fp)
     84c:	00001006 	br	890 <mythread+0x88>
	    printf("This is message %d of thread #%d.\n", i, thread_id);
     850:	01000074 	movhi	r4,1
     854:	21359e04 	addi	r4,r4,-10632
     858:	e17ffd17 	ldw	r5,-12(fp)
     85c:	e1bffe17 	ldw	r6,-8(fp)
     860:	00013b80 	call	13b8 <printf>
	    for (j = 0; j < MAX; j++);
     864:	e03ffc15 	stw	zero,-16(fp)
     868:	00000306 	br	878 <mythread+0x70>
     86c:	e0bffc17 	ldw	r2,-16(fp)
     870:	10800044 	addi	r2,r2,1
     874:	e0bffc15 	stw	r2,-16(fp)
     878:	e0fffc17 	ldw	r3,-16(fp)
     87c:	00b0d3d4 	movui	r2,49999
     880:	10fffa0e 	bge	r2,r3,86c <mythread+0x64>
void mythread(int thread_id)
{
	// The declaration of j as an integer was added on 10/24/2011
	int i, j, n;
	n = (thread_id % 2 == 0)? 10: 15;
	for (i = 0; i < n; i++){
     884:	e0bffd17 	ldw	r2,-12(fp)
     888:	10800044 	addi	r2,r2,1
     88c:	e0bffd15 	stw	r2,-12(fp)
     890:	e0fffd17 	ldw	r3,-12(fp)
     894:	e0bffb17 	ldw	r2,-20(fp)
     898:	18bfed16 	blt	r3,r2,850 <mythread+0x48>
	    printf("This is message %d of thread #%d.\n", i, thread_id);
	    for (j = 0; j < MAX; j++);
	}
}
     89c:	e037883a 	mov	sp,fp
     8a0:	dfc00117 	ldw	ra,4(sp)
     8a4:	df000017 	ldw	fp,0(sp)
     8a8:	dec00204 	addi	sp,sp,8
     8ac:	f800283a 	ret

000008b0 <myscheduler>:
 * @param the pointer to the context of the thread that was executing before the interrupt
 *
 * @return the pointer to the context of the thread that will now be running
 */
void *myscheduler(void *context)
{
     8b0:	defffd04 	addi	sp,sp,-12
     8b4:	dfc00215 	stw	ra,8(sp)
     8b8:	df000115 	stw	fp,4(sp)
     8bc:	df000104 	addi	fp,sp,4
     8c0:	e13fff15 	stw	r4,-4(fp)

	// Only switch the context after the main has created and joined threads.
	if (!isQueueEmpty())
     8c4:	00003800 	call	380 <isQueueEmpty>
     8c8:	1004c03a 	cmpne	r2,r2,zero
     8cc:	1000161e 	bne	r2,zero,928 <myscheduler+0x78>
	{
	    // If the main_context is null, then this is the main's context
	    if (main_context == NULL)
     8d0:	d0a6a917 	ldw	r2,-25948(gp)
     8d4:	1004c03a 	cmpne	r2,r2,zero
     8d8:	1000031e 	bne	r2,zero,8e8 <myscheduler+0x38>
	    {
	        // Save the context of the main
	    	main_context = (unsigned int *)context;
     8dc:	e0bfff17 	ldw	r2,-4(fp)
     8e0:	d0a6a915 	stw	r2,-25948(gp)
     8e4:	00000806 	br	908 <myscheduler+0x58>
	    }
		// This thread hasn't completed its execution, so add it to the end of the line
	    else if (this_thread != NULL)
     8e8:	d0a6a817 	ldw	r2,-25952(gp)
     8ec:	1005003a 	cmpeq	r2,r2,zero
     8f0:	1000051e 	bne	r2,zero,908 <myscheduler+0x58>
        {
        	// Set pointer to the new thread's context
        	this_thread->context = (unsigned int *)context;
     8f4:	d0a6a817 	ldw	r2,-25952(gp)
     8f8:	e0ffff17 	ldw	r3,-4(fp)
     8fc:	10c00215 	stw	r3,8(r2)

        	// Add the thread to the run queue.
        	mythread_join(this_thread);
     900:	d126a817 	ldw	r4,-25952(gp)
     904:	00006740 	call	674 <mythread_join>
        }

    	queuePrint();
     908:	00003d80 	call	3d8 <queuePrint>

        /*
         * Set context pointer to point to the context of the first-in-line thread
         *   and remove the thread from the wait queue.
         */
        this_thread = mythread_disjoin(this_thread);
     90c:	d126a817 	ldw	r4,-25952(gp)
     910:	00007380 	call	738 <mythread_disjoin>
     914:	d0a6a815 	stw	r2,-25952(gp)
        context = (void *)(this_thread->context);
     918:	d0a6a817 	ldw	r2,-25952(gp)
     91c:	10800217 	ldw	r2,8(r2)
     920:	e0bfff15 	stw	r2,-4(fp)
     924:	00000b06 	br	954 <myscheduler+0xa4>
    }
	// The only thread left is the main, so return to the main.
    else if (this_thread==NULL && main_context!=NULL)
     928:	d0a6a817 	ldw	r2,-25952(gp)
     92c:	1004c03a 	cmpne	r2,r2,zero
     930:	1000081e 	bne	r2,zero,954 <myscheduler+0xa4>
     934:	d0a6a917 	ldw	r2,-25948(gp)
     938:	1005003a 	cmpeq	r2,r2,zero
     93c:	1000051e 	bne	r2,zero,954 <myscheduler+0xa4>
    {        
    	// Proceed with the execution of the main process
    	alt_printf("Interrupted by the DE2 timer!\n");
     940:	01000074 	movhi	r4,1
     944:	2135a704 	addi	r4,r4,-10596
     948:	000b2f80 	call	b2f8 <alt_printf>
        context = (void *)main_context;
     94c:	d0a6a917 	ldw	r2,-25948(gp)
     950:	e0bfff15 	stw	r2,-4(fp)
    }

	resetFlag();
     954:	00002300 	call	230 <resetFlag>
    return context;
     958:	e0bfff17 	ldw	r2,-4(fp)
}
     95c:	e037883a 	mov	sp,fp
     960:	dfc00117 	ldw	ra,4(sp)
     964:	df000017 	ldw	fp,0(sp)
     968:	dec00204 	addi	sp,sp,8
     96c:	f800283a 	ret

00000970 <mythread_destroy>:
 *
 * Interrupts must be disabled while this is happening to ensure that the thread is completely
 * destroyed before another thread begins execution.
 */
void mythread_destroy()
{
     970:	defffe04 	addi	sp,sp,-8
     974:	dfc00115 	stw	ra,4(sp)
     978:	df000015 	stw	fp,0(sp)
     97c:	d839883a 	mov	fp,sp
    DISABLE_INTERRUPTS();
     980:	0001703a 	wrctl	status,zero
    free(this_thread->stack);
     984:	d0a6a817 	ldw	r2,-25952(gp)
     988:	11000117 	ldw	r4,4(r2)
     98c:	0000c500 	call	c50 <free>
    free(this_thread);
     990:	d126a817 	ldw	r4,-25952(gp)
     994:	0000c500 	call	c50 <free>
    this_thread = NULL;
     998:	d026a815 	stw	zero,-25952(gp)
    ENABLE_INTERRUPTS();
     99c:	06000044 	movi	et,1
     9a0:	c001703a 	wrctl	status,et
    while(1);
     9a4:	003fff06 	br	9a4 <mythread_destroy+0x34>

000009a8 <udivmodsi4>:
     9a8:	29001b2e 	bgeu	r5,r4,a18 <udivmodsi4+0x70>
     9ac:	28001a16 	blt	r5,zero,a18 <udivmodsi4+0x70>
     9b0:	00800044 	movi	r2,1
     9b4:	0007883a 	mov	r3,zero
     9b8:	01c007c4 	movi	r7,31
     9bc:	00000306 	br	9cc <udivmodsi4+0x24>
     9c0:	19c01326 	beq	r3,r7,a10 <udivmodsi4+0x68>
     9c4:	18c00044 	addi	r3,r3,1
     9c8:	28000416 	blt	r5,zero,9dc <udivmodsi4+0x34>
     9cc:	294b883a 	add	r5,r5,r5
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	293ffa36 	bltu	r5,r4,9c0 <udivmodsi4+0x18>
     9d8:	10000d26 	beq	r2,zero,a10 <udivmodsi4+0x68>
     9dc:	0007883a 	mov	r3,zero
     9e0:	21400236 	bltu	r4,r5,9ec <udivmodsi4+0x44>
     9e4:	2149c83a 	sub	r4,r4,r5
     9e8:	1886b03a 	or	r3,r3,r2
     9ec:	1004d07a 	srli	r2,r2,1
     9f0:	280ad07a 	srli	r5,r5,1
     9f4:	103ffa1e 	bne	r2,zero,9e0 <udivmodsi4+0x38>
     9f8:	30000226 	beq	r6,zero,a04 <udivmodsi4+0x5c>
     9fc:	2005883a 	mov	r2,r4
     a00:	f800283a 	ret
     a04:	1809883a 	mov	r4,r3
     a08:	2005883a 	mov	r2,r4
     a0c:	f800283a 	ret
     a10:	0007883a 	mov	r3,zero
     a14:	003ff806 	br	9f8 <udivmodsi4+0x50>
     a18:	00800044 	movi	r2,1
     a1c:	0007883a 	mov	r3,zero
     a20:	003fef06 	br	9e0 <udivmodsi4+0x38>

00000a24 <__divsi3>:
     a24:	defffe04 	addi	sp,sp,-8
     a28:	dc000015 	stw	r16,0(sp)
     a2c:	dfc00115 	stw	ra,4(sp)
     a30:	0021883a 	mov	r16,zero
     a34:	20000c16 	blt	r4,zero,a68 <__divsi3+0x44>
     a38:	000d883a 	mov	r6,zero
     a3c:	28000e16 	blt	r5,zero,a78 <__divsi3+0x54>
     a40:	00009a80 	call	9a8 <udivmodsi4>
     a44:	1007883a 	mov	r3,r2
     a48:	8005003a 	cmpeq	r2,r16,zero
     a4c:	1000011e 	bne	r2,zero,a54 <__divsi3+0x30>
     a50:	00c7c83a 	sub	r3,zero,r3
     a54:	1805883a 	mov	r2,r3
     a58:	dfc00117 	ldw	ra,4(sp)
     a5c:	dc000017 	ldw	r16,0(sp)
     a60:	dec00204 	addi	sp,sp,8
     a64:	f800283a 	ret
     a68:	0109c83a 	sub	r4,zero,r4
     a6c:	04000044 	movi	r16,1
     a70:	000d883a 	mov	r6,zero
     a74:	283ff20e 	bge	r5,zero,a40 <__divsi3+0x1c>
     a78:	014bc83a 	sub	r5,zero,r5
     a7c:	8021003a 	cmpeq	r16,r16,zero
     a80:	003fef06 	br	a40 <__divsi3+0x1c>

00000a84 <__modsi3>:
     a84:	deffff04 	addi	sp,sp,-4
     a88:	dfc00015 	stw	ra,0(sp)
     a8c:	01800044 	movi	r6,1
     a90:	2807883a 	mov	r3,r5
     a94:	20000416 	blt	r4,zero,aa8 <__modsi3+0x24>
     a98:	28000c16 	blt	r5,zero,acc <__modsi3+0x48>
     a9c:	dfc00017 	ldw	ra,0(sp)
     aa0:	dec00104 	addi	sp,sp,4
     aa4:	00009a81 	jmpi	9a8 <udivmodsi4>
     aa8:	0109c83a 	sub	r4,zero,r4
     aac:	28000b16 	blt	r5,zero,adc <__modsi3+0x58>
     ab0:	180b883a 	mov	r5,r3
     ab4:	01800044 	movi	r6,1
     ab8:	00009a80 	call	9a8 <udivmodsi4>
     abc:	0085c83a 	sub	r2,zero,r2
     ac0:	dfc00017 	ldw	ra,0(sp)
     ac4:	dec00104 	addi	sp,sp,4
     ac8:	f800283a 	ret
     acc:	014bc83a 	sub	r5,zero,r5
     ad0:	dfc00017 	ldw	ra,0(sp)
     ad4:	dec00104 	addi	sp,sp,4
     ad8:	00009a81 	jmpi	9a8 <udivmodsi4>
     adc:	0147c83a 	sub	r3,zero,r5
     ae0:	003ff306 	br	ab0 <__modsi3+0x2c>

00000ae4 <__udivsi3>:
     ae4:	000d883a 	mov	r6,zero
     ae8:	00009a81 	jmpi	9a8 <udivmodsi4>

00000aec <__umodsi3>:
     aec:	01800044 	movi	r6,1
     af0:	00009a81 	jmpi	9a8 <udivmodsi4>

00000af4 <__mulsi3>:
     af4:	20000a26 	beq	r4,zero,b20 <__mulsi3+0x2c>
     af8:	0007883a 	mov	r3,zero
     afc:	2080004c 	andi	r2,r4,1
     b00:	1005003a 	cmpeq	r2,r2,zero
     b04:	2008d07a 	srli	r4,r4,1
     b08:	1000011e 	bne	r2,zero,b10 <__mulsi3+0x1c>
     b0c:	1947883a 	add	r3,r3,r5
     b10:	294b883a 	add	r5,r5,r5
     b14:	203ff91e 	bne	r4,zero,afc <__mulsi3+0x8>
     b18:	1805883a 	mov	r2,r3
     b1c:	f800283a 	ret
     b20:	0007883a 	mov	r3,zero
     b24:	1805883a 	mov	r2,r3
     b28:	f800283a 	ret

00000b2c <exit>:
     b2c:	defffe04 	addi	sp,sp,-8
     b30:	000b883a 	mov	r5,zero
     b34:	dc000015 	stw	r16,0(sp)
     b38:	dfc00115 	stw	ra,4(sp)
     b3c:	2021883a 	mov	r16,r4
     b40:	000366c0 	call	366c <__call_exitprocs>
     b44:	00800074 	movhi	r2,1
     b48:	10bd0604 	addi	r2,r2,-3048
     b4c:	11000017 	ldw	r4,0(r2)
     b50:	20800f17 	ldw	r2,60(r4)
     b54:	10000126 	beq	r2,zero,b5c <exit+0x30>
     b58:	103ee83a 	callr	r2
     b5c:	8009883a 	mov	r4,r16
     b60:	000ad900 	call	ad90 <_exit>

00000b64 <_fwrite_r>:
     b64:	defff604 	addi	sp,sp,-40
     b68:	dc000515 	stw	r16,20(sp)
     b6c:	d9400015 	stw	r5,0(sp)
     b70:	2021883a 	mov	r16,r4
     b74:	300b883a 	mov	r5,r6
     b78:	3809883a 	mov	r4,r7
     b7c:	dcc00815 	stw	r19,32(sp)
     b80:	dc800715 	stw	r18,28(sp)
     b84:	dc400615 	stw	r17,24(sp)
     b88:	dfc00915 	stw	ra,36(sp)
     b8c:	3825883a 	mov	r18,r7
     b90:	3027883a 	mov	r19,r6
     b94:	0000af40 	call	af4 <__mulsi3>
     b98:	1023883a 	mov	r17,r2
     b9c:	00800044 	movi	r2,1
     ba0:	d8800315 	stw	r2,12(sp)
     ba4:	dc400115 	stw	r17,4(sp)
     ba8:	dc400415 	stw	r17,16(sp)
     bac:	dec00215 	stw	sp,8(sp)
     bb0:	80000326 	beq	r16,zero,bc0 <_fwrite_r+0x5c>
     bb4:	80800e17 	ldw	r2,56(r16)
     bb8:	8009883a 	mov	r4,r16
     bbc:	10001226 	beq	r2,zero,c08 <_fwrite_r+0xa4>
     bc0:	d9400a17 	ldw	r5,40(sp)
     bc4:	8009883a 	mov	r4,r16
     bc8:	d9800204 	addi	r6,sp,8
     bcc:	00059780 	call	5978 <__sfvwrite_r>
     bd0:	980b883a 	mov	r5,r19
     bd4:	10000426 	beq	r2,zero,be8 <_fwrite_r+0x84>
     bd8:	d9000417 	ldw	r4,16(sp)
     bdc:	8909c83a 	sub	r4,r17,r4
     be0:	0000ae40 	call	ae4 <__udivsi3>
     be4:	1025883a 	mov	r18,r2
     be8:	9005883a 	mov	r2,r18
     bec:	dfc00917 	ldw	ra,36(sp)
     bf0:	dcc00817 	ldw	r19,32(sp)
     bf4:	dc800717 	ldw	r18,28(sp)
     bf8:	dc400617 	ldw	r17,24(sp)
     bfc:	dc000517 	ldw	r16,20(sp)
     c00:	dec00a04 	addi	sp,sp,40
     c04:	f800283a 	ret
     c08:	00052ac0 	call	52ac <__sinit>
     c0c:	003fec06 	br	bc0 <_fwrite_r+0x5c>

00000c10 <fwrite>:
     c10:	00800074 	movhi	r2,1
     c14:	10bd0504 	addi	r2,r2,-3052
     c18:	2017883a 	mov	r11,r4
     c1c:	11000017 	ldw	r4,0(r2)
     c20:	defffe04 	addi	sp,sp,-8
     c24:	3013883a 	mov	r9,r6
     c28:	2805883a 	mov	r2,r5
     c2c:	d9c00015 	stw	r7,0(sp)
     c30:	580b883a 	mov	r5,r11
     c34:	100d883a 	mov	r6,r2
     c38:	480f883a 	mov	r7,r9
     c3c:	dfc00115 	stw	ra,4(sp)
     c40:	0000b640 	call	b64 <_fwrite_r>
     c44:	dfc00117 	ldw	ra,4(sp)
     c48:	dec00204 	addi	sp,sp,8
     c4c:	f800283a 	ret

00000c50 <free>:
     c50:	00800074 	movhi	r2,1
     c54:	10bd0504 	addi	r2,r2,-3052
     c58:	200b883a 	mov	r5,r4
     c5c:	11000017 	ldw	r4,0(r2)
     c60:	00056641 	jmpi	5664 <_free_r>

00000c64 <malloc>:
     c64:	00800074 	movhi	r2,1
     c68:	10bd0504 	addi	r2,r2,-3052
     c6c:	200b883a 	mov	r5,r4
     c70:	11000017 	ldw	r4,0(r2)
     c74:	0000c781 	jmpi	c78 <_malloc_r>

00000c78 <_malloc_r>:
     c78:	defff604 	addi	sp,sp,-40
     c7c:	28c002c4 	addi	r3,r5,11
     c80:	00800584 	movi	r2,22
     c84:	dc800215 	stw	r18,8(sp)
     c88:	dfc00915 	stw	ra,36(sp)
     c8c:	df000815 	stw	fp,32(sp)
     c90:	ddc00715 	stw	r23,28(sp)
     c94:	dd800615 	stw	r22,24(sp)
     c98:	dd400515 	stw	r21,20(sp)
     c9c:	dd000415 	stw	r20,16(sp)
     ca0:	dcc00315 	stw	r19,12(sp)
     ca4:	dc400115 	stw	r17,4(sp)
     ca8:	dc000015 	stw	r16,0(sp)
     cac:	2025883a 	mov	r18,r4
     cb0:	10c01236 	bltu	r2,r3,cfc <_malloc_r+0x84>
     cb4:	04400404 	movi	r17,16
     cb8:	8940142e 	bgeu	r17,r5,d0c <_malloc_r+0x94>
     cbc:	00800304 	movi	r2,12
     cc0:	0007883a 	mov	r3,zero
     cc4:	90800015 	stw	r2,0(r18)
     cc8:	1805883a 	mov	r2,r3
     ccc:	dfc00917 	ldw	ra,36(sp)
     cd0:	df000817 	ldw	fp,32(sp)
     cd4:	ddc00717 	ldw	r23,28(sp)
     cd8:	dd800617 	ldw	r22,24(sp)
     cdc:	dd400517 	ldw	r21,20(sp)
     ce0:	dd000417 	ldw	r20,16(sp)
     ce4:	dcc00317 	ldw	r19,12(sp)
     ce8:	dc800217 	ldw	r18,8(sp)
     cec:	dc400117 	ldw	r17,4(sp)
     cf0:	dc000017 	ldw	r16,0(sp)
     cf4:	dec00a04 	addi	sp,sp,40
     cf8:	f800283a 	ret
     cfc:	00bffe04 	movi	r2,-8
     d00:	18a2703a 	and	r17,r3,r2
     d04:	883fed16 	blt	r17,zero,cbc <_malloc_r+0x44>
     d08:	897fec36 	bltu	r17,r5,cbc <_malloc_r+0x44>
     d0c:	9009883a 	mov	r4,r18
     d10:	000b2b80 	call	b2b8 <__malloc_lock>
     d14:	00807dc4 	movi	r2,503
     d18:	14402b2e 	bgeu	r2,r17,dc8 <_malloc_r+0x150>
     d1c:	8806d27a 	srli	r3,r17,9
     d20:	18003f1e 	bne	r3,zero,e20 <_malloc_r+0x1a8>
     d24:	880cd0fa 	srli	r6,r17,3
     d28:	300490fa 	slli	r2,r6,3
     d2c:	02c00074 	movhi	r11,1
     d30:	5af77e04 	addi	r11,r11,-8712
     d34:	12cb883a 	add	r5,r2,r11
     d38:	2c000317 	ldw	r16,12(r5)
     d3c:	580f883a 	mov	r7,r11
     d40:	2c00041e 	bne	r5,r16,d54 <_malloc_r+0xdc>
     d44:	00000a06 	br	d70 <_malloc_r+0xf8>
     d48:	1800860e 	bge	r3,zero,f64 <_malloc_r+0x2ec>
     d4c:	84000317 	ldw	r16,12(r16)
     d50:	2c000726 	beq	r5,r16,d70 <_malloc_r+0xf8>
     d54:	80800117 	ldw	r2,4(r16)
     d58:	00ffff04 	movi	r3,-4
     d5c:	10c8703a 	and	r4,r2,r3
     d60:	2447c83a 	sub	r3,r4,r17
     d64:	008003c4 	movi	r2,15
     d68:	10fff70e 	bge	r2,r3,d48 <_malloc_r+0xd0>
     d6c:	31bfffc4 	addi	r6,r6,-1
     d70:	32400044 	addi	r9,r6,1
     d74:	02800074 	movhi	r10,1
     d78:	52b78004 	addi	r10,r10,-8704
     d7c:	54000217 	ldw	r16,8(r10)
     d80:	8280a026 	beq	r16,r10,1004 <_malloc_r+0x38c>
     d84:	80800117 	ldw	r2,4(r16)
     d88:	00ffff04 	movi	r3,-4
     d8c:	10ca703a 	and	r5,r2,r3
     d90:	2c4dc83a 	sub	r6,r5,r17
     d94:	008003c4 	movi	r2,15
     d98:	11808316 	blt	r2,r6,fa8 <_malloc_r+0x330>
     d9c:	52800315 	stw	r10,12(r10)
     da0:	52800215 	stw	r10,8(r10)
     da4:	30002916 	blt	r6,zero,e4c <_malloc_r+0x1d4>
     da8:	8147883a 	add	r3,r16,r5
     dac:	18800117 	ldw	r2,4(r3)
     db0:	9009883a 	mov	r4,r18
     db4:	10800054 	ori	r2,r2,1
     db8:	18800115 	stw	r2,4(r3)
     dbc:	000b2d80 	call	b2d8 <__malloc_unlock>
     dc0:	80c00204 	addi	r3,r16,8
     dc4:	003fc006 	br	cc8 <_malloc_r+0x50>
     dc8:	02c00074 	movhi	r11,1
     dcc:	5af77e04 	addi	r11,r11,-8712
     dd0:	8ac5883a 	add	r2,r17,r11
     dd4:	14000317 	ldw	r16,12(r2)
     dd8:	580f883a 	mov	r7,r11
     ddc:	8806d0fa 	srli	r3,r17,3
     de0:	14006c26 	beq	r2,r16,f94 <_malloc_r+0x31c>
     de4:	80c00117 	ldw	r3,4(r16)
     de8:	00bfff04 	movi	r2,-4
     dec:	81800317 	ldw	r6,12(r16)
     df0:	1886703a 	and	r3,r3,r2
     df4:	80c7883a 	add	r3,r16,r3
     df8:	18800117 	ldw	r2,4(r3)
     dfc:	81400217 	ldw	r5,8(r16)
     e00:	9009883a 	mov	r4,r18
     e04:	10800054 	ori	r2,r2,1
     e08:	18800115 	stw	r2,4(r3)
     e0c:	31400215 	stw	r5,8(r6)
     e10:	29800315 	stw	r6,12(r5)
     e14:	000b2d80 	call	b2d8 <__malloc_unlock>
     e18:	80c00204 	addi	r3,r16,8
     e1c:	003faa06 	br	cc8 <_malloc_r+0x50>
     e20:	00800104 	movi	r2,4
     e24:	10c0052e 	bgeu	r2,r3,e3c <_malloc_r+0x1c4>
     e28:	00800504 	movi	r2,20
     e2c:	10c07836 	bltu	r2,r3,1010 <_malloc_r+0x398>
     e30:	198016c4 	addi	r6,r3,91
     e34:	300490fa 	slli	r2,r6,3
     e38:	003fbc06 	br	d2c <_malloc_r+0xb4>
     e3c:	8804d1ba 	srli	r2,r17,6
     e40:	11800e04 	addi	r6,r2,56
     e44:	300490fa 	slli	r2,r6,3
     e48:	003fb806 	br	d2c <_malloc_r+0xb4>
     e4c:	00807fc4 	movi	r2,511
     e50:	1140bb36 	bltu	r2,r5,1140 <_malloc_r+0x4c8>
     e54:	2806d0fa 	srli	r3,r5,3
     e58:	573ffe04 	addi	fp,r10,-8
     e5c:	00800044 	movi	r2,1
     e60:	180890fa 	slli	r4,r3,3
     e64:	1807d0ba 	srai	r3,r3,2
     e68:	e1c00117 	ldw	r7,4(fp)
     e6c:	5909883a 	add	r4,r11,r4
     e70:	21400217 	ldw	r5,8(r4)
     e74:	10c4983a 	sll	r2,r2,r3
     e78:	81000315 	stw	r4,12(r16)
     e7c:	81400215 	stw	r5,8(r16)
     e80:	388eb03a 	or	r7,r7,r2
     e84:	2c000315 	stw	r16,12(r5)
     e88:	24000215 	stw	r16,8(r4)
     e8c:	e1c00115 	stw	r7,4(fp)
     e90:	4807883a 	mov	r3,r9
     e94:	4800cd16 	blt	r9,zero,11cc <_malloc_r+0x554>
     e98:	1807d0ba 	srai	r3,r3,2
     e9c:	00800044 	movi	r2,1
     ea0:	10c8983a 	sll	r4,r2,r3
     ea4:	39004436 	bltu	r7,r4,fb8 <_malloc_r+0x340>
     ea8:	21c4703a 	and	r2,r4,r7
     eac:	10000a1e 	bne	r2,zero,ed8 <_malloc_r+0x260>
     eb0:	2109883a 	add	r4,r4,r4
     eb4:	00bfff04 	movi	r2,-4
     eb8:	4884703a 	and	r2,r9,r2
     ebc:	3906703a 	and	r3,r7,r4
     ec0:	12400104 	addi	r9,r2,4
     ec4:	1800041e 	bne	r3,zero,ed8 <_malloc_r+0x260>
     ec8:	2109883a 	add	r4,r4,r4
     ecc:	3904703a 	and	r2,r7,r4
     ed0:	4a400104 	addi	r9,r9,4
     ed4:	103ffc26 	beq	r2,zero,ec8 <_malloc_r+0x250>
     ed8:	480490fa 	slli	r2,r9,3
     edc:	4819883a 	mov	r12,r9
     ee0:	023fff04 	movi	r8,-4
     ee4:	589b883a 	add	r13,r11,r2
     ee8:	6807883a 	mov	r3,r13
     eec:	014003c4 	movi	r5,15
     ef0:	1c000317 	ldw	r16,12(r3)
     ef4:	1c00041e 	bne	r3,r16,f08 <_malloc_r+0x290>
     ef8:	0000a706 	br	1198 <_malloc_r+0x520>
     efc:	3000ab0e 	bge	r6,zero,11ac <_malloc_r+0x534>
     f00:	84000317 	ldw	r16,12(r16)
     f04:	1c00a426 	beq	r3,r16,1198 <_malloc_r+0x520>
     f08:	80800117 	ldw	r2,4(r16)
     f0c:	1204703a 	and	r2,r2,r8
     f10:	144dc83a 	sub	r6,r2,r17
     f14:	29bff90e 	bge	r5,r6,efc <_malloc_r+0x284>
     f18:	81000317 	ldw	r4,12(r16)
     f1c:	80c00217 	ldw	r3,8(r16)
     f20:	89400054 	ori	r5,r17,1
     f24:	8445883a 	add	r2,r16,r17
     f28:	20c00215 	stw	r3,8(r4)
     f2c:	19000315 	stw	r4,12(r3)
     f30:	81400115 	stw	r5,4(r16)
     f34:	1187883a 	add	r3,r2,r6
     f38:	31000054 	ori	r4,r6,1
     f3c:	50800315 	stw	r2,12(r10)
     f40:	50800215 	stw	r2,8(r10)
     f44:	19800015 	stw	r6,0(r3)
     f48:	11000115 	stw	r4,4(r2)
     f4c:	12800215 	stw	r10,8(r2)
     f50:	12800315 	stw	r10,12(r2)
     f54:	9009883a 	mov	r4,r18
     f58:	000b2d80 	call	b2d8 <__malloc_unlock>
     f5c:	80c00204 	addi	r3,r16,8
     f60:	003f5906 	br	cc8 <_malloc_r+0x50>
     f64:	8109883a 	add	r4,r16,r4
     f68:	20800117 	ldw	r2,4(r4)
     f6c:	80c00217 	ldw	r3,8(r16)
     f70:	81400317 	ldw	r5,12(r16)
     f74:	10800054 	ori	r2,r2,1
     f78:	20800115 	stw	r2,4(r4)
     f7c:	28c00215 	stw	r3,8(r5)
     f80:	19400315 	stw	r5,12(r3)
     f84:	9009883a 	mov	r4,r18
     f88:	000b2d80 	call	b2d8 <__malloc_unlock>
     f8c:	80c00204 	addi	r3,r16,8
     f90:	003f4d06 	br	cc8 <_malloc_r+0x50>
     f94:	80800204 	addi	r2,r16,8
     f98:	14000317 	ldw	r16,12(r2)
     f9c:	143f911e 	bne	r2,r16,de4 <_malloc_r+0x16c>
     fa0:	1a400084 	addi	r9,r3,2
     fa4:	003f7306 	br	d74 <_malloc_r+0xfc>
     fa8:	88c00054 	ori	r3,r17,1
     fac:	8445883a 	add	r2,r16,r17
     fb0:	80c00115 	stw	r3,4(r16)
     fb4:	003fdf06 	br	f34 <_malloc_r+0x2bc>
     fb8:	e4000217 	ldw	r16,8(fp)
     fbc:	00bfff04 	movi	r2,-4
     fc0:	80c00117 	ldw	r3,4(r16)
     fc4:	802d883a 	mov	r22,r16
     fc8:	18aa703a 	and	r21,r3,r2
     fcc:	ac401636 	bltu	r21,r17,1028 <_malloc_r+0x3b0>
     fd0:	ac49c83a 	sub	r4,r21,r17
     fd4:	008003c4 	movi	r2,15
     fd8:	1100130e 	bge	r2,r4,1028 <_malloc_r+0x3b0>
     fdc:	88800054 	ori	r2,r17,1
     fe0:	8447883a 	add	r3,r16,r17
     fe4:	80800115 	stw	r2,4(r16)
     fe8:	20800054 	ori	r2,r4,1
     fec:	18800115 	stw	r2,4(r3)
     ff0:	e0c00215 	stw	r3,8(fp)
     ff4:	9009883a 	mov	r4,r18
     ff8:	000b2d80 	call	b2d8 <__malloc_unlock>
     ffc:	80c00204 	addi	r3,r16,8
    1000:	003f3106 	br	cc8 <_malloc_r+0x50>
    1004:	39c00117 	ldw	r7,4(r7)
    1008:	573ffe04 	addi	fp,r10,-8
    100c:	003fa006 	br	e90 <_malloc_r+0x218>
    1010:	00801504 	movi	r2,84
    1014:	10c06736 	bltu	r2,r3,11b4 <_malloc_r+0x53c>
    1018:	8804d33a 	srli	r2,r17,12
    101c:	11801b84 	addi	r6,r2,110
    1020:	300490fa 	slli	r2,r6,3
    1024:	003f4106 	br	d2c <_malloc_r+0xb4>
    1028:	d0a6aa17 	ldw	r2,-25944(gp)
    102c:	d0e00317 	ldw	r3,-32756(gp)
    1030:	053fffc4 	movi	r20,-1
    1034:	10800404 	addi	r2,r2,16
    1038:	88a7883a 	add	r19,r17,r2
    103c:	1d000326 	beq	r3,r20,104c <_malloc_r+0x3d4>
    1040:	98c3ffc4 	addi	r3,r19,4095
    1044:	00bc0004 	movi	r2,-4096
    1048:	18a6703a 	and	r19,r3,r2
    104c:	9009883a 	mov	r4,r18
    1050:	980b883a 	mov	r5,r19
    1054:	00015080 	call	1508 <_sbrk_r>
    1058:	1009883a 	mov	r4,r2
    105c:	15000426 	beq	r2,r20,1070 <_malloc_r+0x3f8>
    1060:	854b883a 	add	r5,r16,r21
    1064:	1029883a 	mov	r20,r2
    1068:	11405a2e 	bgeu	r2,r5,11d4 <_malloc_r+0x55c>
    106c:	87000c26 	beq	r16,fp,10a0 <_malloc_r+0x428>
    1070:	e4000217 	ldw	r16,8(fp)
    1074:	80c00117 	ldw	r3,4(r16)
    1078:	00bfff04 	movi	r2,-4
    107c:	1884703a 	and	r2,r3,r2
    1080:	14400336 	bltu	r2,r17,1090 <_malloc_r+0x418>
    1084:	1449c83a 	sub	r4,r2,r17
    1088:	008003c4 	movi	r2,15
    108c:	113fd316 	blt	r2,r4,fdc <_malloc_r+0x364>
    1090:	9009883a 	mov	r4,r18
    1094:	000b2d80 	call	b2d8 <__malloc_unlock>
    1098:	0007883a 	mov	r3,zero
    109c:	003f0a06 	br	cc8 <_malloc_r+0x50>
    10a0:	05c00074 	movhi	r23,1
    10a4:	bdc3d804 	addi	r23,r23,3936
    10a8:	b8800017 	ldw	r2,0(r23)
    10ac:	988d883a 	add	r6,r19,r2
    10b0:	b9800015 	stw	r6,0(r23)
    10b4:	d0e00317 	ldw	r3,-32756(gp)
    10b8:	00bfffc4 	movi	r2,-1
    10bc:	18808e26 	beq	r3,r2,12f8 <_malloc_r+0x680>
    10c0:	2145c83a 	sub	r2,r4,r5
    10c4:	3085883a 	add	r2,r6,r2
    10c8:	b8800015 	stw	r2,0(r23)
    10cc:	20c001cc 	andi	r3,r4,7
    10d0:	18005f1e 	bne	r3,zero,1250 <_malloc_r+0x5d8>
    10d4:	000b883a 	mov	r5,zero
    10d8:	a4c5883a 	add	r2,r20,r19
    10dc:	1083ffcc 	andi	r2,r2,4095
    10e0:	00c40004 	movi	r3,4096
    10e4:	1887c83a 	sub	r3,r3,r2
    10e8:	28e7883a 	add	r19,r5,r3
    10ec:	9009883a 	mov	r4,r18
    10f0:	980b883a 	mov	r5,r19
    10f4:	00015080 	call	1508 <_sbrk_r>
    10f8:	1007883a 	mov	r3,r2
    10fc:	00bfffc4 	movi	r2,-1
    1100:	18807a26 	beq	r3,r2,12ec <_malloc_r+0x674>
    1104:	1d05c83a 	sub	r2,r3,r20
    1108:	9885883a 	add	r2,r19,r2
    110c:	10c00054 	ori	r3,r2,1
    1110:	b8800017 	ldw	r2,0(r23)
    1114:	a021883a 	mov	r16,r20
    1118:	a0c00115 	stw	r3,4(r20)
    111c:	9885883a 	add	r2,r19,r2
    1120:	b8800015 	stw	r2,0(r23)
    1124:	e5000215 	stw	r20,8(fp)
    1128:	b7003626 	beq	r22,fp,1204 <_malloc_r+0x58c>
    112c:	018003c4 	movi	r6,15
    1130:	35404b36 	bltu	r6,r21,1260 <_malloc_r+0x5e8>
    1134:	00800044 	movi	r2,1
    1138:	a0800115 	stw	r2,4(r20)
    113c:	003fcd06 	br	1074 <_malloc_r+0x3fc>
    1140:	2808d27a 	srli	r4,r5,9
    1144:	2000371e 	bne	r4,zero,1224 <_malloc_r+0x5ac>
    1148:	2808d0fa 	srli	r4,r5,3
    114c:	200690fa 	slli	r3,r4,3
    1150:	1ad1883a 	add	r8,r3,r11
    1154:	41800217 	ldw	r6,8(r8)
    1158:	41805b26 	beq	r8,r6,12c8 <_malloc_r+0x650>
    115c:	30800117 	ldw	r2,4(r6)
    1160:	00ffff04 	movi	r3,-4
    1164:	10c4703a 	and	r2,r2,r3
    1168:	2880022e 	bgeu	r5,r2,1174 <_malloc_r+0x4fc>
    116c:	31800217 	ldw	r6,8(r6)
    1170:	41bffa1e 	bne	r8,r6,115c <_malloc_r+0x4e4>
    1174:	32000317 	ldw	r8,12(r6)
    1178:	39c00117 	ldw	r7,4(r7)
    117c:	82000315 	stw	r8,12(r16)
    1180:	81800215 	stw	r6,8(r16)
    1184:	07000074 	movhi	fp,1
    1188:	e7377e04 	addi	fp,fp,-8712
    118c:	34000315 	stw	r16,12(r6)
    1190:	44000215 	stw	r16,8(r8)
    1194:	003f3e06 	br	e90 <_malloc_r+0x218>
    1198:	63000044 	addi	r12,r12,1
    119c:	608000cc 	andi	r2,r12,3
    11a0:	10005d26 	beq	r2,zero,1318 <_malloc_r+0x6a0>
    11a4:	18c00204 	addi	r3,r3,8
    11a8:	003f5106 	br	ef0 <_malloc_r+0x278>
    11ac:	8089883a 	add	r4,r16,r2
    11b0:	003f6d06 	br	f68 <_malloc_r+0x2f0>
    11b4:	00805504 	movi	r2,340
    11b8:	10c02036 	bltu	r2,r3,123c <_malloc_r+0x5c4>
    11bc:	8804d3fa 	srli	r2,r17,15
    11c0:	11801dc4 	addi	r6,r2,119
    11c4:	300490fa 	slli	r2,r6,3
    11c8:	003ed806 	br	d2c <_malloc_r+0xb4>
    11cc:	48c000c4 	addi	r3,r9,3
    11d0:	003f3106 	br	e98 <_malloc_r+0x220>
    11d4:	05c00074 	movhi	r23,1
    11d8:	bdc3d804 	addi	r23,r23,3936
    11dc:	b8800017 	ldw	r2,0(r23)
    11e0:	988d883a 	add	r6,r19,r2
    11e4:	b9800015 	stw	r6,0(r23)
    11e8:	293fb21e 	bne	r5,r4,10b4 <_malloc_r+0x43c>
    11ec:	2083ffcc 	andi	r2,r4,4095
    11f0:	103fb01e 	bne	r2,zero,10b4 <_malloc_r+0x43c>
    11f4:	e4000217 	ldw	r16,8(fp)
    11f8:	9d45883a 	add	r2,r19,r21
    11fc:	10800054 	ori	r2,r2,1
    1200:	80800115 	stw	r2,4(r16)
    1204:	b8c00017 	ldw	r3,0(r23)
    1208:	d0a6ab17 	ldw	r2,-25940(gp)
    120c:	10c0012e 	bgeu	r2,r3,1214 <_malloc_r+0x59c>
    1210:	d0e6ab15 	stw	r3,-25940(gp)
    1214:	d0a6ac17 	ldw	r2,-25936(gp)
    1218:	10ff962e 	bgeu	r2,r3,1074 <_malloc_r+0x3fc>
    121c:	d0e6ac15 	stw	r3,-25936(gp)
    1220:	003f9406 	br	1074 <_malloc_r+0x3fc>
    1224:	00800104 	movi	r2,4
    1228:	11001e36 	bltu	r2,r4,12a4 <_malloc_r+0x62c>
    122c:	2804d1ba 	srli	r2,r5,6
    1230:	11000e04 	addi	r4,r2,56
    1234:	200690fa 	slli	r3,r4,3
    1238:	003fc506 	br	1150 <_malloc_r+0x4d8>
    123c:	00815504 	movi	r2,1364
    1240:	10c01d2e 	bgeu	r2,r3,12b8 <_malloc_r+0x640>
    1244:	01801f84 	movi	r6,126
    1248:	0080fc04 	movi	r2,1008
    124c:	003eb706 	br	d2c <_malloc_r+0xb4>
    1250:	00800204 	movi	r2,8
    1254:	10cbc83a 	sub	r5,r2,r3
    1258:	2169883a 	add	r20,r4,r5
    125c:	003f9e06 	br	10d8 <_malloc_r+0x460>
    1260:	00bffe04 	movi	r2,-8
    1264:	a93ffd04 	addi	r4,r21,-12
    1268:	2088703a 	and	r4,r4,r2
    126c:	b10b883a 	add	r5,r22,r4
    1270:	00c00144 	movi	r3,5
    1274:	28c00215 	stw	r3,8(r5)
    1278:	28c00115 	stw	r3,4(r5)
    127c:	b0800117 	ldw	r2,4(r22)
    1280:	1080004c 	andi	r2,r2,1
    1284:	2084b03a 	or	r2,r4,r2
    1288:	b0800115 	stw	r2,4(r22)
    128c:	313fdd2e 	bgeu	r6,r4,1204 <_malloc_r+0x58c>
    1290:	b1400204 	addi	r5,r22,8
    1294:	9009883a 	mov	r4,r18
    1298:	00056640 	call	5664 <_free_r>
    129c:	e4000217 	ldw	r16,8(fp)
    12a0:	003fd806 	br	1204 <_malloc_r+0x58c>
    12a4:	00800504 	movi	r2,20
    12a8:	11001536 	bltu	r2,r4,1300 <_malloc_r+0x688>
    12ac:	210016c4 	addi	r4,r4,91
    12b0:	200690fa 	slli	r3,r4,3
    12b4:	003fa606 	br	1150 <_malloc_r+0x4d8>
    12b8:	8804d4ba 	srli	r2,r17,18
    12bc:	11801f04 	addi	r6,r2,124
    12c0:	300490fa 	slli	r2,r6,3
    12c4:	003e9906 	br	d2c <_malloc_r+0xb4>
    12c8:	2009d0ba 	srai	r4,r4,2
    12cc:	01400074 	movhi	r5,1
    12d0:	29777e04 	addi	r5,r5,-8712
    12d4:	00c00044 	movi	r3,1
    12d8:	28800117 	ldw	r2,4(r5)
    12dc:	1906983a 	sll	r3,r3,r4
    12e0:	10c4b03a 	or	r2,r2,r3
    12e4:	28800115 	stw	r2,4(r5)
    12e8:	003fa306 	br	1178 <_malloc_r+0x500>
    12ec:	0027883a 	mov	r19,zero
    12f0:	00c00044 	movi	r3,1
    12f4:	003f8606 	br	1110 <_malloc_r+0x498>
    12f8:	d1200315 	stw	r4,-32756(gp)
    12fc:	003f7306 	br	10cc <_malloc_r+0x454>
    1300:	00801504 	movi	r2,84
    1304:	11001936 	bltu	r2,r4,136c <_malloc_r+0x6f4>
    1308:	2804d33a 	srli	r2,r5,12
    130c:	11001b84 	addi	r4,r2,110
    1310:	200690fa 	slli	r3,r4,3
    1314:	003f8e06 	br	1150 <_malloc_r+0x4d8>
    1318:	480b883a 	mov	r5,r9
    131c:	6807883a 	mov	r3,r13
    1320:	288000cc 	andi	r2,r5,3
    1324:	18fffe04 	addi	r3,r3,-8
    1328:	297fffc4 	addi	r5,r5,-1
    132c:	10001526 	beq	r2,zero,1384 <_malloc_r+0x70c>
    1330:	18800217 	ldw	r2,8(r3)
    1334:	10fffa26 	beq	r2,r3,1320 <_malloc_r+0x6a8>
    1338:	2109883a 	add	r4,r4,r4
    133c:	393f1e36 	bltu	r7,r4,fb8 <_malloc_r+0x340>
    1340:	203f1d26 	beq	r4,zero,fb8 <_malloc_r+0x340>
    1344:	21c4703a 	and	r2,r4,r7
    1348:	10000226 	beq	r2,zero,1354 <_malloc_r+0x6dc>
    134c:	6013883a 	mov	r9,r12
    1350:	003ee106 	br	ed8 <_malloc_r+0x260>
    1354:	2109883a 	add	r4,r4,r4
    1358:	3904703a 	and	r2,r7,r4
    135c:	63000104 	addi	r12,r12,4
    1360:	103ffc26 	beq	r2,zero,1354 <_malloc_r+0x6dc>
    1364:	6013883a 	mov	r9,r12
    1368:	003edb06 	br	ed8 <_malloc_r+0x260>
    136c:	00805504 	movi	r2,340
    1370:	11000836 	bltu	r2,r4,1394 <_malloc_r+0x71c>
    1374:	2804d3fa 	srli	r2,r5,15
    1378:	11001dc4 	addi	r4,r2,119
    137c:	200690fa 	slli	r3,r4,3
    1380:	003f7306 	br	1150 <_malloc_r+0x4d8>
    1384:	0104303a 	nor	r2,zero,r4
    1388:	388e703a 	and	r7,r7,r2
    138c:	e1c00115 	stw	r7,4(fp)
    1390:	003fe906 	br	1338 <_malloc_r+0x6c0>
    1394:	00815504 	movi	r2,1364
    1398:	1100032e 	bgeu	r2,r4,13a8 <_malloc_r+0x730>
    139c:	01001f84 	movi	r4,126
    13a0:	00c0fc04 	movi	r3,1008
    13a4:	003f6a06 	br	1150 <_malloc_r+0x4d8>
    13a8:	2804d4ba 	srli	r2,r5,18
    13ac:	11001f04 	addi	r4,r2,124
    13b0:	200690fa 	slli	r3,r4,3
    13b4:	003f6606 	br	1150 <_malloc_r+0x4d8>

000013b8 <printf>:
    13b8:	defffb04 	addi	sp,sp,-20
    13bc:	dfc00115 	stw	ra,4(sp)
    13c0:	d9400215 	stw	r5,8(sp)
    13c4:	d9800315 	stw	r6,12(sp)
    13c8:	d9c00415 	stw	r7,16(sp)
    13cc:	00800074 	movhi	r2,1
    13d0:	10bd0504 	addi	r2,r2,-3052
    13d4:	10c00017 	ldw	r3,0(r2)
    13d8:	200b883a 	mov	r5,r4
    13dc:	d8800204 	addi	r2,sp,8
    13e0:	19000217 	ldw	r4,8(r3)
    13e4:	100d883a 	mov	r6,r2
    13e8:	d8800015 	stw	r2,0(sp)
    13ec:	00035080 	call	3508 <__vfprintf_internal>
    13f0:	dfc00117 	ldw	ra,4(sp)
    13f4:	dec00504 	addi	sp,sp,20
    13f8:	f800283a 	ret

000013fc <_printf_r>:
    13fc:	defffc04 	addi	sp,sp,-16
    1400:	dfc00115 	stw	ra,4(sp)
    1404:	d9800215 	stw	r6,8(sp)
    1408:	d9c00315 	stw	r7,12(sp)
    140c:	280d883a 	mov	r6,r5
    1410:	21400217 	ldw	r5,8(r4)
    1414:	d8c00204 	addi	r3,sp,8
    1418:	180f883a 	mov	r7,r3
    141c:	d8c00015 	stw	r3,0(sp)
    1420:	00016440 	call	1644 <___vfprintf_internal_r>
    1424:	dfc00117 	ldw	ra,4(sp)
    1428:	dec00404 	addi	sp,sp,16
    142c:	f800283a 	ret

00001430 <putchar>:
    1430:	00800074 	movhi	r2,1
    1434:	10bd0504 	addi	r2,r2,-3052
    1438:	11800017 	ldw	r6,0(r2)
    143c:	200b883a 	mov	r5,r4
    1440:	3009883a 	mov	r4,r6
    1444:	31800217 	ldw	r6,8(r6)
    1448:	00076781 	jmpi	7678 <_putc_r>

0000144c <_putchar_r>:
    144c:	21800217 	ldw	r6,8(r4)
    1450:	00076781 	jmpi	7678 <_putc_r>

00001454 <_puts_r>:
    1454:	defff604 	addi	sp,sp,-40
    1458:	dc400715 	stw	r17,28(sp)
    145c:	2023883a 	mov	r17,r4
    1460:	2809883a 	mov	r4,r5
    1464:	dfc00915 	stw	ra,36(sp)
    1468:	dcc00815 	stw	r19,32(sp)
    146c:	2827883a 	mov	r19,r5
    1470:	00015780 	call	1578 <strlen>
    1474:	89400217 	ldw	r5,8(r17)
    1478:	00c00074 	movhi	r3,1
    147c:	18f5b004 	addi	r3,r3,-10560
    1480:	01c00044 	movi	r7,1
    1484:	12000044 	addi	r8,r2,1
    1488:	d8c00515 	stw	r3,20(sp)
    148c:	d9c00615 	stw	r7,24(sp)
    1490:	d8c00304 	addi	r3,sp,12
    1494:	01c00084 	movi	r7,2
    1498:	8809883a 	mov	r4,r17
    149c:	d80d883a 	mov	r6,sp
    14a0:	d8c00015 	stw	r3,0(sp)
    14a4:	dcc00315 	stw	r19,12(sp)
    14a8:	da000215 	stw	r8,8(sp)
    14ac:	d9c00115 	stw	r7,4(sp)
    14b0:	d8800415 	stw	r2,16(sp)
    14b4:	00059780 	call	5978 <__sfvwrite_r>
    14b8:	00ffffc4 	movi	r3,-1
    14bc:	10000626 	beq	r2,zero,14d8 <_puts_r+0x84>
    14c0:	1805883a 	mov	r2,r3
    14c4:	dfc00917 	ldw	ra,36(sp)
    14c8:	dcc00817 	ldw	r19,32(sp)
    14cc:	dc400717 	ldw	r17,28(sp)
    14d0:	dec00a04 	addi	sp,sp,40
    14d4:	f800283a 	ret
    14d8:	00c00284 	movi	r3,10
    14dc:	1805883a 	mov	r2,r3
    14e0:	dfc00917 	ldw	ra,36(sp)
    14e4:	dcc00817 	ldw	r19,32(sp)
    14e8:	dc400717 	ldw	r17,28(sp)
    14ec:	dec00a04 	addi	sp,sp,40
    14f0:	f800283a 	ret

000014f4 <puts>:
    14f4:	00800074 	movhi	r2,1
    14f8:	10bd0504 	addi	r2,r2,-3052
    14fc:	200b883a 	mov	r5,r4
    1500:	11000017 	ldw	r4,0(r2)
    1504:	00014541 	jmpi	1454 <_puts_r>

00001508 <_sbrk_r>:
    1508:	defffd04 	addi	sp,sp,-12
    150c:	dc000015 	stw	r16,0(sp)
    1510:	04000074 	movhi	r16,1
    1514:	8403b204 	addi	r16,r16,3784
    1518:	dc400115 	stw	r17,4(sp)
    151c:	80000015 	stw	zero,0(r16)
    1520:	2023883a 	mov	r17,r4
    1524:	2809883a 	mov	r4,r5
    1528:	dfc00215 	stw	ra,8(sp)
    152c:	000b78c0 	call	b78c <sbrk>
    1530:	1007883a 	mov	r3,r2
    1534:	00bfffc4 	movi	r2,-1
    1538:	18800626 	beq	r3,r2,1554 <_sbrk_r+0x4c>
    153c:	1805883a 	mov	r2,r3
    1540:	dfc00217 	ldw	ra,8(sp)
    1544:	dc400117 	ldw	r17,4(sp)
    1548:	dc000017 	ldw	r16,0(sp)
    154c:	dec00304 	addi	sp,sp,12
    1550:	f800283a 	ret
    1554:	80800017 	ldw	r2,0(r16)
    1558:	103ff826 	beq	r2,zero,153c <_sbrk_r+0x34>
    155c:	88800015 	stw	r2,0(r17)
    1560:	1805883a 	mov	r2,r3
    1564:	dfc00217 	ldw	ra,8(sp)
    1568:	dc400117 	ldw	r17,4(sp)
    156c:	dc000017 	ldw	r16,0(sp)
    1570:	dec00304 	addi	sp,sp,12
    1574:	f800283a 	ret

00001578 <strlen>:
    1578:	208000cc 	andi	r2,r4,3
    157c:	2011883a 	mov	r8,r4
    1580:	1000161e 	bne	r2,zero,15dc <strlen+0x64>
    1584:	20c00017 	ldw	r3,0(r4)
    1588:	017fbff4 	movhi	r5,65279
    158c:	297fbfc4 	addi	r5,r5,-257
    1590:	01e02074 	movhi	r7,32897
    1594:	39e02004 	addi	r7,r7,-32640
    1598:	1945883a 	add	r2,r3,r5
    159c:	11c4703a 	and	r2,r2,r7
    15a0:	00c6303a 	nor	r3,zero,r3
    15a4:	1886703a 	and	r3,r3,r2
    15a8:	18000c1e 	bne	r3,zero,15dc <strlen+0x64>
    15ac:	280d883a 	mov	r6,r5
    15b0:	380b883a 	mov	r5,r7
    15b4:	21000104 	addi	r4,r4,4
    15b8:	20800017 	ldw	r2,0(r4)
    15bc:	1187883a 	add	r3,r2,r6
    15c0:	1946703a 	and	r3,r3,r5
    15c4:	0084303a 	nor	r2,zero,r2
    15c8:	10c4703a 	and	r2,r2,r3
    15cc:	103ff926 	beq	r2,zero,15b4 <strlen+0x3c>
    15d0:	20800007 	ldb	r2,0(r4)
    15d4:	10000326 	beq	r2,zero,15e4 <strlen+0x6c>
    15d8:	21000044 	addi	r4,r4,1
    15dc:	20800007 	ldb	r2,0(r4)
    15e0:	103ffd1e 	bne	r2,zero,15d8 <strlen+0x60>
    15e4:	2205c83a 	sub	r2,r4,r8
    15e8:	f800283a 	ret

000015ec <__sprint_r>:
    15ec:	30800217 	ldw	r2,8(r6)
    15f0:	defffe04 	addi	sp,sp,-8
    15f4:	dc000015 	stw	r16,0(sp)
    15f8:	dfc00115 	stw	ra,4(sp)
    15fc:	3021883a 	mov	r16,r6
    1600:	0007883a 	mov	r3,zero
    1604:	1000061e 	bne	r2,zero,1620 <__sprint_r+0x34>
    1608:	1805883a 	mov	r2,r3
    160c:	30000115 	stw	zero,4(r6)
    1610:	dfc00117 	ldw	ra,4(sp)
    1614:	dc000017 	ldw	r16,0(sp)
    1618:	dec00204 	addi	sp,sp,8
    161c:	f800283a 	ret
    1620:	00059780 	call	5978 <__sfvwrite_r>
    1624:	1007883a 	mov	r3,r2
    1628:	1805883a 	mov	r2,r3
    162c:	80000115 	stw	zero,4(r16)
    1630:	80000215 	stw	zero,8(r16)
    1634:	dfc00117 	ldw	ra,4(sp)
    1638:	dc000017 	ldw	r16,0(sp)
    163c:	dec00204 	addi	sp,sp,8
    1640:	f800283a 	ret

00001644 <___vfprintf_internal_r>:
    1644:	defea404 	addi	sp,sp,-1392
    1648:	dd815815 	stw	r22,1376(sp)
    164c:	dc015215 	stw	r16,1352(sp)
    1650:	d9c15115 	stw	r7,1348(sp)
    1654:	dfc15b15 	stw	ra,1388(sp)
    1658:	df015a15 	stw	fp,1384(sp)
    165c:	ddc15915 	stw	r23,1380(sp)
    1660:	dd415715 	stw	r21,1372(sp)
    1664:	dd015615 	stw	r20,1368(sp)
    1668:	dcc15515 	stw	r19,1364(sp)
    166c:	dc815415 	stw	r18,1360(sp)
    1670:	dc415315 	stw	r17,1356(sp)
    1674:	282d883a 	mov	r22,r5
    1678:	3021883a 	mov	r16,r6
    167c:	d9014f15 	stw	r4,1340(sp)
    1680:	0005f9c0 	call	5f9c <_localeconv_r>
    1684:	10800017 	ldw	r2,0(r2)
    1688:	d9c15117 	ldw	r7,1348(sp)
    168c:	d8814915 	stw	r2,1316(sp)
    1690:	d8814f17 	ldw	r2,1340(sp)
    1694:	10000226 	beq	r2,zero,16a0 <___vfprintf_internal_r+0x5c>
    1698:	10800e17 	ldw	r2,56(r2)
    169c:	10020d26 	beq	r2,zero,1ed4 <___vfprintf_internal_r+0x890>
    16a0:	b080030b 	ldhu	r2,12(r22)
    16a4:	1080020c 	andi	r2,r2,8
    16a8:	10020e26 	beq	r2,zero,1ee4 <___vfprintf_internal_r+0x8a0>
    16ac:	b0800417 	ldw	r2,16(r22)
    16b0:	10020c26 	beq	r2,zero,1ee4 <___vfprintf_internal_r+0x8a0>
    16b4:	b200030b 	ldhu	r8,12(r22)
    16b8:	00800284 	movi	r2,10
    16bc:	40c0068c 	andi	r3,r8,26
    16c0:	18802f1e 	bne	r3,r2,1780 <___vfprintf_internal_r+0x13c>
    16c4:	b080038f 	ldh	r2,14(r22)
    16c8:	10002d16 	blt	r2,zero,1780 <___vfprintf_internal_r+0x13c>
    16cc:	b240038b 	ldhu	r9,14(r22)
    16d0:	b2800717 	ldw	r10,28(r22)
    16d4:	b2c00917 	ldw	r11,36(r22)
    16d8:	d9014f17 	ldw	r4,1340(sp)
    16dc:	dc402904 	addi	r17,sp,164
    16e0:	d8804004 	addi	r2,sp,256
    16e4:	00c10004 	movi	r3,1024
    16e8:	423fff4c 	andi	r8,r8,65533
    16ec:	800d883a 	mov	r6,r16
    16f0:	880b883a 	mov	r5,r17
    16f4:	da002c0d 	sth	r8,176(sp)
    16f8:	da402c8d 	sth	r9,178(sp)
    16fc:	da803015 	stw	r10,192(sp)
    1700:	dac03215 	stw	r11,200(sp)
    1704:	d8802d15 	stw	r2,180(sp)
    1708:	d8c02e15 	stw	r3,184(sp)
    170c:	d8802915 	stw	r2,164(sp)
    1710:	d8c02b15 	stw	r3,172(sp)
    1714:	d8002f15 	stw	zero,188(sp)
    1718:	00016440 	call	1644 <___vfprintf_internal_r>
    171c:	d8814b15 	stw	r2,1324(sp)
    1720:	10000416 	blt	r2,zero,1734 <___vfprintf_internal_r+0xf0>
    1724:	d9014f17 	ldw	r4,1340(sp)
    1728:	880b883a 	mov	r5,r17
    172c:	00050140 	call	5014 <_fflush_r>
    1730:	1002321e 	bne	r2,zero,1ffc <___vfprintf_internal_r+0x9b8>
    1734:	d8802c0b 	ldhu	r2,176(sp)
    1738:	1080100c 	andi	r2,r2,64
    173c:	10000326 	beq	r2,zero,174c <___vfprintf_internal_r+0x108>
    1740:	b080030b 	ldhu	r2,12(r22)
    1744:	10801014 	ori	r2,r2,64
    1748:	b080030d 	sth	r2,12(r22)
    174c:	d8814b17 	ldw	r2,1324(sp)
    1750:	dfc15b17 	ldw	ra,1388(sp)
    1754:	df015a17 	ldw	fp,1384(sp)
    1758:	ddc15917 	ldw	r23,1380(sp)
    175c:	dd815817 	ldw	r22,1376(sp)
    1760:	dd415717 	ldw	r21,1372(sp)
    1764:	dd015617 	ldw	r20,1368(sp)
    1768:	dcc15517 	ldw	r19,1364(sp)
    176c:	dc815417 	ldw	r18,1360(sp)
    1770:	dc415317 	ldw	r17,1356(sp)
    1774:	dc015217 	ldw	r16,1352(sp)
    1778:	dec15c04 	addi	sp,sp,1392
    177c:	f800283a 	ret
    1780:	0005883a 	mov	r2,zero
    1784:	0007883a 	mov	r3,zero
    1788:	dd401904 	addi	r21,sp,100
    178c:	d8814215 	stw	r2,1288(sp)
    1790:	802f883a 	mov	r23,r16
    1794:	d8c14315 	stw	r3,1292(sp)
    1798:	d8014b15 	stw	zero,1324(sp)
    179c:	d8014815 	stw	zero,1312(sp)
    17a0:	d8014415 	stw	zero,1296(sp)
    17a4:	d8014715 	stw	zero,1308(sp)
    17a8:	dd400c15 	stw	r21,48(sp)
    17ac:	d8000e15 	stw	zero,56(sp)
    17b0:	d8000d15 	stw	zero,52(sp)
    17b4:	b8800007 	ldb	r2,0(r23)
    17b8:	10001926 	beq	r2,zero,1820 <___vfprintf_internal_r+0x1dc>
    17bc:	00c00944 	movi	r3,37
    17c0:	10c01726 	beq	r2,r3,1820 <___vfprintf_internal_r+0x1dc>
    17c4:	b821883a 	mov	r16,r23
    17c8:	00000106 	br	17d0 <___vfprintf_internal_r+0x18c>
    17cc:	10c00326 	beq	r2,r3,17dc <___vfprintf_internal_r+0x198>
    17d0:	84000044 	addi	r16,r16,1
    17d4:	80800007 	ldb	r2,0(r16)
    17d8:	103ffc1e 	bne	r2,zero,17cc <___vfprintf_internal_r+0x188>
    17dc:	85e7c83a 	sub	r19,r16,r23
    17e0:	98000e26 	beq	r19,zero,181c <___vfprintf_internal_r+0x1d8>
    17e4:	dc800e17 	ldw	r18,56(sp)
    17e8:	dc400d17 	ldw	r17,52(sp)
    17ec:	008001c4 	movi	r2,7
    17f0:	94e5883a 	add	r18,r18,r19
    17f4:	8c400044 	addi	r17,r17,1
    17f8:	adc00015 	stw	r23,0(r21)
    17fc:	dc800e15 	stw	r18,56(sp)
    1800:	acc00115 	stw	r19,4(r21)
    1804:	dc400d15 	stw	r17,52(sp)
    1808:	14428b16 	blt	r2,r17,2238 <___vfprintf_internal_r+0xbf4>
    180c:	ad400204 	addi	r21,r21,8
    1810:	d9014b17 	ldw	r4,1324(sp)
    1814:	24c9883a 	add	r4,r4,r19
    1818:	d9014b15 	stw	r4,1324(sp)
    181c:	802f883a 	mov	r23,r16
    1820:	b8800007 	ldb	r2,0(r23)
    1824:	10013c26 	beq	r2,zero,1d18 <___vfprintf_internal_r+0x6d4>
    1828:	bdc00044 	addi	r23,r23,1
    182c:	d8000405 	stb	zero,16(sp)
    1830:	b8c00007 	ldb	r3,0(r23)
    1834:	04ffffc4 	movi	r19,-1
    1838:	d8014c15 	stw	zero,1328(sp)
    183c:	d8014a15 	stw	zero,1320(sp)
    1840:	d8c14d15 	stw	r3,1332(sp)
    1844:	bdc00044 	addi	r23,r23,1
    1848:	d9414d17 	ldw	r5,1332(sp)
    184c:	00801604 	movi	r2,88
    1850:	28fff804 	addi	r3,r5,-32
    1854:	10c06036 	bltu	r2,r3,19d8 <___vfprintf_internal_r+0x394>
    1858:	18c5883a 	add	r2,r3,r3
    185c:	1085883a 	add	r2,r2,r2
    1860:	00c00034 	movhi	r3,0
    1864:	18c61d04 	addi	r3,r3,6260
    1868:	10c5883a 	add	r2,r2,r3
    186c:	11000017 	ldw	r4,0(r2)
    1870:	2000683a 	jmp	r4
    1874:	000027e8 	cmpgeui	zero,zero,159
    1878:	000019d8 	cmpnei	zero,zero,103
    187c:	000019d8 	cmpnei	zero,zero,103
    1880:	000027d4 	movui	zero,159
    1884:	000019d8 	cmpnei	zero,zero,103
    1888:	000019d8 	cmpnei	zero,zero,103
    188c:	000019d8 	cmpnei	zero,zero,103
    1890:	000019d8 	cmpnei	zero,zero,103
    1894:	000019d8 	cmpnei	zero,zero,103
    1898:	000019d8 	cmpnei	zero,zero,103
    189c:	000025b4 	movhi	zero,150
    18a0:	000027c4 	movi	zero,159
    18a4:	000019d8 	cmpnei	zero,zero,103
    18a8:	000025cc 	andi	zero,zero,151
    18ac:	0000286c 	andhi	zero,zero,161
    18b0:	000019d8 	cmpnei	zero,zero,103
    18b4:	00002858 	cmpnei	zero,zero,161
    18b8:	00002814 	movui	zero,160
    18bc:	00002814 	movui	zero,160
    18c0:	00002814 	movui	zero,160
    18c4:	00002814 	movui	zero,160
    18c8:	00002814 	movui	zero,160
    18cc:	00002814 	movui	zero,160
    18d0:	00002814 	movui	zero,160
    18d4:	00002814 	movui	zero,160
    18d8:	00002814 	movui	zero,160
    18dc:	000019d8 	cmpnei	zero,zero,103
    18e0:	000019d8 	cmpnei	zero,zero,103
    18e4:	000019d8 	cmpnei	zero,zero,103
    18e8:	000019d8 	cmpnei	zero,zero,103
    18ec:	000019d8 	cmpnei	zero,zero,103
    18f0:	000019d8 	cmpnei	zero,zero,103
    18f4:	000019d8 	cmpnei	zero,zero,103
    18f8:	000019d8 	cmpnei	zero,zero,103
    18fc:	000019d8 	cmpnei	zero,zero,103
    1900:	000019d8 	cmpnei	zero,zero,103
    1904:	00002030 	cmpltui	zero,zero,128
    1908:	0000269c 	xori	zero,zero,154
    190c:	000019d8 	cmpnei	zero,zero,103
    1910:	0000269c 	xori	zero,zero,154
    1914:	000019d8 	cmpnei	zero,zero,103
    1918:	000019d8 	cmpnei	zero,zero,103
    191c:	000019d8 	cmpnei	zero,zero,103
    1920:	000019d8 	cmpnei	zero,zero,103
    1924:	00002800 	call	280 <myinterrupt_handler+0x30>
    1928:	000019d8 	cmpnei	zero,zero,103
    192c:	000019d8 	cmpnei	zero,zero,103
    1930:	000020e4 	muli	zero,zero,131
    1934:	000019d8 	cmpnei	zero,zero,103
    1938:	000019d8 	cmpnei	zero,zero,103
    193c:	000019d8 	cmpnei	zero,zero,103
    1940:	000019d8 	cmpnei	zero,zero,103
    1944:	000019d8 	cmpnei	zero,zero,103
    1948:	00002130 	cmpltui	zero,zero,132
    194c:	000019d8 	cmpnei	zero,zero,103
    1950:	000019d8 	cmpnei	zero,zero,103
    1954:	00002750 	cmplti	zero,zero,157
    1958:	000019d8 	cmpnei	zero,zero,103
    195c:	000019d8 	cmpnei	zero,zero,103
    1960:	000019d8 	cmpnei	zero,zero,103
    1964:	000019d8 	cmpnei	zero,zero,103
    1968:	000019d8 	cmpnei	zero,zero,103
    196c:	000019d8 	cmpnei	zero,zero,103
    1970:	000019d8 	cmpnei	zero,zero,103
    1974:	000019d8 	cmpnei	zero,zero,103
    1978:	000019d8 	cmpnei	zero,zero,103
    197c:	000019d8 	cmpnei	zero,zero,103
    1980:	00002724 	muli	zero,zero,156
    1984:	0000203c 	xorhi	zero,zero,128
    1988:	0000269c 	xori	zero,zero,154
    198c:	0000269c 	xori	zero,zero,154
    1990:	0000269c 	xori	zero,zero,154
    1994:	00002688 	cmpgei	zero,zero,154
    1998:	0000203c 	xorhi	zero,zero,128
    199c:	000019d8 	cmpnei	zero,zero,103
    19a0:	000019d8 	cmpnei	zero,zero,103
    19a4:	00002610 	cmplti	zero,zero,152
    19a8:	000019d8 	cmpnei	zero,zero,103
    19ac:	000025e0 	cmpeqi	zero,zero,151
    19b0:	000020f0 	cmpltui	zero,zero,131
    19b4:	00002640 	call	264 <myinterrupt_handler+0x14>
    19b8:	0000262c 	andhi	zero,zero,152
    19bc:	000019d8 	cmpnei	zero,zero,103
    19c0:	000028d4 	movui	zero,163
    19c4:	000019d8 	cmpnei	zero,zero,103
    19c8:	0000213c 	xorhi	zero,zero,132
    19cc:	000019d8 	cmpnei	zero,zero,103
    19d0:	000019d8 	cmpnei	zero,zero,103
    19d4:	000027b4 	movhi	zero,158
    19d8:	d9014d17 	ldw	r4,1332(sp)
    19dc:	2000ce26 	beq	r4,zero,1d18 <___vfprintf_internal_r+0x6d4>
    19e0:	01400044 	movi	r5,1
    19e4:	d9800f04 	addi	r6,sp,60
    19e8:	d9c14015 	stw	r7,1280(sp)
    19ec:	d9414515 	stw	r5,1300(sp)
    19f0:	d9814115 	stw	r6,1284(sp)
    19f4:	280f883a 	mov	r7,r5
    19f8:	d9000f05 	stb	r4,60(sp)
    19fc:	d8000405 	stb	zero,16(sp)
    1a00:	d8014615 	stw	zero,1304(sp)
    1a04:	d8c14c17 	ldw	r3,1328(sp)
    1a08:	1880008c 	andi	r2,r3,2
    1a0c:	1005003a 	cmpeq	r2,r2,zero
    1a10:	d8815015 	stw	r2,1344(sp)
    1a14:	1000031e 	bne	r2,zero,1a24 <___vfprintf_internal_r+0x3e0>
    1a18:	d9014517 	ldw	r4,1300(sp)
    1a1c:	21000084 	addi	r4,r4,2
    1a20:	d9014515 	stw	r4,1300(sp)
    1a24:	d9414c17 	ldw	r5,1328(sp)
    1a28:	2940210c 	andi	r5,r5,132
    1a2c:	d9414e15 	stw	r5,1336(sp)
    1a30:	28002d1e 	bne	r5,zero,1ae8 <___vfprintf_internal_r+0x4a4>
    1a34:	d9814a17 	ldw	r6,1320(sp)
    1a38:	d8814517 	ldw	r2,1300(sp)
    1a3c:	30a1c83a 	sub	r16,r6,r2
    1a40:	0400290e 	bge	zero,r16,1ae8 <___vfprintf_internal_r+0x4a4>
    1a44:	00800404 	movi	r2,16
    1a48:	14045e0e 	bge	r2,r16,2bc4 <___vfprintf_internal_r+0x1580>
    1a4c:	dc800e17 	ldw	r18,56(sp)
    1a50:	dc400d17 	ldw	r17,52(sp)
    1a54:	1027883a 	mov	r19,r2
    1a58:	07000074 	movhi	fp,1
    1a5c:	e735cc84 	addi	fp,fp,-10446
    1a60:	050001c4 	movi	r20,7
    1a64:	00000306 	br	1a74 <___vfprintf_internal_r+0x430>
    1a68:	843ffc04 	addi	r16,r16,-16
    1a6c:	ad400204 	addi	r21,r21,8
    1a70:	9c00130e 	bge	r19,r16,1ac0 <___vfprintf_internal_r+0x47c>
    1a74:	94800404 	addi	r18,r18,16
    1a78:	8c400044 	addi	r17,r17,1
    1a7c:	af000015 	stw	fp,0(r21)
    1a80:	acc00115 	stw	r19,4(r21)
    1a84:	dc800e15 	stw	r18,56(sp)
    1a88:	dc400d15 	stw	r17,52(sp)
    1a8c:	a47ff60e 	bge	r20,r17,1a68 <___vfprintf_internal_r+0x424>
    1a90:	d9014f17 	ldw	r4,1340(sp)
    1a94:	b00b883a 	mov	r5,r22
    1a98:	d9800c04 	addi	r6,sp,48
    1a9c:	d9c15115 	stw	r7,1348(sp)
    1aa0:	00015ec0 	call	15ec <__sprint_r>
    1aa4:	d9c15117 	ldw	r7,1348(sp)
    1aa8:	10009e1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    1aac:	843ffc04 	addi	r16,r16,-16
    1ab0:	dc800e17 	ldw	r18,56(sp)
    1ab4:	dc400d17 	ldw	r17,52(sp)
    1ab8:	dd401904 	addi	r21,sp,100
    1abc:	9c3fed16 	blt	r19,r16,1a74 <___vfprintf_internal_r+0x430>
    1ac0:	9425883a 	add	r18,r18,r16
    1ac4:	8c400044 	addi	r17,r17,1
    1ac8:	008001c4 	movi	r2,7
    1acc:	af000015 	stw	fp,0(r21)
    1ad0:	ac000115 	stw	r16,4(r21)
    1ad4:	dc800e15 	stw	r18,56(sp)
    1ad8:	dc400d15 	stw	r17,52(sp)
    1adc:	1441f516 	blt	r2,r17,22b4 <___vfprintf_internal_r+0xc70>
    1ae0:	ad400204 	addi	r21,r21,8
    1ae4:	00000206 	br	1af0 <___vfprintf_internal_r+0x4ac>
    1ae8:	dc800e17 	ldw	r18,56(sp)
    1aec:	dc400d17 	ldw	r17,52(sp)
    1af0:	d8800407 	ldb	r2,16(sp)
    1af4:	10000b26 	beq	r2,zero,1b24 <___vfprintf_internal_r+0x4e0>
    1af8:	00800044 	movi	r2,1
    1afc:	94800044 	addi	r18,r18,1
    1b00:	8c400044 	addi	r17,r17,1
    1b04:	a8800115 	stw	r2,4(r21)
    1b08:	d8c00404 	addi	r3,sp,16
    1b0c:	008001c4 	movi	r2,7
    1b10:	a8c00015 	stw	r3,0(r21)
    1b14:	dc800e15 	stw	r18,56(sp)
    1b18:	dc400d15 	stw	r17,52(sp)
    1b1c:	1441da16 	blt	r2,r17,2288 <___vfprintf_internal_r+0xc44>
    1b20:	ad400204 	addi	r21,r21,8
    1b24:	d9015017 	ldw	r4,1344(sp)
    1b28:	20000b1e 	bne	r4,zero,1b58 <___vfprintf_internal_r+0x514>
    1b2c:	d8800444 	addi	r2,sp,17
    1b30:	94800084 	addi	r18,r18,2
    1b34:	8c400044 	addi	r17,r17,1
    1b38:	a8800015 	stw	r2,0(r21)
    1b3c:	00c00084 	movi	r3,2
    1b40:	008001c4 	movi	r2,7
    1b44:	a8c00115 	stw	r3,4(r21)
    1b48:	dc800e15 	stw	r18,56(sp)
    1b4c:	dc400d15 	stw	r17,52(sp)
    1b50:	1441c216 	blt	r2,r17,225c <___vfprintf_internal_r+0xc18>
    1b54:	ad400204 	addi	r21,r21,8
    1b58:	d9414e17 	ldw	r5,1336(sp)
    1b5c:	00802004 	movi	r2,128
    1b60:	2880b126 	beq	r5,r2,1e28 <___vfprintf_internal_r+0x7e4>
    1b64:	d8c14617 	ldw	r3,1304(sp)
    1b68:	19e1c83a 	sub	r16,r3,r7
    1b6c:	0400260e 	bge	zero,r16,1c08 <___vfprintf_internal_r+0x5c4>
    1b70:	00800404 	movi	r2,16
    1b74:	1403cf0e 	bge	r2,r16,2ab4 <___vfprintf_internal_r+0x1470>
    1b78:	1027883a 	mov	r19,r2
    1b7c:	07000074 	movhi	fp,1
    1b80:	e735c884 	addi	fp,fp,-10462
    1b84:	050001c4 	movi	r20,7
    1b88:	00000306 	br	1b98 <___vfprintf_internal_r+0x554>
    1b8c:	843ffc04 	addi	r16,r16,-16
    1b90:	ad400204 	addi	r21,r21,8
    1b94:	9c00130e 	bge	r19,r16,1be4 <___vfprintf_internal_r+0x5a0>
    1b98:	94800404 	addi	r18,r18,16
    1b9c:	8c400044 	addi	r17,r17,1
    1ba0:	af000015 	stw	fp,0(r21)
    1ba4:	acc00115 	stw	r19,4(r21)
    1ba8:	dc800e15 	stw	r18,56(sp)
    1bac:	dc400d15 	stw	r17,52(sp)
    1bb0:	a47ff60e 	bge	r20,r17,1b8c <___vfprintf_internal_r+0x548>
    1bb4:	d9014f17 	ldw	r4,1340(sp)
    1bb8:	b00b883a 	mov	r5,r22
    1bbc:	d9800c04 	addi	r6,sp,48
    1bc0:	d9c15115 	stw	r7,1348(sp)
    1bc4:	00015ec0 	call	15ec <__sprint_r>
    1bc8:	d9c15117 	ldw	r7,1348(sp)
    1bcc:	1000551e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    1bd0:	843ffc04 	addi	r16,r16,-16
    1bd4:	dc800e17 	ldw	r18,56(sp)
    1bd8:	dc400d17 	ldw	r17,52(sp)
    1bdc:	dd401904 	addi	r21,sp,100
    1be0:	9c3fed16 	blt	r19,r16,1b98 <___vfprintf_internal_r+0x554>
    1be4:	9425883a 	add	r18,r18,r16
    1be8:	8c400044 	addi	r17,r17,1
    1bec:	008001c4 	movi	r2,7
    1bf0:	af000015 	stw	fp,0(r21)
    1bf4:	ac000115 	stw	r16,4(r21)
    1bf8:	dc800e15 	stw	r18,56(sp)
    1bfc:	dc400d15 	stw	r17,52(sp)
    1c00:	14418216 	blt	r2,r17,220c <___vfprintf_internal_r+0xbc8>
    1c04:	ad400204 	addi	r21,r21,8
    1c08:	d9014c17 	ldw	r4,1328(sp)
    1c0c:	2080400c 	andi	r2,r4,256
    1c10:	10004a1e 	bne	r2,zero,1d3c <___vfprintf_internal_r+0x6f8>
    1c14:	d9414117 	ldw	r5,1284(sp)
    1c18:	91e5883a 	add	r18,r18,r7
    1c1c:	8c400044 	addi	r17,r17,1
    1c20:	008001c4 	movi	r2,7
    1c24:	a9400015 	stw	r5,0(r21)
    1c28:	a9c00115 	stw	r7,4(r21)
    1c2c:	dc800e15 	stw	r18,56(sp)
    1c30:	dc400d15 	stw	r17,52(sp)
    1c34:	14416716 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xb90>
    1c38:	a8c00204 	addi	r3,r21,8
    1c3c:	d9814c17 	ldw	r6,1328(sp)
    1c40:	3080010c 	andi	r2,r6,4
    1c44:	10002826 	beq	r2,zero,1ce8 <___vfprintf_internal_r+0x6a4>
    1c48:	d8814a17 	ldw	r2,1320(sp)
    1c4c:	d9014517 	ldw	r4,1300(sp)
    1c50:	1121c83a 	sub	r16,r2,r4
    1c54:	0400240e 	bge	zero,r16,1ce8 <___vfprintf_internal_r+0x6a4>
    1c58:	00800404 	movi	r2,16
    1c5c:	1404550e 	bge	r2,r16,2db4 <___vfprintf_internal_r+0x1770>
    1c60:	dc400d17 	ldw	r17,52(sp)
    1c64:	1027883a 	mov	r19,r2
    1c68:	07000074 	movhi	fp,1
    1c6c:	e735cc84 	addi	fp,fp,-10446
    1c70:	050001c4 	movi	r20,7
    1c74:	00000306 	br	1c84 <___vfprintf_internal_r+0x640>
    1c78:	843ffc04 	addi	r16,r16,-16
    1c7c:	18c00204 	addi	r3,r3,8
    1c80:	9c00110e 	bge	r19,r16,1cc8 <___vfprintf_internal_r+0x684>
    1c84:	94800404 	addi	r18,r18,16
    1c88:	8c400044 	addi	r17,r17,1
    1c8c:	1f000015 	stw	fp,0(r3)
    1c90:	1cc00115 	stw	r19,4(r3)
    1c94:	dc800e15 	stw	r18,56(sp)
    1c98:	dc400d15 	stw	r17,52(sp)
    1c9c:	a47ff60e 	bge	r20,r17,1c78 <___vfprintf_internal_r+0x634>
    1ca0:	d9014f17 	ldw	r4,1340(sp)
    1ca4:	b00b883a 	mov	r5,r22
    1ca8:	d9800c04 	addi	r6,sp,48
    1cac:	00015ec0 	call	15ec <__sprint_r>
    1cb0:	10001c1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    1cb4:	843ffc04 	addi	r16,r16,-16
    1cb8:	dc800e17 	ldw	r18,56(sp)
    1cbc:	dc400d17 	ldw	r17,52(sp)
    1cc0:	d8c01904 	addi	r3,sp,100
    1cc4:	9c3fef16 	blt	r19,r16,1c84 <___vfprintf_internal_r+0x640>
    1cc8:	9425883a 	add	r18,r18,r16
    1ccc:	8c400044 	addi	r17,r17,1
    1cd0:	008001c4 	movi	r2,7
    1cd4:	1f000015 	stw	fp,0(r3)
    1cd8:	1c000115 	stw	r16,4(r3)
    1cdc:	dc800e15 	stw	r18,56(sp)
    1ce0:	dc400d15 	stw	r17,52(sp)
    1ce4:	1440cb16 	blt	r2,r17,2014 <___vfprintf_internal_r+0x9d0>
    1ce8:	d8814a17 	ldw	r2,1320(sp)
    1cec:	d9414517 	ldw	r5,1300(sp)
    1cf0:	1140010e 	bge	r2,r5,1cf8 <___vfprintf_internal_r+0x6b4>
    1cf4:	2805883a 	mov	r2,r5
    1cf8:	d9814b17 	ldw	r6,1324(sp)
    1cfc:	308d883a 	add	r6,r6,r2
    1d00:	d9814b15 	stw	r6,1324(sp)
    1d04:	90013b1e 	bne	r18,zero,21f4 <___vfprintf_internal_r+0xbb0>
    1d08:	d9c14017 	ldw	r7,1280(sp)
    1d0c:	dd401904 	addi	r21,sp,100
    1d10:	d8000d15 	stw	zero,52(sp)
    1d14:	003ea706 	br	17b4 <___vfprintf_internal_r+0x170>
    1d18:	d8800e17 	ldw	r2,56(sp)
    1d1c:	1005451e 	bne	r2,zero,3234 <___vfprintf_internal_r+0x1bf0>
    1d20:	d8000d15 	stw	zero,52(sp)
    1d24:	b080030b 	ldhu	r2,12(r22)
    1d28:	1080100c 	andi	r2,r2,64
    1d2c:	103e8726 	beq	r2,zero,174c <___vfprintf_internal_r+0x108>
    1d30:	00bfffc4 	movi	r2,-1
    1d34:	d8814b15 	stw	r2,1324(sp)
    1d38:	003e8406 	br	174c <___vfprintf_internal_r+0x108>
    1d3c:	d9814d17 	ldw	r6,1332(sp)
    1d40:	00801944 	movi	r2,101
    1d44:	11806e16 	blt	r2,r6,1f00 <___vfprintf_internal_r+0x8bc>
    1d48:	d9414717 	ldw	r5,1308(sp)
    1d4c:	00c00044 	movi	r3,1
    1d50:	1943490e 	bge	r3,r5,2a78 <___vfprintf_internal_r+0x1434>
    1d54:	d8814117 	ldw	r2,1284(sp)
    1d58:	94800044 	addi	r18,r18,1
    1d5c:	8c400044 	addi	r17,r17,1
    1d60:	a8800015 	stw	r2,0(r21)
    1d64:	008001c4 	movi	r2,7
    1d68:	a8c00115 	stw	r3,4(r21)
    1d6c:	dc800e15 	stw	r18,56(sp)
    1d70:	dc400d15 	stw	r17,52(sp)
    1d74:	1441ca16 	blt	r2,r17,24a0 <___vfprintf_internal_r+0xe5c>
    1d78:	a8c00204 	addi	r3,r21,8
    1d7c:	d9014917 	ldw	r4,1316(sp)
    1d80:	00800044 	movi	r2,1
    1d84:	94800044 	addi	r18,r18,1
    1d88:	8c400044 	addi	r17,r17,1
    1d8c:	18800115 	stw	r2,4(r3)
    1d90:	008001c4 	movi	r2,7
    1d94:	19000015 	stw	r4,0(r3)
    1d98:	dc800e15 	stw	r18,56(sp)
    1d9c:	dc400d15 	stw	r17,52(sp)
    1da0:	1441b616 	blt	r2,r17,247c <___vfprintf_internal_r+0xe38>
    1da4:	1cc00204 	addi	r19,r3,8
    1da8:	d9014217 	ldw	r4,1288(sp)
    1dac:	d9414317 	ldw	r5,1292(sp)
    1db0:	000d883a 	mov	r6,zero
    1db4:	000f883a 	mov	r7,zero
    1db8:	0009e340 	call	9e34 <__nedf2>
    1dbc:	10017426 	beq	r2,zero,2390 <___vfprintf_internal_r+0xd4c>
    1dc0:	d9414717 	ldw	r5,1308(sp)
    1dc4:	d9814117 	ldw	r6,1284(sp)
    1dc8:	8c400044 	addi	r17,r17,1
    1dcc:	2c85883a 	add	r2,r5,r18
    1dd0:	14bfffc4 	addi	r18,r2,-1
    1dd4:	28bfffc4 	addi	r2,r5,-1
    1dd8:	30c00044 	addi	r3,r6,1
    1ddc:	98800115 	stw	r2,4(r19)
    1de0:	008001c4 	movi	r2,7
    1de4:	98c00015 	stw	r3,0(r19)
    1de8:	dc800e15 	stw	r18,56(sp)
    1dec:	dc400d15 	stw	r17,52(sp)
    1df0:	14418e16 	blt	r2,r17,242c <___vfprintf_internal_r+0xde8>
    1df4:	9cc00204 	addi	r19,r19,8
    1df8:	d9414817 	ldw	r5,1312(sp)
    1dfc:	d8800804 	addi	r2,sp,32
    1e00:	8c400044 	addi	r17,r17,1
    1e04:	9165883a 	add	r18,r18,r5
    1e08:	98800015 	stw	r2,0(r19)
    1e0c:	008001c4 	movi	r2,7
    1e10:	99400115 	stw	r5,4(r19)
    1e14:	dc800e15 	stw	r18,56(sp)
    1e18:	dc400d15 	stw	r17,52(sp)
    1e1c:	1440ed16 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xb90>
    1e20:	98c00204 	addi	r3,r19,8
    1e24:	003f8506 	br	1c3c <___vfprintf_internal_r+0x5f8>
    1e28:	d9814a17 	ldw	r6,1320(sp)
    1e2c:	d8814517 	ldw	r2,1300(sp)
    1e30:	30a1c83a 	sub	r16,r6,r2
    1e34:	043f4b0e 	bge	zero,r16,1b64 <___vfprintf_internal_r+0x520>
    1e38:	00800404 	movi	r2,16
    1e3c:	14043a0e 	bge	r2,r16,2f28 <___vfprintf_internal_r+0x18e4>
    1e40:	1027883a 	mov	r19,r2
    1e44:	07000074 	movhi	fp,1
    1e48:	e735c884 	addi	fp,fp,-10462
    1e4c:	050001c4 	movi	r20,7
    1e50:	00000306 	br	1e60 <___vfprintf_internal_r+0x81c>
    1e54:	843ffc04 	addi	r16,r16,-16
    1e58:	ad400204 	addi	r21,r21,8
    1e5c:	9c00130e 	bge	r19,r16,1eac <___vfprintf_internal_r+0x868>
    1e60:	94800404 	addi	r18,r18,16
    1e64:	8c400044 	addi	r17,r17,1
    1e68:	af000015 	stw	fp,0(r21)
    1e6c:	acc00115 	stw	r19,4(r21)
    1e70:	dc800e15 	stw	r18,56(sp)
    1e74:	dc400d15 	stw	r17,52(sp)
    1e78:	a47ff60e 	bge	r20,r17,1e54 <___vfprintf_internal_r+0x810>
    1e7c:	d9014f17 	ldw	r4,1340(sp)
    1e80:	b00b883a 	mov	r5,r22
    1e84:	d9800c04 	addi	r6,sp,48
    1e88:	d9c15115 	stw	r7,1348(sp)
    1e8c:	00015ec0 	call	15ec <__sprint_r>
    1e90:	d9c15117 	ldw	r7,1348(sp)
    1e94:	103fa31e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    1e98:	843ffc04 	addi	r16,r16,-16
    1e9c:	dc800e17 	ldw	r18,56(sp)
    1ea0:	dc400d17 	ldw	r17,52(sp)
    1ea4:	dd401904 	addi	r21,sp,100
    1ea8:	9c3fed16 	blt	r19,r16,1e60 <___vfprintf_internal_r+0x81c>
    1eac:	9425883a 	add	r18,r18,r16
    1eb0:	8c400044 	addi	r17,r17,1
    1eb4:	008001c4 	movi	r2,7
    1eb8:	af000015 	stw	fp,0(r21)
    1ebc:	ac000115 	stw	r16,4(r21)
    1ec0:	dc800e15 	stw	r18,56(sp)
    1ec4:	dc400d15 	stw	r17,52(sp)
    1ec8:	14416116 	blt	r2,r17,2450 <___vfprintf_internal_r+0xe0c>
    1ecc:	ad400204 	addi	r21,r21,8
    1ed0:	003f2406 	br	1b64 <___vfprintf_internal_r+0x520>
    1ed4:	d9014f17 	ldw	r4,1340(sp)
    1ed8:	00052ac0 	call	52ac <__sinit>
    1edc:	d9c15117 	ldw	r7,1348(sp)
    1ee0:	003def06 	br	16a0 <___vfprintf_internal_r+0x5c>
    1ee4:	d9014f17 	ldw	r4,1340(sp)
    1ee8:	b00b883a 	mov	r5,r22
    1eec:	d9c15115 	stw	r7,1348(sp)
    1ef0:	000352c0 	call	352c <__swsetup_r>
    1ef4:	d9c15117 	ldw	r7,1348(sp)
    1ef8:	103dee26 	beq	r2,zero,16b4 <___vfprintf_internal_r+0x70>
    1efc:	003f8c06 	br	1d30 <___vfprintf_internal_r+0x6ec>
    1f00:	d9014217 	ldw	r4,1288(sp)
    1f04:	d9414317 	ldw	r5,1292(sp)
    1f08:	000d883a 	mov	r6,zero
    1f0c:	000f883a 	mov	r7,zero
    1f10:	0009dac0 	call	9dac <__eqdf2>
    1f14:	1000f21e 	bne	r2,zero,22e0 <___vfprintf_internal_r+0xc9c>
    1f18:	00800074 	movhi	r2,1
    1f1c:	10b5c804 	addi	r2,r2,-10464
    1f20:	94800044 	addi	r18,r18,1
    1f24:	8c400044 	addi	r17,r17,1
    1f28:	a8800015 	stw	r2,0(r21)
    1f2c:	00c00044 	movi	r3,1
    1f30:	008001c4 	movi	r2,7
    1f34:	a8c00115 	stw	r3,4(r21)
    1f38:	dc800e15 	stw	r18,56(sp)
    1f3c:	dc400d15 	stw	r17,52(sp)
    1f40:	14430016 	blt	r2,r17,2b44 <___vfprintf_internal_r+0x1500>
    1f44:	a8c00204 	addi	r3,r21,8
    1f48:	d8800517 	ldw	r2,20(sp)
    1f4c:	d9014717 	ldw	r4,1308(sp)
    1f50:	11015c0e 	bge	r2,r4,24c4 <___vfprintf_internal_r+0xe80>
    1f54:	dc400d17 	ldw	r17,52(sp)
    1f58:	d9814917 	ldw	r6,1316(sp)
    1f5c:	00800044 	movi	r2,1
    1f60:	94800044 	addi	r18,r18,1
    1f64:	8c400044 	addi	r17,r17,1
    1f68:	18800115 	stw	r2,4(r3)
    1f6c:	008001c4 	movi	r2,7
    1f70:	19800015 	stw	r6,0(r3)
    1f74:	dc800e15 	stw	r18,56(sp)
    1f78:	dc400d15 	stw	r17,52(sp)
    1f7c:	14431616 	blt	r2,r17,2bd8 <___vfprintf_internal_r+0x1594>
    1f80:	18c00204 	addi	r3,r3,8
    1f84:	d8814717 	ldw	r2,1308(sp)
    1f88:	143fffc4 	addi	r16,r2,-1
    1f8c:	043f2b0e 	bge	zero,r16,1c3c <___vfprintf_internal_r+0x5f8>
    1f90:	00800404 	movi	r2,16
    1f94:	1402a80e 	bge	r2,r16,2a38 <___vfprintf_internal_r+0x13f4>
    1f98:	dc400d17 	ldw	r17,52(sp)
    1f9c:	1027883a 	mov	r19,r2
    1fa0:	07000074 	movhi	fp,1
    1fa4:	e735c884 	addi	fp,fp,-10462
    1fa8:	050001c4 	movi	r20,7
    1fac:	00000306 	br	1fbc <___vfprintf_internal_r+0x978>
    1fb0:	18c00204 	addi	r3,r3,8
    1fb4:	843ffc04 	addi	r16,r16,-16
    1fb8:	9c02a20e 	bge	r19,r16,2a44 <___vfprintf_internal_r+0x1400>
    1fbc:	94800404 	addi	r18,r18,16
    1fc0:	8c400044 	addi	r17,r17,1
    1fc4:	1f000015 	stw	fp,0(r3)
    1fc8:	1cc00115 	stw	r19,4(r3)
    1fcc:	dc800e15 	stw	r18,56(sp)
    1fd0:	dc400d15 	stw	r17,52(sp)
    1fd4:	a47ff60e 	bge	r20,r17,1fb0 <___vfprintf_internal_r+0x96c>
    1fd8:	d9014f17 	ldw	r4,1340(sp)
    1fdc:	b00b883a 	mov	r5,r22
    1fe0:	d9800c04 	addi	r6,sp,48
    1fe4:	00015ec0 	call	15ec <__sprint_r>
    1fe8:	103f4e1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    1fec:	dc800e17 	ldw	r18,56(sp)
    1ff0:	dc400d17 	ldw	r17,52(sp)
    1ff4:	d8c01904 	addi	r3,sp,100
    1ff8:	003fee06 	br	1fb4 <___vfprintf_internal_r+0x970>
    1ffc:	d8802c0b 	ldhu	r2,176(sp)
    2000:	00ffffc4 	movi	r3,-1
    2004:	d8c14b15 	stw	r3,1324(sp)
    2008:	1080100c 	andi	r2,r2,64
    200c:	103dcc1e 	bne	r2,zero,1740 <___vfprintf_internal_r+0xfc>
    2010:	003dce06 	br	174c <___vfprintf_internal_r+0x108>
    2014:	d9014f17 	ldw	r4,1340(sp)
    2018:	b00b883a 	mov	r5,r22
    201c:	d9800c04 	addi	r6,sp,48
    2020:	00015ec0 	call	15ec <__sprint_r>
    2024:	103f3f1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2028:	dc800e17 	ldw	r18,56(sp)
    202c:	003f2e06 	br	1ce8 <___vfprintf_internal_r+0x6a4>
    2030:	d9414c17 	ldw	r5,1328(sp)
    2034:	29400414 	ori	r5,r5,16
    2038:	d9414c15 	stw	r5,1328(sp)
    203c:	d9814c17 	ldw	r6,1328(sp)
    2040:	3080080c 	andi	r2,r6,32
    2044:	10014f1e 	bne	r2,zero,2584 <___vfprintf_internal_r+0xf40>
    2048:	d8c14c17 	ldw	r3,1328(sp)
    204c:	1880040c 	andi	r2,r3,16
    2050:	1002f01e 	bne	r2,zero,2c14 <___vfprintf_internal_r+0x15d0>
    2054:	d9014c17 	ldw	r4,1328(sp)
    2058:	2080100c 	andi	r2,r4,64
    205c:	1002ed26 	beq	r2,zero,2c14 <___vfprintf_internal_r+0x15d0>
    2060:	3880000f 	ldh	r2,0(r7)
    2064:	39c00104 	addi	r7,r7,4
    2068:	d9c14015 	stw	r7,1280(sp)
    206c:	1023d7fa 	srai	r17,r2,31
    2070:	1021883a 	mov	r16,r2
    2074:	88037816 	blt	r17,zero,2e58 <___vfprintf_internal_r+0x1814>
    2078:	01000044 	movi	r4,1
    207c:	98000416 	blt	r19,zero,2090 <___vfprintf_internal_r+0xa4c>
    2080:	d8c14c17 	ldw	r3,1328(sp)
    2084:	00bfdfc4 	movi	r2,-129
    2088:	1886703a 	and	r3,r3,r2
    208c:	d8c14c15 	stw	r3,1328(sp)
    2090:	8444b03a 	or	r2,r16,r17
    2094:	10022c1e 	bne	r2,zero,2948 <___vfprintf_internal_r+0x1304>
    2098:	98022b1e 	bne	r19,zero,2948 <___vfprintf_internal_r+0x1304>
    209c:	20803fcc 	andi	r2,r4,255
    20a0:	1002a126 	beq	r2,zero,2b28 <___vfprintf_internal_r+0x14e4>
    20a4:	d8c01904 	addi	r3,sp,100
    20a8:	dd000f04 	addi	r20,sp,60
    20ac:	d8c14115 	stw	r3,1284(sp)
    20b0:	d8c14117 	ldw	r3,1284(sp)
    20b4:	dcc14515 	stw	r19,1300(sp)
    20b8:	a0c5c83a 	sub	r2,r20,r3
    20bc:	11c00a04 	addi	r7,r2,40
    20c0:	99c0010e 	bge	r19,r7,20c8 <___vfprintf_internal_r+0xa84>
    20c4:	d9c14515 	stw	r7,1300(sp)
    20c8:	dcc14615 	stw	r19,1304(sp)
    20cc:	d8800407 	ldb	r2,16(sp)
    20d0:	103e4c26 	beq	r2,zero,1a04 <___vfprintf_internal_r+0x3c0>
    20d4:	d8814517 	ldw	r2,1300(sp)
    20d8:	10800044 	addi	r2,r2,1
    20dc:	d8814515 	stw	r2,1300(sp)
    20e0:	003e4806 	br	1a04 <___vfprintf_internal_r+0x3c0>
    20e4:	d9814c17 	ldw	r6,1328(sp)
    20e8:	31800414 	ori	r6,r6,16
    20ec:	d9814c15 	stw	r6,1328(sp)
    20f0:	d8c14c17 	ldw	r3,1328(sp)
    20f4:	1880080c 	andi	r2,r3,32
    20f8:	1001271e 	bne	r2,zero,2598 <___vfprintf_internal_r+0xf54>
    20fc:	d9414c17 	ldw	r5,1328(sp)
    2100:	2880040c 	andi	r2,r5,16
    2104:	1002bc1e 	bne	r2,zero,2bf8 <___vfprintf_internal_r+0x15b4>
    2108:	d9814c17 	ldw	r6,1328(sp)
    210c:	3080100c 	andi	r2,r6,64
    2110:	1002b926 	beq	r2,zero,2bf8 <___vfprintf_internal_r+0x15b4>
    2114:	3c00000b 	ldhu	r16,0(r7)
    2118:	0009883a 	mov	r4,zero
    211c:	39c00104 	addi	r7,r7,4
    2120:	0023883a 	mov	r17,zero
    2124:	d9c14015 	stw	r7,1280(sp)
    2128:	d8000405 	stb	zero,16(sp)
    212c:	003fd306 	br	207c <___vfprintf_internal_r+0xa38>
    2130:	d9014c17 	ldw	r4,1328(sp)
    2134:	21000414 	ori	r4,r4,16
    2138:	d9014c15 	stw	r4,1328(sp)
    213c:	d9414c17 	ldw	r5,1328(sp)
    2140:	2880080c 	andi	r2,r5,32
    2144:	1001081e 	bne	r2,zero,2568 <___vfprintf_internal_r+0xf24>
    2148:	d8c14c17 	ldw	r3,1328(sp)
    214c:	1880040c 	andi	r2,r3,16
    2150:	1002b61e 	bne	r2,zero,2c2c <___vfprintf_internal_r+0x15e8>
    2154:	d9014c17 	ldw	r4,1328(sp)
    2158:	2080100c 	andi	r2,r4,64
    215c:	1002b326 	beq	r2,zero,2c2c <___vfprintf_internal_r+0x15e8>
    2160:	3c00000b 	ldhu	r16,0(r7)
    2164:	01000044 	movi	r4,1
    2168:	39c00104 	addi	r7,r7,4
    216c:	0023883a 	mov	r17,zero
    2170:	d9c14015 	stw	r7,1280(sp)
    2174:	d8000405 	stb	zero,16(sp)
    2178:	003fc006 	br	207c <___vfprintf_internal_r+0xa38>
    217c:	d9014f17 	ldw	r4,1340(sp)
    2180:	b00b883a 	mov	r5,r22
    2184:	d9800c04 	addi	r6,sp,48
    2188:	00015ec0 	call	15ec <__sprint_r>
    218c:	103ee51e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2190:	dc800e17 	ldw	r18,56(sp)
    2194:	d8c01904 	addi	r3,sp,100
    2198:	d9814c17 	ldw	r6,1328(sp)
    219c:	3080004c 	andi	r2,r6,1
    21a0:	1005003a 	cmpeq	r2,r2,zero
    21a4:	103ea51e 	bne	r2,zero,1c3c <___vfprintf_internal_r+0x5f8>
    21a8:	00800044 	movi	r2,1
    21ac:	dc400d17 	ldw	r17,52(sp)
    21b0:	18800115 	stw	r2,4(r3)
    21b4:	d8814917 	ldw	r2,1316(sp)
    21b8:	94800044 	addi	r18,r18,1
    21bc:	8c400044 	addi	r17,r17,1
    21c0:	18800015 	stw	r2,0(r3)
    21c4:	008001c4 	movi	r2,7
    21c8:	dc800e15 	stw	r18,56(sp)
    21cc:	dc400d15 	stw	r17,52(sp)
    21d0:	1442240e 	bge	r2,r17,2a64 <___vfprintf_internal_r+0x1420>
    21d4:	d9014f17 	ldw	r4,1340(sp)
    21d8:	b00b883a 	mov	r5,r22
    21dc:	d9800c04 	addi	r6,sp,48
    21e0:	00015ec0 	call	15ec <__sprint_r>
    21e4:	103ecf1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    21e8:	dc800e17 	ldw	r18,56(sp)
    21ec:	d8c01904 	addi	r3,sp,100
    21f0:	003e9206 	br	1c3c <___vfprintf_internal_r+0x5f8>
    21f4:	d9014f17 	ldw	r4,1340(sp)
    21f8:	b00b883a 	mov	r5,r22
    21fc:	d9800c04 	addi	r6,sp,48
    2200:	00015ec0 	call	15ec <__sprint_r>
    2204:	103ec026 	beq	r2,zero,1d08 <___vfprintf_internal_r+0x6c4>
    2208:	003ec606 	br	1d24 <___vfprintf_internal_r+0x6e0>
    220c:	d9014f17 	ldw	r4,1340(sp)
    2210:	b00b883a 	mov	r5,r22
    2214:	d9800c04 	addi	r6,sp,48
    2218:	d9c15115 	stw	r7,1348(sp)
    221c:	00015ec0 	call	15ec <__sprint_r>
    2220:	d9c15117 	ldw	r7,1348(sp)
    2224:	103ebf1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2228:	dc800e17 	ldw	r18,56(sp)
    222c:	dc400d17 	ldw	r17,52(sp)
    2230:	dd401904 	addi	r21,sp,100
    2234:	003e7406 	br	1c08 <___vfprintf_internal_r+0x5c4>
    2238:	d9014f17 	ldw	r4,1340(sp)
    223c:	b00b883a 	mov	r5,r22
    2240:	d9800c04 	addi	r6,sp,48
    2244:	d9c15115 	stw	r7,1348(sp)
    2248:	00015ec0 	call	15ec <__sprint_r>
    224c:	d9c15117 	ldw	r7,1348(sp)
    2250:	103eb41e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2254:	dd401904 	addi	r21,sp,100
    2258:	003d6d06 	br	1810 <___vfprintf_internal_r+0x1cc>
    225c:	d9014f17 	ldw	r4,1340(sp)
    2260:	b00b883a 	mov	r5,r22
    2264:	d9800c04 	addi	r6,sp,48
    2268:	d9c15115 	stw	r7,1348(sp)
    226c:	00015ec0 	call	15ec <__sprint_r>
    2270:	d9c15117 	ldw	r7,1348(sp)
    2274:	103eab1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2278:	dc800e17 	ldw	r18,56(sp)
    227c:	dc400d17 	ldw	r17,52(sp)
    2280:	dd401904 	addi	r21,sp,100
    2284:	003e3406 	br	1b58 <___vfprintf_internal_r+0x514>
    2288:	d9014f17 	ldw	r4,1340(sp)
    228c:	b00b883a 	mov	r5,r22
    2290:	d9800c04 	addi	r6,sp,48
    2294:	d9c15115 	stw	r7,1348(sp)
    2298:	00015ec0 	call	15ec <__sprint_r>
    229c:	d9c15117 	ldw	r7,1348(sp)
    22a0:	103ea01e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    22a4:	dc800e17 	ldw	r18,56(sp)
    22a8:	dc400d17 	ldw	r17,52(sp)
    22ac:	dd401904 	addi	r21,sp,100
    22b0:	003e1c06 	br	1b24 <___vfprintf_internal_r+0x4e0>
    22b4:	d9014f17 	ldw	r4,1340(sp)
    22b8:	b00b883a 	mov	r5,r22
    22bc:	d9800c04 	addi	r6,sp,48
    22c0:	d9c15115 	stw	r7,1348(sp)
    22c4:	00015ec0 	call	15ec <__sprint_r>
    22c8:	d9c15117 	ldw	r7,1348(sp)
    22cc:	103e951e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    22d0:	dc800e17 	ldw	r18,56(sp)
    22d4:	dc400d17 	ldw	r17,52(sp)
    22d8:	dd401904 	addi	r21,sp,100
    22dc:	003e0406 	br	1af0 <___vfprintf_internal_r+0x4ac>
    22e0:	d9000517 	ldw	r4,20(sp)
    22e4:	0102580e 	bge	zero,r4,2c48 <___vfprintf_internal_r+0x1604>
    22e8:	d9814717 	ldw	r6,1308(sp)
    22ec:	21807a16 	blt	r4,r6,24d8 <___vfprintf_internal_r+0xe94>
    22f0:	d8814117 	ldw	r2,1284(sp)
    22f4:	91a5883a 	add	r18,r18,r6
    22f8:	8c400044 	addi	r17,r17,1
    22fc:	a8800015 	stw	r2,0(r21)
    2300:	008001c4 	movi	r2,7
    2304:	a9800115 	stw	r6,4(r21)
    2308:	dc800e15 	stw	r18,56(sp)
    230c:	dc400d15 	stw	r17,52(sp)
    2310:	1442fc16 	blt	r2,r17,2f04 <___vfprintf_internal_r+0x18c0>
    2314:	a8c00204 	addi	r3,r21,8
    2318:	d9414717 	ldw	r5,1308(sp)
    231c:	2161c83a 	sub	r16,r4,r5
    2320:	043f9d0e 	bge	zero,r16,2198 <___vfprintf_internal_r+0xb54>
    2324:	00800404 	movi	r2,16
    2328:	1402190e 	bge	r2,r16,2b90 <___vfprintf_internal_r+0x154c>
    232c:	dc400d17 	ldw	r17,52(sp)
    2330:	1027883a 	mov	r19,r2
    2334:	07000074 	movhi	fp,1
    2338:	e735c884 	addi	fp,fp,-10462
    233c:	050001c4 	movi	r20,7
    2340:	00000306 	br	2350 <___vfprintf_internal_r+0xd0c>
    2344:	18c00204 	addi	r3,r3,8
    2348:	843ffc04 	addi	r16,r16,-16
    234c:	9c02130e 	bge	r19,r16,2b9c <___vfprintf_internal_r+0x1558>
    2350:	94800404 	addi	r18,r18,16
    2354:	8c400044 	addi	r17,r17,1
    2358:	1f000015 	stw	fp,0(r3)
    235c:	1cc00115 	stw	r19,4(r3)
    2360:	dc800e15 	stw	r18,56(sp)
    2364:	dc400d15 	stw	r17,52(sp)
    2368:	a47ff60e 	bge	r20,r17,2344 <___vfprintf_internal_r+0xd00>
    236c:	d9014f17 	ldw	r4,1340(sp)
    2370:	b00b883a 	mov	r5,r22
    2374:	d9800c04 	addi	r6,sp,48
    2378:	00015ec0 	call	15ec <__sprint_r>
    237c:	103e691e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2380:	dc800e17 	ldw	r18,56(sp)
    2384:	dc400d17 	ldw	r17,52(sp)
    2388:	d8c01904 	addi	r3,sp,100
    238c:	003fee06 	br	2348 <___vfprintf_internal_r+0xd04>
    2390:	d8814717 	ldw	r2,1308(sp)
    2394:	143fffc4 	addi	r16,r2,-1
    2398:	043e970e 	bge	zero,r16,1df8 <___vfprintf_internal_r+0x7b4>
    239c:	00800404 	movi	r2,16
    23a0:	1400180e 	bge	r2,r16,2404 <___vfprintf_internal_r+0xdc0>
    23a4:	1029883a 	mov	r20,r2
    23a8:	07000074 	movhi	fp,1
    23ac:	e735c884 	addi	fp,fp,-10462
    23b0:	054001c4 	movi	r21,7
    23b4:	00000306 	br	23c4 <___vfprintf_internal_r+0xd80>
    23b8:	9cc00204 	addi	r19,r19,8
    23bc:	843ffc04 	addi	r16,r16,-16
    23c0:	a400120e 	bge	r20,r16,240c <___vfprintf_internal_r+0xdc8>
    23c4:	94800404 	addi	r18,r18,16
    23c8:	8c400044 	addi	r17,r17,1
    23cc:	9f000015 	stw	fp,0(r19)
    23d0:	9d000115 	stw	r20,4(r19)
    23d4:	dc800e15 	stw	r18,56(sp)
    23d8:	dc400d15 	stw	r17,52(sp)
    23dc:	ac7ff60e 	bge	r21,r17,23b8 <___vfprintf_internal_r+0xd74>
    23e0:	d9014f17 	ldw	r4,1340(sp)
    23e4:	b00b883a 	mov	r5,r22
    23e8:	d9800c04 	addi	r6,sp,48
    23ec:	00015ec0 	call	15ec <__sprint_r>
    23f0:	103e4c1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    23f4:	dc800e17 	ldw	r18,56(sp)
    23f8:	dc400d17 	ldw	r17,52(sp)
    23fc:	dcc01904 	addi	r19,sp,100
    2400:	003fee06 	br	23bc <___vfprintf_internal_r+0xd78>
    2404:	07000074 	movhi	fp,1
    2408:	e735c884 	addi	fp,fp,-10462
    240c:	9425883a 	add	r18,r18,r16
    2410:	8c400044 	addi	r17,r17,1
    2414:	008001c4 	movi	r2,7
    2418:	9f000015 	stw	fp,0(r19)
    241c:	9c000115 	stw	r16,4(r19)
    2420:	dc800e15 	stw	r18,56(sp)
    2424:	dc400d15 	stw	r17,52(sp)
    2428:	147e720e 	bge	r2,r17,1df4 <___vfprintf_internal_r+0x7b0>
    242c:	d9014f17 	ldw	r4,1340(sp)
    2430:	b00b883a 	mov	r5,r22
    2434:	d9800c04 	addi	r6,sp,48
    2438:	00015ec0 	call	15ec <__sprint_r>
    243c:	103e391e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2440:	dc800e17 	ldw	r18,56(sp)
    2444:	dc400d17 	ldw	r17,52(sp)
    2448:	dcc01904 	addi	r19,sp,100
    244c:	003e6a06 	br	1df8 <___vfprintf_internal_r+0x7b4>
    2450:	d9014f17 	ldw	r4,1340(sp)
    2454:	b00b883a 	mov	r5,r22
    2458:	d9800c04 	addi	r6,sp,48
    245c:	d9c15115 	stw	r7,1348(sp)
    2460:	00015ec0 	call	15ec <__sprint_r>
    2464:	d9c15117 	ldw	r7,1348(sp)
    2468:	103e2e1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    246c:	dc800e17 	ldw	r18,56(sp)
    2470:	dc400d17 	ldw	r17,52(sp)
    2474:	dd401904 	addi	r21,sp,100
    2478:	003dba06 	br	1b64 <___vfprintf_internal_r+0x520>
    247c:	d9014f17 	ldw	r4,1340(sp)
    2480:	b00b883a 	mov	r5,r22
    2484:	d9800c04 	addi	r6,sp,48
    2488:	00015ec0 	call	15ec <__sprint_r>
    248c:	103e251e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2490:	dc800e17 	ldw	r18,56(sp)
    2494:	dc400d17 	ldw	r17,52(sp)
    2498:	dcc01904 	addi	r19,sp,100
    249c:	003e4206 	br	1da8 <___vfprintf_internal_r+0x764>
    24a0:	d9014f17 	ldw	r4,1340(sp)
    24a4:	b00b883a 	mov	r5,r22
    24a8:	d9800c04 	addi	r6,sp,48
    24ac:	00015ec0 	call	15ec <__sprint_r>
    24b0:	103e1c1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    24b4:	dc800e17 	ldw	r18,56(sp)
    24b8:	dc400d17 	ldw	r17,52(sp)
    24bc:	d8c01904 	addi	r3,sp,100
    24c0:	003e2e06 	br	1d7c <___vfprintf_internal_r+0x738>
    24c4:	d9414c17 	ldw	r5,1328(sp)
    24c8:	2880004c 	andi	r2,r5,1
    24cc:	1005003a 	cmpeq	r2,r2,zero
    24d0:	103dda1e 	bne	r2,zero,1c3c <___vfprintf_internal_r+0x5f8>
    24d4:	003e9f06 	br	1f54 <___vfprintf_internal_r+0x910>
    24d8:	d8c14117 	ldw	r3,1284(sp)
    24dc:	9125883a 	add	r18,r18,r4
    24e0:	8c400044 	addi	r17,r17,1
    24e4:	008001c4 	movi	r2,7
    24e8:	a8c00015 	stw	r3,0(r21)
    24ec:	a9000115 	stw	r4,4(r21)
    24f0:	dc800e15 	stw	r18,56(sp)
    24f4:	dc400d15 	stw	r17,52(sp)
    24f8:	14426c16 	blt	r2,r17,2eac <___vfprintf_internal_r+0x1868>
    24fc:	a8c00204 	addi	r3,r21,8
    2500:	d9414917 	ldw	r5,1316(sp)
    2504:	00800044 	movi	r2,1
    2508:	94800044 	addi	r18,r18,1
    250c:	8c400044 	addi	r17,r17,1
    2510:	18800115 	stw	r2,4(r3)
    2514:	008001c4 	movi	r2,7
    2518:	19400015 	stw	r5,0(r3)
    251c:	dc800e15 	stw	r18,56(sp)
    2520:	dc400d15 	stw	r17,52(sp)
    2524:	2021883a 	mov	r16,r4
    2528:	14425616 	blt	r2,r17,2e84 <___vfprintf_internal_r+0x1840>
    252c:	19400204 	addi	r5,r3,8
    2530:	d9814717 	ldw	r6,1308(sp)
    2534:	8c400044 	addi	r17,r17,1
    2538:	dc400d15 	stw	r17,52(sp)
    253c:	3107c83a 	sub	r3,r6,r4
    2540:	d9014117 	ldw	r4,1284(sp)
    2544:	90e5883a 	add	r18,r18,r3
    2548:	28c00115 	stw	r3,4(r5)
    254c:	8105883a 	add	r2,r16,r4
    2550:	28800015 	stw	r2,0(r5)
    2554:	008001c4 	movi	r2,7
    2558:	dc800e15 	stw	r18,56(sp)
    255c:	147f1d16 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xb90>
    2560:	28c00204 	addi	r3,r5,8
    2564:	003db506 	br	1c3c <___vfprintf_internal_r+0x5f8>
    2568:	3c000017 	ldw	r16,0(r7)
    256c:	3c400117 	ldw	r17,4(r7)
    2570:	39800204 	addi	r6,r7,8
    2574:	01000044 	movi	r4,1
    2578:	d9814015 	stw	r6,1280(sp)
    257c:	d8000405 	stb	zero,16(sp)
    2580:	003ebe06 	br	207c <___vfprintf_internal_r+0xa38>
    2584:	3c000017 	ldw	r16,0(r7)
    2588:	3c400117 	ldw	r17,4(r7)
    258c:	38800204 	addi	r2,r7,8
    2590:	d8814015 	stw	r2,1280(sp)
    2594:	003eb706 	br	2074 <___vfprintf_internal_r+0xa30>
    2598:	3c000017 	ldw	r16,0(r7)
    259c:	3c400117 	ldw	r17,4(r7)
    25a0:	39000204 	addi	r4,r7,8
    25a4:	d9014015 	stw	r4,1280(sp)
    25a8:	0009883a 	mov	r4,zero
    25ac:	d8000405 	stb	zero,16(sp)
    25b0:	003eb206 	br	207c <___vfprintf_internal_r+0xa38>
    25b4:	38c00017 	ldw	r3,0(r7)
    25b8:	39c00104 	addi	r7,r7,4
    25bc:	d8c14a15 	stw	r3,1320(sp)
    25c0:	1800d70e 	bge	r3,zero,2920 <___vfprintf_internal_r+0x12dc>
    25c4:	00c7c83a 	sub	r3,zero,r3
    25c8:	d8c14a15 	stw	r3,1320(sp)
    25cc:	d9014c17 	ldw	r4,1328(sp)
    25d0:	b8c00007 	ldb	r3,0(r23)
    25d4:	21000114 	ori	r4,r4,4
    25d8:	d9014c15 	stw	r4,1328(sp)
    25dc:	003c9806 	br	1840 <___vfprintf_internal_r+0x1fc>
    25e0:	d9814c17 	ldw	r6,1328(sp)
    25e4:	3080080c 	andi	r2,r6,32
    25e8:	1001f626 	beq	r2,zero,2dc4 <___vfprintf_internal_r+0x1780>
    25ec:	d9014b17 	ldw	r4,1324(sp)
    25f0:	38800017 	ldw	r2,0(r7)
    25f4:	39c00104 	addi	r7,r7,4
    25f8:	d9c14015 	stw	r7,1280(sp)
    25fc:	2007d7fa 	srai	r3,r4,31
    2600:	d9c14017 	ldw	r7,1280(sp)
    2604:	11000015 	stw	r4,0(r2)
    2608:	10c00115 	stw	r3,4(r2)
    260c:	003c6906 	br	17b4 <___vfprintf_internal_r+0x170>
    2610:	b8c00007 	ldb	r3,0(r23)
    2614:	00801b04 	movi	r2,108
    2618:	18825526 	beq	r3,r2,2f70 <___vfprintf_internal_r+0x192c>
    261c:	d9414c17 	ldw	r5,1328(sp)
    2620:	29400414 	ori	r5,r5,16
    2624:	d9414c15 	stw	r5,1328(sp)
    2628:	003c8506 	br	1840 <___vfprintf_internal_r+0x1fc>
    262c:	d9814c17 	ldw	r6,1328(sp)
    2630:	b8c00007 	ldb	r3,0(r23)
    2634:	31800814 	ori	r6,r6,32
    2638:	d9814c15 	stw	r6,1328(sp)
    263c:	003c8006 	br	1840 <___vfprintf_internal_r+0x1fc>
    2640:	d8814c17 	ldw	r2,1328(sp)
    2644:	3c000017 	ldw	r16,0(r7)
    2648:	00c01e04 	movi	r3,120
    264c:	10800094 	ori	r2,r2,2
    2650:	d8814c15 	stw	r2,1328(sp)
    2654:	39c00104 	addi	r7,r7,4
    2658:	01400074 	movhi	r5,1
    265c:	2975b104 	addi	r5,r5,-10556
    2660:	00800c04 	movi	r2,48
    2664:	0023883a 	mov	r17,zero
    2668:	01000084 	movi	r4,2
    266c:	d9c14015 	stw	r7,1280(sp)
    2670:	d8c14d15 	stw	r3,1332(sp)
    2674:	d9414415 	stw	r5,1296(sp)
    2678:	d8800445 	stb	r2,17(sp)
    267c:	d8c00485 	stb	r3,18(sp)
    2680:	d8000405 	stb	zero,16(sp)
    2684:	003e7d06 	br	207c <___vfprintf_internal_r+0xa38>
    2688:	d8814c17 	ldw	r2,1328(sp)
    268c:	b8c00007 	ldb	r3,0(r23)
    2690:	10801014 	ori	r2,r2,64
    2694:	d8814c15 	stw	r2,1328(sp)
    2698:	003c6906 	br	1840 <___vfprintf_internal_r+0x1fc>
    269c:	d9414c17 	ldw	r5,1328(sp)
    26a0:	2880020c 	andi	r2,r5,8
    26a4:	1001e526 	beq	r2,zero,2e3c <___vfprintf_internal_r+0x17f8>
    26a8:	39800017 	ldw	r6,0(r7)
    26ac:	38800204 	addi	r2,r7,8
    26b0:	d8814015 	stw	r2,1280(sp)
    26b4:	d9814215 	stw	r6,1288(sp)
    26b8:	39c00117 	ldw	r7,4(r7)
    26bc:	d9c14315 	stw	r7,1292(sp)
    26c0:	d9014217 	ldw	r4,1288(sp)
    26c4:	d9414317 	ldw	r5,1292(sp)
    26c8:	0007d540 	call	7d54 <__isinfd>
    26cc:	10021d26 	beq	r2,zero,2f44 <___vfprintf_internal_r+0x1900>
    26d0:	d9014217 	ldw	r4,1288(sp)
    26d4:	d9414317 	ldw	r5,1292(sp)
    26d8:	000d883a 	mov	r6,zero
    26dc:	000f883a 	mov	r7,zero
    26e0:	0009fcc0 	call	9fcc <__ltdf2>
    26e4:	1002d016 	blt	r2,zero,3228 <___vfprintf_internal_r+0x1be4>
    26e8:	d9414d17 	ldw	r5,1332(sp)
    26ec:	008011c4 	movi	r2,71
    26f0:	11421016 	blt	r2,r5,2f34 <___vfprintf_internal_r+0x18f0>
    26f4:	01800074 	movhi	r6,1
    26f8:	31b5b604 	addi	r6,r6,-10536
    26fc:	d9814115 	stw	r6,1284(sp)
    2700:	d9014c17 	ldw	r4,1328(sp)
    2704:	00c000c4 	movi	r3,3
    2708:	00bfdfc4 	movi	r2,-129
    270c:	2088703a 	and	r4,r4,r2
    2710:	180f883a 	mov	r7,r3
    2714:	d8c14515 	stw	r3,1300(sp)
    2718:	d9014c15 	stw	r4,1328(sp)
    271c:	d8014615 	stw	zero,1304(sp)
    2720:	003e6a06 	br	20cc <___vfprintf_internal_r+0xa88>
    2724:	38800017 	ldw	r2,0(r7)
    2728:	00c00044 	movi	r3,1
    272c:	39c00104 	addi	r7,r7,4
    2730:	d9c14015 	stw	r7,1280(sp)
    2734:	d9000f04 	addi	r4,sp,60
    2738:	180f883a 	mov	r7,r3
    273c:	d8c14515 	stw	r3,1300(sp)
    2740:	d9014115 	stw	r4,1284(sp)
    2744:	d8800f05 	stb	r2,60(sp)
    2748:	d8000405 	stb	zero,16(sp)
    274c:	003cac06 	br	1a00 <___vfprintf_internal_r+0x3bc>
    2750:	01400074 	movhi	r5,1
    2754:	2975bc04 	addi	r5,r5,-10512
    2758:	d9414415 	stw	r5,1296(sp)
    275c:	d9814c17 	ldw	r6,1328(sp)
    2760:	3080080c 	andi	r2,r6,32
    2764:	1000ff26 	beq	r2,zero,2b64 <___vfprintf_internal_r+0x1520>
    2768:	3c000017 	ldw	r16,0(r7)
    276c:	3c400117 	ldw	r17,4(r7)
    2770:	38800204 	addi	r2,r7,8
    2774:	d8814015 	stw	r2,1280(sp)
    2778:	d9414c17 	ldw	r5,1328(sp)
    277c:	2880004c 	andi	r2,r5,1
    2780:	1005003a 	cmpeq	r2,r2,zero
    2784:	1000b91e 	bne	r2,zero,2a6c <___vfprintf_internal_r+0x1428>
    2788:	8444b03a 	or	r2,r16,r17
    278c:	1000b726 	beq	r2,zero,2a6c <___vfprintf_internal_r+0x1428>
    2790:	d9814d17 	ldw	r6,1332(sp)
    2794:	29400094 	ori	r5,r5,2
    2798:	00800c04 	movi	r2,48
    279c:	01000084 	movi	r4,2
    27a0:	d9414c15 	stw	r5,1328(sp)
    27a4:	d8800445 	stb	r2,17(sp)
    27a8:	d9800485 	stb	r6,18(sp)
    27ac:	d8000405 	stb	zero,16(sp)
    27b0:	003e3206 	br	207c <___vfprintf_internal_r+0xa38>
    27b4:	01800074 	movhi	r6,1
    27b8:	31b5b104 	addi	r6,r6,-10556
    27bc:	d9814415 	stw	r6,1296(sp)
    27c0:	003fe606 	br	275c <___vfprintf_internal_r+0x1118>
    27c4:	00800ac4 	movi	r2,43
    27c8:	d8800405 	stb	r2,16(sp)
    27cc:	b8c00007 	ldb	r3,0(r23)
    27d0:	003c1b06 	br	1840 <___vfprintf_internal_r+0x1fc>
    27d4:	d8814c17 	ldw	r2,1328(sp)
    27d8:	b8c00007 	ldb	r3,0(r23)
    27dc:	10800054 	ori	r2,r2,1
    27e0:	d8814c15 	stw	r2,1328(sp)
    27e4:	003c1606 	br	1840 <___vfprintf_internal_r+0x1fc>
    27e8:	d8800407 	ldb	r2,16(sp)
    27ec:	10004c1e 	bne	r2,zero,2920 <___vfprintf_internal_r+0x12dc>
    27f0:	00800804 	movi	r2,32
    27f4:	d8800405 	stb	r2,16(sp)
    27f8:	b8c00007 	ldb	r3,0(r23)
    27fc:	003c1006 	br	1840 <___vfprintf_internal_r+0x1fc>
    2800:	d9814c17 	ldw	r6,1328(sp)
    2804:	b8c00007 	ldb	r3,0(r23)
    2808:	31800214 	ori	r6,r6,8
    280c:	d9814c15 	stw	r6,1328(sp)
    2810:	003c0b06 	br	1840 <___vfprintf_internal_r+0x1fc>
    2814:	0009883a 	mov	r4,zero
    2818:	04000244 	movi	r16,9
    281c:	01400284 	movi	r5,10
    2820:	d9c15115 	stw	r7,1348(sp)
    2824:	0000af40 	call	af4 <__mulsi3>
    2828:	b9000007 	ldb	r4,0(r23)
    282c:	d8c14d17 	ldw	r3,1332(sp)
    2830:	bdc00044 	addi	r23,r23,1
    2834:	d9014d15 	stw	r4,1332(sp)
    2838:	d9414d17 	ldw	r5,1332(sp)
    283c:	1885883a 	add	r2,r3,r2
    2840:	113ff404 	addi	r4,r2,-48
    2844:	28bff404 	addi	r2,r5,-48
    2848:	d9c15117 	ldw	r7,1348(sp)
    284c:	80bff32e 	bgeu	r16,r2,281c <___vfprintf_internal_r+0x11d8>
    2850:	d9014a15 	stw	r4,1320(sp)
    2854:	003bfc06 	br	1848 <___vfprintf_internal_r+0x204>
    2858:	d8814c17 	ldw	r2,1328(sp)
    285c:	b8c00007 	ldb	r3,0(r23)
    2860:	10802014 	ori	r2,r2,128
    2864:	d8814c15 	stw	r2,1328(sp)
    2868:	003bf506 	br	1840 <___vfprintf_internal_r+0x1fc>
    286c:	b8c00007 	ldb	r3,0(r23)
    2870:	00800a84 	movi	r2,42
    2874:	bdc00044 	addi	r23,r23,1
    2878:	18831826 	beq	r3,r2,34dc <___vfprintf_internal_r+0x1e98>
    287c:	d8c14d15 	stw	r3,1332(sp)
    2880:	18bff404 	addi	r2,r3,-48
    2884:	00c00244 	movi	r3,9
    2888:	18827b36 	bltu	r3,r2,3278 <___vfprintf_internal_r+0x1c34>
    288c:	1821883a 	mov	r16,r3
    2890:	0009883a 	mov	r4,zero
    2894:	01400284 	movi	r5,10
    2898:	d9c15115 	stw	r7,1348(sp)
    289c:	0000af40 	call	af4 <__mulsi3>
    28a0:	d9414d17 	ldw	r5,1332(sp)
    28a4:	b9800007 	ldb	r6,0(r23)
    28a8:	d9c15117 	ldw	r7,1348(sp)
    28ac:	1145883a 	add	r2,r2,r5
    28b0:	113ff404 	addi	r4,r2,-48
    28b4:	30bff404 	addi	r2,r6,-48
    28b8:	d9814d15 	stw	r6,1332(sp)
    28bc:	bdc00044 	addi	r23,r23,1
    28c0:	80bff42e 	bgeu	r16,r2,2894 <___vfprintf_internal_r+0x1250>
    28c4:	2027883a 	mov	r19,r4
    28c8:	203bdf0e 	bge	r4,zero,1848 <___vfprintf_internal_r+0x204>
    28cc:	04ffffc4 	movi	r19,-1
    28d0:	003bdd06 	br	1848 <___vfprintf_internal_r+0x204>
    28d4:	d8000405 	stb	zero,16(sp)
    28d8:	39800017 	ldw	r6,0(r7)
    28dc:	39c00104 	addi	r7,r7,4
    28e0:	d9c14015 	stw	r7,1280(sp)
    28e4:	d9814115 	stw	r6,1284(sp)
    28e8:	3001c926 	beq	r6,zero,3010 <___vfprintf_internal_r+0x19cc>
    28ec:	98000e16 	blt	r19,zero,2928 <___vfprintf_internal_r+0x12e4>
    28f0:	d9014117 	ldw	r4,1284(sp)
    28f4:	000b883a 	mov	r5,zero
    28f8:	980d883a 	mov	r6,r19
    28fc:	00061ec0 	call	61ec <memchr>
    2900:	10025926 	beq	r2,zero,3268 <___vfprintf_internal_r+0x1c24>
    2904:	d8c14117 	ldw	r3,1284(sp)
    2908:	10cfc83a 	sub	r7,r2,r3
    290c:	99c19e16 	blt	r19,r7,2f88 <___vfprintf_internal_r+0x1944>
    2910:	d9c14515 	stw	r7,1300(sp)
    2914:	38000916 	blt	r7,zero,293c <___vfprintf_internal_r+0x12f8>
    2918:	d8014615 	stw	zero,1304(sp)
    291c:	003deb06 	br	20cc <___vfprintf_internal_r+0xa88>
    2920:	b8c00007 	ldb	r3,0(r23)
    2924:	003bc606 	br	1840 <___vfprintf_internal_r+0x1fc>
    2928:	d9014117 	ldw	r4,1284(sp)
    292c:	00015780 	call	1578 <strlen>
    2930:	d8814515 	stw	r2,1300(sp)
    2934:	100f883a 	mov	r7,r2
    2938:	103ff70e 	bge	r2,zero,2918 <___vfprintf_internal_r+0x12d4>
    293c:	d8014515 	stw	zero,1300(sp)
    2940:	d8014615 	stw	zero,1304(sp)
    2944:	003de106 	br	20cc <___vfprintf_internal_r+0xa88>
    2948:	20c03fcc 	andi	r3,r4,255
    294c:	00800044 	movi	r2,1
    2950:	18802d26 	beq	r3,r2,2a08 <___vfprintf_internal_r+0x13c4>
    2954:	18800e36 	bltu	r3,r2,2990 <___vfprintf_internal_r+0x134c>
    2958:	00800084 	movi	r2,2
    295c:	1880fa26 	beq	r3,r2,2d48 <___vfprintf_internal_r+0x1704>
    2960:	01000074 	movhi	r4,1
    2964:	2135c104 	addi	r4,r4,-10492
    2968:	00015780 	call	1578 <strlen>
    296c:	100f883a 	mov	r7,r2
    2970:	dcc14515 	stw	r19,1300(sp)
    2974:	9880010e 	bge	r19,r2,297c <___vfprintf_internal_r+0x1338>
    2978:	d8814515 	stw	r2,1300(sp)
    297c:	00800074 	movhi	r2,1
    2980:	10b5c104 	addi	r2,r2,-10492
    2984:	dcc14615 	stw	r19,1304(sp)
    2988:	d8814115 	stw	r2,1284(sp)
    298c:	003dcf06 	br	20cc <___vfprintf_internal_r+0xa88>
    2990:	d9401904 	addi	r5,sp,100
    2994:	dd000f04 	addi	r20,sp,60
    2998:	d9414115 	stw	r5,1284(sp)
    299c:	880a977a 	slli	r5,r17,29
    29a0:	d9814117 	ldw	r6,1284(sp)
    29a4:	8004d0fa 	srli	r2,r16,3
    29a8:	8806d0fa 	srli	r3,r17,3
    29ac:	810001cc 	andi	r4,r16,7
    29b0:	2884b03a 	or	r2,r5,r2
    29b4:	31bfffc4 	addi	r6,r6,-1
    29b8:	21000c04 	addi	r4,r4,48
    29bc:	d9814115 	stw	r6,1284(sp)
    29c0:	10cab03a 	or	r5,r2,r3
    29c4:	31000005 	stb	r4,0(r6)
    29c8:	1021883a 	mov	r16,r2
    29cc:	1823883a 	mov	r17,r3
    29d0:	283ff21e 	bne	r5,zero,299c <___vfprintf_internal_r+0x1358>
    29d4:	d8c14c17 	ldw	r3,1328(sp)
    29d8:	1880004c 	andi	r2,r3,1
    29dc:	1005003a 	cmpeq	r2,r2,zero
    29e0:	103db31e 	bne	r2,zero,20b0 <___vfprintf_internal_r+0xa6c>
    29e4:	20803fcc 	andi	r2,r4,255
    29e8:	1080201c 	xori	r2,r2,128
    29ec:	10bfe004 	addi	r2,r2,-128
    29f0:	00c00c04 	movi	r3,48
    29f4:	10fdae26 	beq	r2,r3,20b0 <___vfprintf_internal_r+0xa6c>
    29f8:	31bfffc4 	addi	r6,r6,-1
    29fc:	d9814115 	stw	r6,1284(sp)
    2a00:	30c00005 	stb	r3,0(r6)
    2a04:	003daa06 	br	20b0 <___vfprintf_internal_r+0xa6c>
    2a08:	88800068 	cmpgeui	r2,r17,1
    2a0c:	10002c1e 	bne	r2,zero,2ac0 <___vfprintf_internal_r+0x147c>
    2a10:	8800021e 	bne	r17,zero,2a1c <___vfprintf_internal_r+0x13d8>
    2a14:	00800244 	movi	r2,9
    2a18:	14002936 	bltu	r2,r16,2ac0 <___vfprintf_internal_r+0x147c>
    2a1c:	d90018c4 	addi	r4,sp,99
    2a20:	dd000f04 	addi	r20,sp,60
    2a24:	d9014115 	stw	r4,1284(sp)
    2a28:	d9014117 	ldw	r4,1284(sp)
    2a2c:	80800c04 	addi	r2,r16,48
    2a30:	20800005 	stb	r2,0(r4)
    2a34:	003d9e06 	br	20b0 <___vfprintf_internal_r+0xa6c>
    2a38:	dc400d17 	ldw	r17,52(sp)
    2a3c:	07000074 	movhi	fp,1
    2a40:	e735c884 	addi	fp,fp,-10462
    2a44:	9425883a 	add	r18,r18,r16
    2a48:	8c400044 	addi	r17,r17,1
    2a4c:	008001c4 	movi	r2,7
    2a50:	1f000015 	stw	fp,0(r3)
    2a54:	1c000115 	stw	r16,4(r3)
    2a58:	dc800e15 	stw	r18,56(sp)
    2a5c:	dc400d15 	stw	r17,52(sp)
    2a60:	147ddc16 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xb90>
    2a64:	18c00204 	addi	r3,r3,8
    2a68:	003c7406 	br	1c3c <___vfprintf_internal_r+0x5f8>
    2a6c:	01000084 	movi	r4,2
    2a70:	d8000405 	stb	zero,16(sp)
    2a74:	003d8106 	br	207c <___vfprintf_internal_r+0xa38>
    2a78:	d9814c17 	ldw	r6,1328(sp)
    2a7c:	30c4703a 	and	r2,r6,r3
    2a80:	1005003a 	cmpeq	r2,r2,zero
    2a84:	103cb326 	beq	r2,zero,1d54 <___vfprintf_internal_r+0x710>
    2a88:	d9014117 	ldw	r4,1284(sp)
    2a8c:	94800044 	addi	r18,r18,1
    2a90:	8c400044 	addi	r17,r17,1
    2a94:	008001c4 	movi	r2,7
    2a98:	a9000015 	stw	r4,0(r21)
    2a9c:	a8c00115 	stw	r3,4(r21)
    2aa0:	dc800e15 	stw	r18,56(sp)
    2aa4:	dc400d15 	stw	r17,52(sp)
    2aa8:	147e6016 	blt	r2,r17,242c <___vfprintf_internal_r+0xde8>
    2aac:	acc00204 	addi	r19,r21,8
    2ab0:	003cd106 	br	1df8 <___vfprintf_internal_r+0x7b4>
    2ab4:	07000074 	movhi	fp,1
    2ab8:	e735c884 	addi	fp,fp,-10462
    2abc:	003c4906 	br	1be4 <___vfprintf_internal_r+0x5a0>
    2ac0:	dd000f04 	addi	r20,sp,60
    2ac4:	dc801904 	addi	r18,sp,100
    2ac8:	8009883a 	mov	r4,r16
    2acc:	880b883a 	mov	r5,r17
    2ad0:	01800284 	movi	r6,10
    2ad4:	000f883a 	mov	r7,zero
    2ad8:	0008c2c0 	call	8c2c <__umoddi3>
    2adc:	12000c04 	addi	r8,r2,48
    2ae0:	94bfffc4 	addi	r18,r18,-1
    2ae4:	8009883a 	mov	r4,r16
    2ae8:	880b883a 	mov	r5,r17
    2aec:	01800284 	movi	r6,10
    2af0:	000f883a 	mov	r7,zero
    2af4:	92000005 	stb	r8,0(r18)
    2af8:	00085c00 	call	85c0 <__udivdi3>
    2afc:	1009883a 	mov	r4,r2
    2b00:	1021883a 	mov	r16,r2
    2b04:	18800068 	cmpgeui	r2,r3,1
    2b08:	1823883a 	mov	r17,r3
    2b0c:	103fee1e 	bne	r2,zero,2ac8 <___vfprintf_internal_r+0x1484>
    2b10:	1800021e 	bne	r3,zero,2b1c <___vfprintf_internal_r+0x14d8>
    2b14:	00800244 	movi	r2,9
    2b18:	113feb36 	bltu	r2,r4,2ac8 <___vfprintf_internal_r+0x1484>
    2b1c:	94bfffc4 	addi	r18,r18,-1
    2b20:	dc814115 	stw	r18,1284(sp)
    2b24:	003fc006 	br	2a28 <___vfprintf_internal_r+0x13e4>
    2b28:	d9014c17 	ldw	r4,1328(sp)
    2b2c:	2080004c 	andi	r2,r4,1
    2b30:	10009a1e 	bne	r2,zero,2d9c <___vfprintf_internal_r+0x1758>
    2b34:	d9401904 	addi	r5,sp,100
    2b38:	dd000f04 	addi	r20,sp,60
    2b3c:	d9414115 	stw	r5,1284(sp)
    2b40:	003d5b06 	br	20b0 <___vfprintf_internal_r+0xa6c>
    2b44:	d9014f17 	ldw	r4,1340(sp)
    2b48:	b00b883a 	mov	r5,r22
    2b4c:	d9800c04 	addi	r6,sp,48
    2b50:	00015ec0 	call	15ec <__sprint_r>
    2b54:	103c731e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2b58:	dc800e17 	ldw	r18,56(sp)
    2b5c:	d8c01904 	addi	r3,sp,100
    2b60:	003cf906 	br	1f48 <___vfprintf_internal_r+0x904>
    2b64:	d8c14c17 	ldw	r3,1328(sp)
    2b68:	1880040c 	andi	r2,r3,16
    2b6c:	1000711e 	bne	r2,zero,2d34 <___vfprintf_internal_r+0x16f0>
    2b70:	d9014c17 	ldw	r4,1328(sp)
    2b74:	2080100c 	andi	r2,r4,64
    2b78:	10006e26 	beq	r2,zero,2d34 <___vfprintf_internal_r+0x16f0>
    2b7c:	3c00000b 	ldhu	r16,0(r7)
    2b80:	0023883a 	mov	r17,zero
    2b84:	39c00104 	addi	r7,r7,4
    2b88:	d9c14015 	stw	r7,1280(sp)
    2b8c:	003efa06 	br	2778 <___vfprintf_internal_r+0x1134>
    2b90:	dc400d17 	ldw	r17,52(sp)
    2b94:	07000074 	movhi	fp,1
    2b98:	e735c884 	addi	fp,fp,-10462
    2b9c:	9425883a 	add	r18,r18,r16
    2ba0:	8c400044 	addi	r17,r17,1
    2ba4:	008001c4 	movi	r2,7
    2ba8:	1f000015 	stw	fp,0(r3)
    2bac:	1c000115 	stw	r16,4(r3)
    2bb0:	dc800e15 	stw	r18,56(sp)
    2bb4:	dc400d15 	stw	r17,52(sp)
    2bb8:	147d7016 	blt	r2,r17,217c <___vfprintf_internal_r+0xb38>
    2bbc:	18c00204 	addi	r3,r3,8
    2bc0:	003d7506 	br	2198 <___vfprintf_internal_r+0xb54>
    2bc4:	dc800e17 	ldw	r18,56(sp)
    2bc8:	dc400d17 	ldw	r17,52(sp)
    2bcc:	07000074 	movhi	fp,1
    2bd0:	e735cc84 	addi	fp,fp,-10446
    2bd4:	003bba06 	br	1ac0 <___vfprintf_internal_r+0x47c>
    2bd8:	d9014f17 	ldw	r4,1340(sp)
    2bdc:	b00b883a 	mov	r5,r22
    2be0:	d9800c04 	addi	r6,sp,48
    2be4:	00015ec0 	call	15ec <__sprint_r>
    2be8:	103c4e1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2bec:	dc800e17 	ldw	r18,56(sp)
    2bf0:	d8c01904 	addi	r3,sp,100
    2bf4:	003ce306 	br	1f84 <___vfprintf_internal_r+0x940>
    2bf8:	3c000017 	ldw	r16,0(r7)
    2bfc:	0009883a 	mov	r4,zero
    2c00:	39c00104 	addi	r7,r7,4
    2c04:	0023883a 	mov	r17,zero
    2c08:	d9c14015 	stw	r7,1280(sp)
    2c0c:	d8000405 	stb	zero,16(sp)
    2c10:	003d1a06 	br	207c <___vfprintf_internal_r+0xa38>
    2c14:	38800017 	ldw	r2,0(r7)
    2c18:	39c00104 	addi	r7,r7,4
    2c1c:	d9c14015 	stw	r7,1280(sp)
    2c20:	1023d7fa 	srai	r17,r2,31
    2c24:	1021883a 	mov	r16,r2
    2c28:	003d1206 	br	2074 <___vfprintf_internal_r+0xa30>
    2c2c:	3c000017 	ldw	r16,0(r7)
    2c30:	01000044 	movi	r4,1
    2c34:	39c00104 	addi	r7,r7,4
    2c38:	0023883a 	mov	r17,zero
    2c3c:	d9c14015 	stw	r7,1280(sp)
    2c40:	d8000405 	stb	zero,16(sp)
    2c44:	003d0d06 	br	207c <___vfprintf_internal_r+0xa38>
    2c48:	00800074 	movhi	r2,1
    2c4c:	10b5c804 	addi	r2,r2,-10464
    2c50:	94800044 	addi	r18,r18,1
    2c54:	8c400044 	addi	r17,r17,1
    2c58:	a8800015 	stw	r2,0(r21)
    2c5c:	00c00044 	movi	r3,1
    2c60:	008001c4 	movi	r2,7
    2c64:	a8c00115 	stw	r3,4(r21)
    2c68:	dc800e15 	stw	r18,56(sp)
    2c6c:	dc400d15 	stw	r17,52(sp)
    2c70:	1440ca16 	blt	r2,r17,2f9c <___vfprintf_internal_r+0x1958>
    2c74:	a8c00204 	addi	r3,r21,8
    2c78:	2000061e 	bne	r4,zero,2c94 <___vfprintf_internal_r+0x1650>
    2c7c:	d9414717 	ldw	r5,1308(sp)
    2c80:	2800041e 	bne	r5,zero,2c94 <___vfprintf_internal_r+0x1650>
    2c84:	d9814c17 	ldw	r6,1328(sp)
    2c88:	3080004c 	andi	r2,r6,1
    2c8c:	1005003a 	cmpeq	r2,r2,zero
    2c90:	103bea1e 	bne	r2,zero,1c3c <___vfprintf_internal_r+0x5f8>
    2c94:	00800044 	movi	r2,1
    2c98:	dc400d17 	ldw	r17,52(sp)
    2c9c:	18800115 	stw	r2,4(r3)
    2ca0:	d8814917 	ldw	r2,1316(sp)
    2ca4:	94800044 	addi	r18,r18,1
    2ca8:	8c400044 	addi	r17,r17,1
    2cac:	18800015 	stw	r2,0(r3)
    2cb0:	008001c4 	movi	r2,7
    2cb4:	dc800e15 	stw	r18,56(sp)
    2cb8:	dc400d15 	stw	r17,52(sp)
    2cbc:	1440ca16 	blt	r2,r17,2fe8 <___vfprintf_internal_r+0x19a4>
    2cc0:	18c00204 	addi	r3,r3,8
    2cc4:	0121c83a 	sub	r16,zero,r4
    2cc8:	0400500e 	bge	zero,r16,2e0c <___vfprintf_internal_r+0x17c8>
    2ccc:	00800404 	movi	r2,16
    2cd0:	1400800e 	bge	r2,r16,2ed4 <___vfprintf_internal_r+0x1890>
    2cd4:	1027883a 	mov	r19,r2
    2cd8:	07000074 	movhi	fp,1
    2cdc:	e735c884 	addi	fp,fp,-10462
    2ce0:	050001c4 	movi	r20,7
    2ce4:	00000306 	br	2cf4 <___vfprintf_internal_r+0x16b0>
    2ce8:	18c00204 	addi	r3,r3,8
    2cec:	843ffc04 	addi	r16,r16,-16
    2cf0:	9c007a0e 	bge	r19,r16,2edc <___vfprintf_internal_r+0x1898>
    2cf4:	94800404 	addi	r18,r18,16
    2cf8:	8c400044 	addi	r17,r17,1
    2cfc:	1f000015 	stw	fp,0(r3)
    2d00:	1cc00115 	stw	r19,4(r3)
    2d04:	dc800e15 	stw	r18,56(sp)
    2d08:	dc400d15 	stw	r17,52(sp)
    2d0c:	a47ff60e 	bge	r20,r17,2ce8 <___vfprintf_internal_r+0x16a4>
    2d10:	d9014f17 	ldw	r4,1340(sp)
    2d14:	b00b883a 	mov	r5,r22
    2d18:	d9800c04 	addi	r6,sp,48
    2d1c:	00015ec0 	call	15ec <__sprint_r>
    2d20:	103c001e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2d24:	dc800e17 	ldw	r18,56(sp)
    2d28:	dc400d17 	ldw	r17,52(sp)
    2d2c:	d8c01904 	addi	r3,sp,100
    2d30:	003fee06 	br	2cec <___vfprintf_internal_r+0x16a8>
    2d34:	3c000017 	ldw	r16,0(r7)
    2d38:	0023883a 	mov	r17,zero
    2d3c:	39c00104 	addi	r7,r7,4
    2d40:	d9c14015 	stw	r7,1280(sp)
    2d44:	003e8c06 	br	2778 <___vfprintf_internal_r+0x1134>
    2d48:	d9401904 	addi	r5,sp,100
    2d4c:	dd000f04 	addi	r20,sp,60
    2d50:	d9414115 	stw	r5,1284(sp)
    2d54:	d9814417 	ldw	r6,1296(sp)
    2d58:	880a973a 	slli	r5,r17,28
    2d5c:	8004d13a 	srli	r2,r16,4
    2d60:	810003cc 	andi	r4,r16,15
    2d64:	3109883a 	add	r4,r6,r4
    2d68:	2884b03a 	or	r2,r5,r2
    2d6c:	21400003 	ldbu	r5,0(r4)
    2d70:	d9014117 	ldw	r4,1284(sp)
    2d74:	8806d13a 	srli	r3,r17,4
    2d78:	1021883a 	mov	r16,r2
    2d7c:	213fffc4 	addi	r4,r4,-1
    2d80:	d9014115 	stw	r4,1284(sp)
    2d84:	d9814117 	ldw	r6,1284(sp)
    2d88:	10c8b03a 	or	r4,r2,r3
    2d8c:	1823883a 	mov	r17,r3
    2d90:	31400005 	stb	r5,0(r6)
    2d94:	203fef1e 	bne	r4,zero,2d54 <___vfprintf_internal_r+0x1710>
    2d98:	003cc506 	br	20b0 <___vfprintf_internal_r+0xa6c>
    2d9c:	00800c04 	movi	r2,48
    2da0:	d98018c4 	addi	r6,sp,99
    2da4:	dd000f04 	addi	r20,sp,60
    2da8:	d88018c5 	stb	r2,99(sp)
    2dac:	d9814115 	stw	r6,1284(sp)
    2db0:	003cbf06 	br	20b0 <___vfprintf_internal_r+0xa6c>
    2db4:	dc400d17 	ldw	r17,52(sp)
    2db8:	07000074 	movhi	fp,1
    2dbc:	e735cc84 	addi	fp,fp,-10446
    2dc0:	003bc106 	br	1cc8 <___vfprintf_internal_r+0x684>
    2dc4:	d9414c17 	ldw	r5,1328(sp)
    2dc8:	2880040c 	andi	r2,r5,16
    2dcc:	10007c26 	beq	r2,zero,2fc0 <___vfprintf_internal_r+0x197c>
    2dd0:	38800017 	ldw	r2,0(r7)
    2dd4:	39c00104 	addi	r7,r7,4
    2dd8:	d9c14015 	stw	r7,1280(sp)
    2ddc:	d9814b17 	ldw	r6,1324(sp)
    2de0:	d9c14017 	ldw	r7,1280(sp)
    2de4:	11800015 	stw	r6,0(r2)
    2de8:	003a7206 	br	17b4 <___vfprintf_internal_r+0x170>
    2dec:	d9014f17 	ldw	r4,1340(sp)
    2df0:	b00b883a 	mov	r5,r22
    2df4:	d9800c04 	addi	r6,sp,48
    2df8:	00015ec0 	call	15ec <__sprint_r>
    2dfc:	103bc91e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2e00:	dc800e17 	ldw	r18,56(sp)
    2e04:	dc400d17 	ldw	r17,52(sp)
    2e08:	d8c01904 	addi	r3,sp,100
    2e0c:	d9014717 	ldw	r4,1308(sp)
    2e10:	d9414117 	ldw	r5,1284(sp)
    2e14:	8c400044 	addi	r17,r17,1
    2e18:	9125883a 	add	r18,r18,r4
    2e1c:	008001c4 	movi	r2,7
    2e20:	19400015 	stw	r5,0(r3)
    2e24:	19000115 	stw	r4,4(r3)
    2e28:	dc800e15 	stw	r18,56(sp)
    2e2c:	dc400d15 	stw	r17,52(sp)
    2e30:	147ce816 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xb90>
    2e34:	18c00204 	addi	r3,r3,8
    2e38:	003b8006 	br	1c3c <___vfprintf_internal_r+0x5f8>
    2e3c:	38c00017 	ldw	r3,0(r7)
    2e40:	39000204 	addi	r4,r7,8
    2e44:	d9014015 	stw	r4,1280(sp)
    2e48:	d8c14215 	stw	r3,1288(sp)
    2e4c:	39c00117 	ldw	r7,4(r7)
    2e50:	d9c14315 	stw	r7,1292(sp)
    2e54:	003e1a06 	br	26c0 <___vfprintf_internal_r+0x107c>
    2e58:	0005883a 	mov	r2,zero
    2e5c:	1409c83a 	sub	r4,r2,r16
    2e60:	1105803a 	cmpltu	r2,r2,r4
    2e64:	044bc83a 	sub	r5,zero,r17
    2e68:	2885c83a 	sub	r2,r5,r2
    2e6c:	2021883a 	mov	r16,r4
    2e70:	1023883a 	mov	r17,r2
    2e74:	01000044 	movi	r4,1
    2e78:	00800b44 	movi	r2,45
    2e7c:	d8800405 	stb	r2,16(sp)
    2e80:	003c7e06 	br	207c <___vfprintf_internal_r+0xa38>
    2e84:	d9014f17 	ldw	r4,1340(sp)
    2e88:	b00b883a 	mov	r5,r22
    2e8c:	d9800c04 	addi	r6,sp,48
    2e90:	00015ec0 	call	15ec <__sprint_r>
    2e94:	103ba31e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2e98:	dc800e17 	ldw	r18,56(sp)
    2e9c:	dc400d17 	ldw	r17,52(sp)
    2ea0:	d9000517 	ldw	r4,20(sp)
    2ea4:	d9401904 	addi	r5,sp,100
    2ea8:	003da106 	br	2530 <___vfprintf_internal_r+0xeec>
    2eac:	d9014f17 	ldw	r4,1340(sp)
    2eb0:	b00b883a 	mov	r5,r22
    2eb4:	d9800c04 	addi	r6,sp,48
    2eb8:	00015ec0 	call	15ec <__sprint_r>
    2ebc:	103b991e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2ec0:	dc800e17 	ldw	r18,56(sp)
    2ec4:	dc400d17 	ldw	r17,52(sp)
    2ec8:	d9000517 	ldw	r4,20(sp)
    2ecc:	d8c01904 	addi	r3,sp,100
    2ed0:	003d8b06 	br	2500 <___vfprintf_internal_r+0xebc>
    2ed4:	07000074 	movhi	fp,1
    2ed8:	e735c884 	addi	fp,fp,-10462
    2edc:	9425883a 	add	r18,r18,r16
    2ee0:	8c400044 	addi	r17,r17,1
    2ee4:	008001c4 	movi	r2,7
    2ee8:	1f000015 	stw	fp,0(r3)
    2eec:	1c000115 	stw	r16,4(r3)
    2ef0:	dc800e15 	stw	r18,56(sp)
    2ef4:	dc400d15 	stw	r17,52(sp)
    2ef8:	147fbc16 	blt	r2,r17,2dec <___vfprintf_internal_r+0x17a8>
    2efc:	18c00204 	addi	r3,r3,8
    2f00:	003fc206 	br	2e0c <___vfprintf_internal_r+0x17c8>
    2f04:	d9014f17 	ldw	r4,1340(sp)
    2f08:	b00b883a 	mov	r5,r22
    2f0c:	d9800c04 	addi	r6,sp,48
    2f10:	00015ec0 	call	15ec <__sprint_r>
    2f14:	103b831e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2f18:	dc800e17 	ldw	r18,56(sp)
    2f1c:	d9000517 	ldw	r4,20(sp)
    2f20:	d8c01904 	addi	r3,sp,100
    2f24:	003cfc06 	br	2318 <___vfprintf_internal_r+0xcd4>
    2f28:	07000074 	movhi	fp,1
    2f2c:	e735c884 	addi	fp,fp,-10462
    2f30:	003bde06 	br	1eac <___vfprintf_internal_r+0x868>
    2f34:	00800074 	movhi	r2,1
    2f38:	10b5b704 	addi	r2,r2,-10532
    2f3c:	d8814115 	stw	r2,1284(sp)
    2f40:	003def06 	br	2700 <___vfprintf_internal_r+0x10bc>
    2f44:	d9014217 	ldw	r4,1288(sp)
    2f48:	d9414317 	ldw	r5,1292(sp)
    2f4c:	0007d940 	call	7d94 <__isnand>
    2f50:	10003926 	beq	r2,zero,3038 <___vfprintf_internal_r+0x19f4>
    2f54:	d9414d17 	ldw	r5,1332(sp)
    2f58:	008011c4 	movi	r2,71
    2f5c:	1140ce16 	blt	r2,r5,3298 <___vfprintf_internal_r+0x1c54>
    2f60:	01800074 	movhi	r6,1
    2f64:	31b5b804 	addi	r6,r6,-10528
    2f68:	d9814115 	stw	r6,1284(sp)
    2f6c:	003de406 	br	2700 <___vfprintf_internal_r+0x10bc>
    2f70:	d9014c17 	ldw	r4,1328(sp)
    2f74:	bdc00044 	addi	r23,r23,1
    2f78:	b8c00007 	ldb	r3,0(r23)
    2f7c:	21000814 	ori	r4,r4,32
    2f80:	d9014c15 	stw	r4,1328(sp)
    2f84:	003a2e06 	br	1840 <___vfprintf_internal_r+0x1fc>
    2f88:	dcc14515 	stw	r19,1300(sp)
    2f8c:	98011016 	blt	r19,zero,33d0 <___vfprintf_internal_r+0x1d8c>
    2f90:	980f883a 	mov	r7,r19
    2f94:	d8014615 	stw	zero,1304(sp)
    2f98:	003c4c06 	br	20cc <___vfprintf_internal_r+0xa88>
    2f9c:	d9014f17 	ldw	r4,1340(sp)
    2fa0:	b00b883a 	mov	r5,r22
    2fa4:	d9800c04 	addi	r6,sp,48
    2fa8:	00015ec0 	call	15ec <__sprint_r>
    2fac:	103b5d1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2fb0:	dc800e17 	ldw	r18,56(sp)
    2fb4:	d9000517 	ldw	r4,20(sp)
    2fb8:	d8c01904 	addi	r3,sp,100
    2fbc:	003f2e06 	br	2c78 <___vfprintf_internal_r+0x1634>
    2fc0:	d8c14c17 	ldw	r3,1328(sp)
    2fc4:	1880100c 	andi	r2,r3,64
    2fc8:	1000a026 	beq	r2,zero,324c <___vfprintf_internal_r+0x1c08>
    2fcc:	38800017 	ldw	r2,0(r7)
    2fd0:	39c00104 	addi	r7,r7,4
    2fd4:	d9c14015 	stw	r7,1280(sp)
    2fd8:	d9014b17 	ldw	r4,1324(sp)
    2fdc:	d9c14017 	ldw	r7,1280(sp)
    2fe0:	1100000d 	sth	r4,0(r2)
    2fe4:	0039f306 	br	17b4 <___vfprintf_internal_r+0x170>
    2fe8:	d9014f17 	ldw	r4,1340(sp)
    2fec:	b00b883a 	mov	r5,r22
    2ff0:	d9800c04 	addi	r6,sp,48
    2ff4:	00015ec0 	call	15ec <__sprint_r>
    2ff8:	103b4a1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    2ffc:	dc800e17 	ldw	r18,56(sp)
    3000:	dc400d17 	ldw	r17,52(sp)
    3004:	d9000517 	ldw	r4,20(sp)
    3008:	d8c01904 	addi	r3,sp,100
    300c:	003f2d06 	br	2cc4 <___vfprintf_internal_r+0x1680>
    3010:	00800184 	movi	r2,6
    3014:	14c09a36 	bltu	r2,r19,3280 <___vfprintf_internal_r+0x1c3c>
    3018:	dcc14515 	stw	r19,1300(sp)
    301c:	9800010e 	bge	r19,zero,3024 <___vfprintf_internal_r+0x19e0>
    3020:	d8014515 	stw	zero,1300(sp)
    3024:	00800074 	movhi	r2,1
    3028:	10b5ba04 	addi	r2,r2,-10520
    302c:	980f883a 	mov	r7,r19
    3030:	d8814115 	stw	r2,1284(sp)
    3034:	003a7206 	br	1a00 <___vfprintf_internal_r+0x3bc>
    3038:	00bfffc4 	movi	r2,-1
    303c:	9880e226 	beq	r19,r2,33c8 <___vfprintf_internal_r+0x1d84>
    3040:	d9414d17 	ldw	r5,1332(sp)
    3044:	008019c4 	movi	r2,103
    3048:	2880dc26 	beq	r5,r2,33bc <___vfprintf_internal_r+0x1d78>
    304c:	008011c4 	movi	r2,71
    3050:	2880da26 	beq	r5,r2,33bc <___vfprintf_internal_r+0x1d78>
    3054:	d9414c17 	ldw	r5,1328(sp)
    3058:	d9014317 	ldw	r4,1292(sp)
    305c:	d9814217 	ldw	r6,1288(sp)
    3060:	29404014 	ori	r5,r5,256
    3064:	d9414c15 	stw	r5,1328(sp)
    3068:	2000cc16 	blt	r4,zero,339c <___vfprintf_internal_r+0x1d58>
    306c:	3021883a 	mov	r16,r6
    3070:	2023883a 	mov	r17,r4
    3074:	0039883a 	mov	fp,zero
    3078:	d9414d17 	ldw	r5,1332(sp)
    307c:	00801984 	movi	r2,102
    3080:	2880b726 	beq	r5,r2,3360 <___vfprintf_internal_r+0x1d1c>
    3084:	00801184 	movi	r2,70
    3088:	2880b526 	beq	r5,r2,3360 <___vfprintf_internal_r+0x1d1c>
    308c:	00801944 	movi	r2,101
    3090:	2880c826 	beq	r5,r2,33b4 <___vfprintf_internal_r+0x1d70>
    3094:	00801144 	movi	r2,69
    3098:	2880c626 	beq	r5,r2,33b4 <___vfprintf_internal_r+0x1d70>
    309c:	9829883a 	mov	r20,r19
    30a0:	d9014f17 	ldw	r4,1340(sp)
    30a4:	d8800504 	addi	r2,sp,20
    30a8:	880d883a 	mov	r6,r17
    30ac:	d8800115 	stw	r2,4(sp)
    30b0:	d8c00604 	addi	r3,sp,24
    30b4:	d8800704 	addi	r2,sp,28
    30b8:	800b883a 	mov	r5,r16
    30bc:	01c00084 	movi	r7,2
    30c0:	d8c00215 	stw	r3,8(sp)
    30c4:	d8800315 	stw	r2,12(sp)
    30c8:	dd000015 	stw	r20,0(sp)
    30cc:	0003a600 	call	3a60 <_dtoa_r>
    30d0:	d9814d17 	ldw	r6,1332(sp)
    30d4:	d8814115 	stw	r2,1284(sp)
    30d8:	008019c4 	movi	r2,103
    30dc:	30809526 	beq	r6,r2,3334 <___vfprintf_internal_r+0x1cf0>
    30e0:	d8c14d17 	ldw	r3,1332(sp)
    30e4:	008011c4 	movi	r2,71
    30e8:	18809226 	beq	r3,r2,3334 <___vfprintf_internal_r+0x1cf0>
    30ec:	d9414117 	ldw	r5,1284(sp)
    30f0:	d9814d17 	ldw	r6,1332(sp)
    30f4:	00801984 	movi	r2,102
    30f8:	2d25883a 	add	r18,r5,r20
    30fc:	30808626 	beq	r6,r2,3318 <___vfprintf_internal_r+0x1cd4>
    3100:	00801184 	movi	r2,70
    3104:	30808426 	beq	r6,r2,3318 <___vfprintf_internal_r+0x1cd4>
    3108:	000d883a 	mov	r6,zero
    310c:	000f883a 	mov	r7,zero
    3110:	880b883a 	mov	r5,r17
    3114:	8009883a 	mov	r4,r16
    3118:	0009dac0 	call	9dac <__eqdf2>
    311c:	1000751e 	bne	r2,zero,32f4 <___vfprintf_internal_r+0x1cb0>
    3120:	9005883a 	mov	r2,r18
    3124:	dc800715 	stw	r18,28(sp)
    3128:	d9014117 	ldw	r4,1284(sp)
    312c:	d9414d17 	ldw	r5,1332(sp)
    3130:	00c019c4 	movi	r3,103
    3134:	1125c83a 	sub	r18,r2,r4
    3138:	28c06826 	beq	r5,r3,32dc <___vfprintf_internal_r+0x1c98>
    313c:	008011c4 	movi	r2,71
    3140:	28806626 	beq	r5,r2,32dc <___vfprintf_internal_r+0x1c98>
    3144:	d9000517 	ldw	r4,20(sp)
    3148:	d8c14d17 	ldw	r3,1332(sp)
    314c:	00801944 	movi	r2,101
    3150:	10c05516 	blt	r2,r3,32a8 <___vfprintf_internal_r+0x1c64>
    3154:	213fffc4 	addi	r4,r4,-1
    3158:	d9000515 	stw	r4,20(sp)
    315c:	d8c00805 	stb	r3,32(sp)
    3160:	2021883a 	mov	r16,r4
    3164:	2000c116 	blt	r4,zero,346c <___vfprintf_internal_r+0x1e28>
    3168:	00800ac4 	movi	r2,43
    316c:	d8800845 	stb	r2,33(sp)
    3170:	00800244 	movi	r2,9
    3174:	1400af0e 	bge	r2,r16,3434 <___vfprintf_internal_r+0x1df0>
    3178:	1027883a 	mov	r19,r2
    317c:	dc400b84 	addi	r17,sp,46
    3180:	8009883a 	mov	r4,r16
    3184:	01400284 	movi	r5,10
    3188:	0000a840 	call	a84 <__modsi3>
    318c:	10800c04 	addi	r2,r2,48
    3190:	8c7fffc4 	addi	r17,r17,-1
    3194:	8009883a 	mov	r4,r16
    3198:	01400284 	movi	r5,10
    319c:	88800005 	stb	r2,0(r17)
    31a0:	0000a240 	call	a24 <__divsi3>
    31a4:	1021883a 	mov	r16,r2
    31a8:	98bff516 	blt	r19,r2,3180 <___vfprintf_internal_r+0x1b3c>
    31ac:	10c00c04 	addi	r3,r2,48
    31b0:	d88009c4 	addi	r2,sp,39
    31b4:	108001c4 	addi	r2,r2,7
    31b8:	897fffc4 	addi	r5,r17,-1
    31bc:	88ffffc5 	stb	r3,-1(r17)
    31c0:	2880a72e 	bgeu	r5,r2,3460 <___vfprintf_internal_r+0x1e1c>
    31c4:	1009883a 	mov	r4,r2
    31c8:	d9800804 	addi	r6,sp,32
    31cc:	d8c00884 	addi	r3,sp,34
    31d0:	28800003 	ldbu	r2,0(r5)
    31d4:	29400044 	addi	r5,r5,1
    31d8:	18800005 	stb	r2,0(r3)
    31dc:	18c00044 	addi	r3,r3,1
    31e0:	293ffb36 	bltu	r5,r4,31d0 <___vfprintf_internal_r+0x1b8c>
    31e4:	1987c83a 	sub	r3,r3,r6
    31e8:	00800044 	movi	r2,1
    31ec:	d8c14815 	stw	r3,1312(sp)
    31f0:	90cf883a 	add	r7,r18,r3
    31f4:	1480960e 	bge	r2,r18,3450 <___vfprintf_internal_r+0x1e0c>
    31f8:	39c00044 	addi	r7,r7,1
    31fc:	d9c14515 	stw	r7,1300(sp)
    3200:	38003416 	blt	r7,zero,32d4 <___vfprintf_internal_r+0x1c90>
    3204:	e0803fcc 	andi	r2,fp,255
    3208:	1080201c 	xori	r2,r2,128
    320c:	10bfe004 	addi	r2,r2,-128
    3210:	10004e26 	beq	r2,zero,334c <___vfprintf_internal_r+0x1d08>
    3214:	00800b44 	movi	r2,45
    3218:	dc814715 	stw	r18,1308(sp)
    321c:	d8014615 	stw	zero,1304(sp)
    3220:	d8800405 	stb	r2,16(sp)
    3224:	003bab06 	br	20d4 <___vfprintf_internal_r+0xa90>
    3228:	00800b44 	movi	r2,45
    322c:	d8800405 	stb	r2,16(sp)
    3230:	003d2d06 	br	26e8 <___vfprintf_internal_r+0x10a4>
    3234:	d9014f17 	ldw	r4,1340(sp)
    3238:	b00b883a 	mov	r5,r22
    323c:	d9800c04 	addi	r6,sp,48
    3240:	00015ec0 	call	15ec <__sprint_r>
    3244:	103ab71e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x6e0>
    3248:	003ab506 	br	1d20 <___vfprintf_internal_r+0x6dc>
    324c:	38800017 	ldw	r2,0(r7)
    3250:	39c00104 	addi	r7,r7,4
    3254:	d9c14015 	stw	r7,1280(sp)
    3258:	d9414b17 	ldw	r5,1324(sp)
    325c:	d9c14017 	ldw	r7,1280(sp)
    3260:	11400015 	stw	r5,0(r2)
    3264:	00395306 	br	17b4 <___vfprintf_internal_r+0x170>
    3268:	980f883a 	mov	r7,r19
    326c:	dcc14515 	stw	r19,1300(sp)
    3270:	d8014615 	stw	zero,1304(sp)
    3274:	003b9506 	br	20cc <___vfprintf_internal_r+0xa88>
    3278:	0027883a 	mov	r19,zero
    327c:	00397206 	br	1848 <___vfprintf_internal_r+0x204>
    3280:	00c00074 	movhi	r3,1
    3284:	18f5ba04 	addi	r3,r3,-10520
    3288:	100f883a 	mov	r7,r2
    328c:	d8814515 	stw	r2,1300(sp)
    3290:	d8c14115 	stw	r3,1284(sp)
    3294:	0039da06 	br	1a00 <___vfprintf_internal_r+0x3bc>
    3298:	00800074 	movhi	r2,1
    329c:	10b5b904 	addi	r2,r2,-10524
    32a0:	d8814115 	stw	r2,1284(sp)
    32a4:	003d1606 	br	2700 <___vfprintf_internal_r+0x10bc>
    32a8:	d9414d17 	ldw	r5,1332(sp)
    32ac:	00801984 	movi	r2,102
    32b0:	28804926 	beq	r5,r2,33d8 <___vfprintf_internal_r+0x1d94>
    32b4:	200f883a 	mov	r7,r4
    32b8:	24805716 	blt	r4,r18,3418 <___vfprintf_internal_r+0x1dd4>
    32bc:	d9414c17 	ldw	r5,1328(sp)
    32c0:	2880004c 	andi	r2,r5,1
    32c4:	10000126 	beq	r2,zero,32cc <___vfprintf_internal_r+0x1c88>
    32c8:	21c00044 	addi	r7,r4,1
    32cc:	d9c14515 	stw	r7,1300(sp)
    32d0:	383fcc0e 	bge	r7,zero,3204 <___vfprintf_internal_r+0x1bc0>
    32d4:	d8014515 	stw	zero,1300(sp)
    32d8:	003fca06 	br	3204 <___vfprintf_internal_r+0x1bc0>
    32dc:	d9000517 	ldw	r4,20(sp)
    32e0:	00bfff04 	movi	r2,-4
    32e4:	1100480e 	bge	r2,r4,3408 <___vfprintf_internal_r+0x1dc4>
    32e8:	99004716 	blt	r19,r4,3408 <___vfprintf_internal_r+0x1dc4>
    32ec:	d8c14d15 	stw	r3,1332(sp)
    32f0:	003ff006 	br	32b4 <___vfprintf_internal_r+0x1c70>
    32f4:	d8800717 	ldw	r2,28(sp)
    32f8:	14bf8b2e 	bgeu	r2,r18,3128 <___vfprintf_internal_r+0x1ae4>
    32fc:	9007883a 	mov	r3,r18
    3300:	01000c04 	movi	r4,48
    3304:	11000005 	stb	r4,0(r2)
    3308:	10800044 	addi	r2,r2,1
    330c:	d8800715 	stw	r2,28(sp)
    3310:	18bffc1e 	bne	r3,r2,3304 <___vfprintf_internal_r+0x1cc0>
    3314:	003f8406 	br	3128 <___vfprintf_internal_r+0x1ae4>
    3318:	d8814117 	ldw	r2,1284(sp)
    331c:	10c00007 	ldb	r3,0(r2)
    3320:	00800c04 	movi	r2,48
    3324:	18805b26 	beq	r3,r2,3494 <___vfprintf_internal_r+0x1e50>
    3328:	d9000517 	ldw	r4,20(sp)
    332c:	9125883a 	add	r18,r18,r4
    3330:	003f7506 	br	3108 <___vfprintf_internal_r+0x1ac4>
    3334:	d9014c17 	ldw	r4,1328(sp)
    3338:	2080004c 	andi	r2,r4,1
    333c:	1005003a 	cmpeq	r2,r2,zero
    3340:	103f6a26 	beq	r2,zero,30ec <___vfprintf_internal_r+0x1aa8>
    3344:	d8800717 	ldw	r2,28(sp)
    3348:	003f7706 	br	3128 <___vfprintf_internal_r+0x1ae4>
    334c:	d9c14515 	stw	r7,1300(sp)
    3350:	38004d16 	blt	r7,zero,3488 <___vfprintf_internal_r+0x1e44>
    3354:	dc814715 	stw	r18,1308(sp)
    3358:	d8014615 	stw	zero,1304(sp)
    335c:	003b5b06 	br	20cc <___vfprintf_internal_r+0xa88>
    3360:	d9014f17 	ldw	r4,1340(sp)
    3364:	d8800504 	addi	r2,sp,20
    3368:	d8800115 	stw	r2,4(sp)
    336c:	d8c00604 	addi	r3,sp,24
    3370:	d8800704 	addi	r2,sp,28
    3374:	800b883a 	mov	r5,r16
    3378:	880d883a 	mov	r6,r17
    337c:	01c000c4 	movi	r7,3
    3380:	d8c00215 	stw	r3,8(sp)
    3384:	d8800315 	stw	r2,12(sp)
    3388:	dcc00015 	stw	r19,0(sp)
    338c:	9829883a 	mov	r20,r19
    3390:	0003a600 	call	3a60 <_dtoa_r>
    3394:	d8814115 	stw	r2,1284(sp)
    3398:	003f5106 	br	30e0 <___vfprintf_internal_r+0x1a9c>
    339c:	d8c14217 	ldw	r3,1288(sp)
    33a0:	d9014317 	ldw	r4,1292(sp)
    33a4:	07000b44 	movi	fp,45
    33a8:	1821883a 	mov	r16,r3
    33ac:	2460003c 	xorhi	r17,r4,32768
    33b0:	003f3106 	br	3078 <___vfprintf_internal_r+0x1a34>
    33b4:	9d000044 	addi	r20,r19,1
    33b8:	003f3906 	br	30a0 <___vfprintf_internal_r+0x1a5c>
    33bc:	983f251e 	bne	r19,zero,3054 <___vfprintf_internal_r+0x1a10>
    33c0:	04c00044 	movi	r19,1
    33c4:	003f2306 	br	3054 <___vfprintf_internal_r+0x1a10>
    33c8:	04c00184 	movi	r19,6
    33cc:	003f2106 	br	3054 <___vfprintf_internal_r+0x1a10>
    33d0:	d8014515 	stw	zero,1300(sp)
    33d4:	003eee06 	br	2f90 <___vfprintf_internal_r+0x194c>
    33d8:	200f883a 	mov	r7,r4
    33dc:	0100370e 	bge	zero,r4,34bc <___vfprintf_internal_r+0x1e78>
    33e0:	9800031e 	bne	r19,zero,33f0 <___vfprintf_internal_r+0x1dac>
    33e4:	d9814c17 	ldw	r6,1328(sp)
    33e8:	3080004c 	andi	r2,r6,1
    33ec:	103fb726 	beq	r2,zero,32cc <___vfprintf_internal_r+0x1c88>
    33f0:	20800044 	addi	r2,r4,1
    33f4:	98a7883a 	add	r19,r19,r2
    33f8:	dcc14515 	stw	r19,1300(sp)
    33fc:	980f883a 	mov	r7,r19
    3400:	983f800e 	bge	r19,zero,3204 <___vfprintf_internal_r+0x1bc0>
    3404:	003fb306 	br	32d4 <___vfprintf_internal_r+0x1c90>
    3408:	d9814d17 	ldw	r6,1332(sp)
    340c:	31bfff84 	addi	r6,r6,-2
    3410:	d9814d15 	stw	r6,1332(sp)
    3414:	003f4c06 	br	3148 <___vfprintf_internal_r+0x1b04>
    3418:	0100180e 	bge	zero,r4,347c <___vfprintf_internal_r+0x1e38>
    341c:	00800044 	movi	r2,1
    3420:	1485883a 	add	r2,r2,r18
    3424:	d8814515 	stw	r2,1300(sp)
    3428:	100f883a 	mov	r7,r2
    342c:	103f750e 	bge	r2,zero,3204 <___vfprintf_internal_r+0x1bc0>
    3430:	003fa806 	br	32d4 <___vfprintf_internal_r+0x1c90>
    3434:	80c00c04 	addi	r3,r16,48
    3438:	00800c04 	movi	r2,48
    343c:	d8c008c5 	stb	r3,35(sp)
    3440:	d9800804 	addi	r6,sp,32
    3444:	d8c00904 	addi	r3,sp,36
    3448:	d8800885 	stb	r2,34(sp)
    344c:	003f6506 	br	31e4 <___vfprintf_internal_r+0x1ba0>
    3450:	d9014c17 	ldw	r4,1328(sp)
    3454:	2084703a 	and	r2,r4,r2
    3458:	103f9c26 	beq	r2,zero,32cc <___vfprintf_internal_r+0x1c88>
    345c:	003f6606 	br	31f8 <___vfprintf_internal_r+0x1bb4>
    3460:	d9800804 	addi	r6,sp,32
    3464:	d8c00884 	addi	r3,sp,34
    3468:	003f5e06 	br	31e4 <___vfprintf_internal_r+0x1ba0>
    346c:	00800b44 	movi	r2,45
    3470:	0121c83a 	sub	r16,zero,r4
    3474:	d8800845 	stb	r2,33(sp)
    3478:	003f3d06 	br	3170 <___vfprintf_internal_r+0x1b2c>
    347c:	00800084 	movi	r2,2
    3480:	1105c83a 	sub	r2,r2,r4
    3484:	003fe606 	br	3420 <___vfprintf_internal_r+0x1ddc>
    3488:	d8014515 	stw	zero,1300(sp)
    348c:	dc814715 	stw	r18,1308(sp)
    3490:	003fb106 	br	3358 <___vfprintf_internal_r+0x1d14>
    3494:	000d883a 	mov	r6,zero
    3498:	000f883a 	mov	r7,zero
    349c:	8009883a 	mov	r4,r16
    34a0:	880b883a 	mov	r5,r17
    34a4:	0009e340 	call	9e34 <__nedf2>
    34a8:	103f9f26 	beq	r2,zero,3328 <___vfprintf_internal_r+0x1ce4>
    34ac:	00800044 	movi	r2,1
    34b0:	1509c83a 	sub	r4,r2,r20
    34b4:	d9000515 	stw	r4,20(sp)
    34b8:	003f9b06 	br	3328 <___vfprintf_internal_r+0x1ce4>
    34bc:	98000d1e 	bne	r19,zero,34f4 <___vfprintf_internal_r+0x1eb0>
    34c0:	d8c14c17 	ldw	r3,1328(sp)
    34c4:	1880004c 	andi	r2,r3,1
    34c8:	10000a1e 	bne	r2,zero,34f4 <___vfprintf_internal_r+0x1eb0>
    34cc:	01000044 	movi	r4,1
    34d0:	200f883a 	mov	r7,r4
    34d4:	d9014515 	stw	r4,1300(sp)
    34d8:	003f4a06 	br	3204 <___vfprintf_internal_r+0x1bc0>
    34dc:	3cc00017 	ldw	r19,0(r7)
    34e0:	39c00104 	addi	r7,r7,4
    34e4:	983d0e0e 	bge	r19,zero,2920 <___vfprintf_internal_r+0x12dc>
    34e8:	b8c00007 	ldb	r3,0(r23)
    34ec:	04ffffc4 	movi	r19,-1
    34f0:	0038d306 	br	1840 <___vfprintf_internal_r+0x1fc>
    34f4:	9cc00084 	addi	r19,r19,2
    34f8:	dcc14515 	stw	r19,1300(sp)
    34fc:	980f883a 	mov	r7,r19
    3500:	983f400e 	bge	r19,zero,3204 <___vfprintf_internal_r+0x1bc0>
    3504:	003f7306 	br	32d4 <___vfprintf_internal_r+0x1c90>

00003508 <__vfprintf_internal>:
    3508:	00800074 	movhi	r2,1
    350c:	10bd0504 	addi	r2,r2,-3052
    3510:	2013883a 	mov	r9,r4
    3514:	11000017 	ldw	r4,0(r2)
    3518:	2805883a 	mov	r2,r5
    351c:	300f883a 	mov	r7,r6
    3520:	480b883a 	mov	r5,r9
    3524:	100d883a 	mov	r6,r2
    3528:	00016441 	jmpi	1644 <___vfprintf_internal_r>

0000352c <__swsetup_r>:
    352c:	00800074 	movhi	r2,1
    3530:	10bd0504 	addi	r2,r2,-3052
    3534:	10c00017 	ldw	r3,0(r2)
    3538:	defffd04 	addi	sp,sp,-12
    353c:	dc400115 	stw	r17,4(sp)
    3540:	dc000015 	stw	r16,0(sp)
    3544:	dfc00215 	stw	ra,8(sp)
    3548:	2023883a 	mov	r17,r4
    354c:	2821883a 	mov	r16,r5
    3550:	18000226 	beq	r3,zero,355c <__swsetup_r+0x30>
    3554:	18800e17 	ldw	r2,56(r3)
    3558:	10001f26 	beq	r2,zero,35d8 <__swsetup_r+0xac>
    355c:	8100030b 	ldhu	r4,12(r16)
    3560:	2080020c 	andi	r2,r4,8
    3564:	10002826 	beq	r2,zero,3608 <__swsetup_r+0xdc>
    3568:	81400417 	ldw	r5,16(r16)
    356c:	28001d26 	beq	r5,zero,35e4 <__swsetup_r+0xb8>
    3570:	2080004c 	andi	r2,r4,1
    3574:	1005003a 	cmpeq	r2,r2,zero
    3578:	10000b26 	beq	r2,zero,35a8 <__swsetup_r+0x7c>
    357c:	2080008c 	andi	r2,r4,2
    3580:	10001226 	beq	r2,zero,35cc <__swsetup_r+0xa0>
    3584:	0005883a 	mov	r2,zero
    3588:	80800215 	stw	r2,8(r16)
    358c:	28000b26 	beq	r5,zero,35bc <__swsetup_r+0x90>
    3590:	0005883a 	mov	r2,zero
    3594:	dfc00217 	ldw	ra,8(sp)
    3598:	dc400117 	ldw	r17,4(sp)
    359c:	dc000017 	ldw	r16,0(sp)
    35a0:	dec00304 	addi	sp,sp,12
    35a4:	f800283a 	ret
    35a8:	80800517 	ldw	r2,20(r16)
    35ac:	80000215 	stw	zero,8(r16)
    35b0:	0085c83a 	sub	r2,zero,r2
    35b4:	80800615 	stw	r2,24(r16)
    35b8:	283ff51e 	bne	r5,zero,3590 <__swsetup_r+0x64>
    35bc:	2080200c 	andi	r2,r4,128
    35c0:	103ff326 	beq	r2,zero,3590 <__swsetup_r+0x64>
    35c4:	00bfffc4 	movi	r2,-1
    35c8:	003ff206 	br	3594 <__swsetup_r+0x68>
    35cc:	80800517 	ldw	r2,20(r16)
    35d0:	80800215 	stw	r2,8(r16)
    35d4:	003fed06 	br	358c <__swsetup_r+0x60>
    35d8:	1809883a 	mov	r4,r3
    35dc:	00052ac0 	call	52ac <__sinit>
    35e0:	003fde06 	br	355c <__swsetup_r+0x30>
    35e4:	20c0a00c 	andi	r3,r4,640
    35e8:	00808004 	movi	r2,512
    35ec:	18bfe026 	beq	r3,r2,3570 <__swsetup_r+0x44>
    35f0:	8809883a 	mov	r4,r17
    35f4:	800b883a 	mov	r5,r16
    35f8:	00060580 	call	6058 <__smakebuf_r>
    35fc:	8100030b 	ldhu	r4,12(r16)
    3600:	81400417 	ldw	r5,16(r16)
    3604:	003fda06 	br	3570 <__swsetup_r+0x44>
    3608:	2080040c 	andi	r2,r4,16
    360c:	103fed26 	beq	r2,zero,35c4 <__swsetup_r+0x98>
    3610:	2080010c 	andi	r2,r4,4
    3614:	10001226 	beq	r2,zero,3660 <__swsetup_r+0x134>
    3618:	81400c17 	ldw	r5,48(r16)
    361c:	28000526 	beq	r5,zero,3634 <__swsetup_r+0x108>
    3620:	80801004 	addi	r2,r16,64
    3624:	28800226 	beq	r5,r2,3630 <__swsetup_r+0x104>
    3628:	8809883a 	mov	r4,r17
    362c:	00056640 	call	5664 <_free_r>
    3630:	80000c15 	stw	zero,48(r16)
    3634:	8080030b 	ldhu	r2,12(r16)
    3638:	81400417 	ldw	r5,16(r16)
    363c:	80000115 	stw	zero,4(r16)
    3640:	10bff6cc 	andi	r2,r2,65499
    3644:	8080030d 	sth	r2,12(r16)
    3648:	81400015 	stw	r5,0(r16)
    364c:	8080030b 	ldhu	r2,12(r16)
    3650:	10800214 	ori	r2,r2,8
    3654:	113fffcc 	andi	r4,r2,65535
    3658:	8080030d 	sth	r2,12(r16)
    365c:	003fc306 	br	356c <__swsetup_r+0x40>
    3660:	81400417 	ldw	r5,16(r16)
    3664:	003ff906 	br	364c <__swsetup_r+0x120>

00003668 <register_fini>:
    3668:	f800283a 	ret

0000366c <__call_exitprocs>:
    366c:	00800074 	movhi	r2,1
    3670:	10bd0604 	addi	r2,r2,-3048
    3674:	10800017 	ldw	r2,0(r2)
    3678:	defff304 	addi	sp,sp,-52
    367c:	df000b15 	stw	fp,44(sp)
    3680:	d8800115 	stw	r2,4(sp)
    3684:	00800034 	movhi	r2,0
    3688:	10831404 	addi	r2,r2,3152
    368c:	1005003a 	cmpeq	r2,r2,zero
    3690:	d8800215 	stw	r2,8(sp)
    3694:	d8800117 	ldw	r2,4(sp)
    3698:	dd400815 	stw	r21,32(sp)
    369c:	dd000715 	stw	r20,28(sp)
    36a0:	10805204 	addi	r2,r2,328
    36a4:	dfc00c15 	stw	ra,48(sp)
    36a8:	ddc00a15 	stw	r23,40(sp)
    36ac:	dd800915 	stw	r22,36(sp)
    36b0:	dcc00615 	stw	r19,24(sp)
    36b4:	dc800515 	stw	r18,20(sp)
    36b8:	dc400415 	stw	r17,16(sp)
    36bc:	dc000315 	stw	r16,12(sp)
    36c0:	282b883a 	mov	r21,r5
    36c4:	2039883a 	mov	fp,r4
    36c8:	d8800015 	stw	r2,0(sp)
    36cc:	2829003a 	cmpeq	r20,r5,zero
    36d0:	d8800117 	ldw	r2,4(sp)
    36d4:	14405217 	ldw	r17,328(r2)
    36d8:	88001026 	beq	r17,zero,371c <__call_exitprocs+0xb0>
    36dc:	ddc00017 	ldw	r23,0(sp)
    36e0:	88800117 	ldw	r2,4(r17)
    36e4:	8c802204 	addi	r18,r17,136
    36e8:	143fffc4 	addi	r16,r2,-1
    36ec:	80000916 	blt	r16,zero,3714 <__call_exitprocs+0xa8>
    36f0:	05bfffc4 	movi	r22,-1
    36f4:	a000151e 	bne	r20,zero,374c <__call_exitprocs+0xe0>
    36f8:	8409883a 	add	r4,r16,r16
    36fc:	2105883a 	add	r2,r4,r4
    3700:	1485883a 	add	r2,r2,r18
    3704:	10c02017 	ldw	r3,128(r2)
    3708:	a8c01126 	beq	r21,r3,3750 <__call_exitprocs+0xe4>
    370c:	843fffc4 	addi	r16,r16,-1
    3710:	85bff81e 	bne	r16,r22,36f4 <__call_exitprocs+0x88>
    3714:	d8800217 	ldw	r2,8(sp)
    3718:	10003126 	beq	r2,zero,37e0 <__call_exitprocs+0x174>
    371c:	dfc00c17 	ldw	ra,48(sp)
    3720:	df000b17 	ldw	fp,44(sp)
    3724:	ddc00a17 	ldw	r23,40(sp)
    3728:	dd800917 	ldw	r22,36(sp)
    372c:	dd400817 	ldw	r21,32(sp)
    3730:	dd000717 	ldw	r20,28(sp)
    3734:	dcc00617 	ldw	r19,24(sp)
    3738:	dc800517 	ldw	r18,20(sp)
    373c:	dc400417 	ldw	r17,16(sp)
    3740:	dc000317 	ldw	r16,12(sp)
    3744:	dec00d04 	addi	sp,sp,52
    3748:	f800283a 	ret
    374c:	8409883a 	add	r4,r16,r16
    3750:	88c00117 	ldw	r3,4(r17)
    3754:	2105883a 	add	r2,r4,r4
    3758:	1445883a 	add	r2,r2,r17
    375c:	18ffffc4 	addi	r3,r3,-1
    3760:	11800217 	ldw	r6,8(r2)
    3764:	1c001526 	beq	r3,r16,37bc <__call_exitprocs+0x150>
    3768:	10000215 	stw	zero,8(r2)
    376c:	303fe726 	beq	r6,zero,370c <__call_exitprocs+0xa0>
    3770:	00c00044 	movi	r3,1
    3774:	1c06983a 	sll	r3,r3,r16
    3778:	90804017 	ldw	r2,256(r18)
    377c:	8cc00117 	ldw	r19,4(r17)
    3780:	1884703a 	and	r2,r3,r2
    3784:	10001426 	beq	r2,zero,37d8 <__call_exitprocs+0x16c>
    3788:	90804117 	ldw	r2,260(r18)
    378c:	1884703a 	and	r2,r3,r2
    3790:	10000c1e 	bne	r2,zero,37c4 <__call_exitprocs+0x158>
    3794:	2105883a 	add	r2,r4,r4
    3798:	1485883a 	add	r2,r2,r18
    379c:	11400017 	ldw	r5,0(r2)
    37a0:	e009883a 	mov	r4,fp
    37a4:	303ee83a 	callr	r6
    37a8:	88800117 	ldw	r2,4(r17)
    37ac:	98bfc81e 	bne	r19,r2,36d0 <__call_exitprocs+0x64>
    37b0:	b8800017 	ldw	r2,0(r23)
    37b4:	147fd526 	beq	r2,r17,370c <__call_exitprocs+0xa0>
    37b8:	003fc506 	br	36d0 <__call_exitprocs+0x64>
    37bc:	8c000115 	stw	r16,4(r17)
    37c0:	003fea06 	br	376c <__call_exitprocs+0x100>
    37c4:	2105883a 	add	r2,r4,r4
    37c8:	1485883a 	add	r2,r2,r18
    37cc:	11000017 	ldw	r4,0(r2)
    37d0:	303ee83a 	callr	r6
    37d4:	003ff406 	br	37a8 <__call_exitprocs+0x13c>
    37d8:	303ee83a 	callr	r6
    37dc:	003ff206 	br	37a8 <__call_exitprocs+0x13c>
    37e0:	88800117 	ldw	r2,4(r17)
    37e4:	1000081e 	bne	r2,zero,3808 <__call_exitprocs+0x19c>
    37e8:	89000017 	ldw	r4,0(r17)
    37ec:	20000726 	beq	r4,zero,380c <__call_exitprocs+0x1a0>
    37f0:	b9000015 	stw	r4,0(r23)
    37f4:	8809883a 	mov	r4,r17
    37f8:	0000c500 	call	c50 <free>
    37fc:	bc400017 	ldw	r17,0(r23)
    3800:	883fb71e 	bne	r17,zero,36e0 <__call_exitprocs+0x74>
    3804:	003fc506 	br	371c <__call_exitprocs+0xb0>
    3808:	89000017 	ldw	r4,0(r17)
    380c:	882f883a 	mov	r23,r17
    3810:	2023883a 	mov	r17,r4
    3814:	883fb21e 	bne	r17,zero,36e0 <__call_exitprocs+0x74>
    3818:	003fc006 	br	371c <__call_exitprocs+0xb0>

0000381c <quorem>:
    381c:	28c00417 	ldw	r3,16(r5)
    3820:	20800417 	ldw	r2,16(r4)
    3824:	defff104 	addi	sp,sp,-60
    3828:	dfc00e15 	stw	ra,56(sp)
    382c:	df000d15 	stw	fp,52(sp)
    3830:	ddc00c15 	stw	r23,48(sp)
    3834:	dd800b15 	stw	r22,44(sp)
    3838:	dd400a15 	stw	r21,40(sp)
    383c:	dd000915 	stw	r20,36(sp)
    3840:	dcc00815 	stw	r19,32(sp)
    3844:	dc800715 	stw	r18,28(sp)
    3848:	dc400615 	stw	r17,24(sp)
    384c:	dc000515 	stw	r16,20(sp)
    3850:	d9000315 	stw	r4,12(sp)
    3854:	d9400415 	stw	r5,16(sp)
    3858:	10c07f16 	blt	r2,r3,3a58 <quorem+0x23c>
    385c:	1d3fffc4 	addi	r20,r3,-1
    3860:	d8c00417 	ldw	r3,16(sp)
    3864:	d9000317 	ldw	r4,12(sp)
    3868:	a505883a 	add	r2,r20,r20
    386c:	1085883a 	add	r2,r2,r2
    3870:	1cc00504 	addi	r19,r3,20
    3874:	25c00504 	addi	r23,r4,20
    3878:	98ad883a 	add	r22,r19,r2
    387c:	15c7883a 	add	r3,r2,r23
    3880:	b1400017 	ldw	r5,0(r22)
    3884:	19000017 	ldw	r4,0(r3)
    3888:	d8c00015 	stw	r3,0(sp)
    388c:	29400044 	addi	r5,r5,1
    3890:	d9000215 	stw	r4,8(sp)
    3894:	0000ae40 	call	ae4 <__udivsi3>
    3898:	1039883a 	mov	fp,r2
    389c:	10003d1e 	bne	r2,zero,3994 <quorem+0x178>
    38a0:	d9400417 	ldw	r5,16(sp)
    38a4:	d9000317 	ldw	r4,12(sp)
    38a8:	00066440 	call	6644 <__mcmp>
    38ac:	10002c16 	blt	r2,zero,3960 <quorem+0x144>
    38b0:	e7000044 	addi	fp,fp,1
    38b4:	b80f883a 	mov	r7,r23
    38b8:	0011883a 	mov	r8,zero
    38bc:	0009883a 	mov	r4,zero
    38c0:	99400017 	ldw	r5,0(r19)
    38c4:	38c00017 	ldw	r3,0(r7)
    38c8:	9cc00104 	addi	r19,r19,4
    38cc:	28bfffcc 	andi	r2,r5,65535
    38d0:	2085883a 	add	r2,r4,r2
    38d4:	11bfffcc 	andi	r6,r2,65535
    38d8:	193fffcc 	andi	r4,r3,65535
    38dc:	1004d43a 	srli	r2,r2,16
    38e0:	280ad43a 	srli	r5,r5,16
    38e4:	2189c83a 	sub	r4,r4,r6
    38e8:	2209883a 	add	r4,r4,r8
    38ec:	1806d43a 	srli	r3,r3,16
    38f0:	288b883a 	add	r5,r5,r2
    38f4:	200dd43a 	srai	r6,r4,16
    38f8:	28bfffcc 	andi	r2,r5,65535
    38fc:	1887c83a 	sub	r3,r3,r2
    3900:	1987883a 	add	r3,r3,r6
    3904:	3900000d 	sth	r4,0(r7)
    3908:	38c0008d 	sth	r3,2(r7)
    390c:	2808d43a 	srli	r4,r5,16
    3910:	39c00104 	addi	r7,r7,4
    3914:	1811d43a 	srai	r8,r3,16
    3918:	b4ffe92e 	bgeu	r22,r19,38c0 <quorem+0xa4>
    391c:	a505883a 	add	r2,r20,r20
    3920:	1085883a 	add	r2,r2,r2
    3924:	b885883a 	add	r2,r23,r2
    3928:	10c00017 	ldw	r3,0(r2)
    392c:	18000c1e 	bne	r3,zero,3960 <quorem+0x144>
    3930:	113fff04 	addi	r4,r2,-4
    3934:	b900082e 	bgeu	r23,r4,3958 <quorem+0x13c>
    3938:	10bfff17 	ldw	r2,-4(r2)
    393c:	10000326 	beq	r2,zero,394c <quorem+0x130>
    3940:	00000506 	br	3958 <quorem+0x13c>
    3944:	20800017 	ldw	r2,0(r4)
    3948:	1000031e 	bne	r2,zero,3958 <quorem+0x13c>
    394c:	213fff04 	addi	r4,r4,-4
    3950:	a53fffc4 	addi	r20,r20,-1
    3954:	b93ffb36 	bltu	r23,r4,3944 <quorem+0x128>
    3958:	d9000317 	ldw	r4,12(sp)
    395c:	25000415 	stw	r20,16(r4)
    3960:	e005883a 	mov	r2,fp
    3964:	dfc00e17 	ldw	ra,56(sp)
    3968:	df000d17 	ldw	fp,52(sp)
    396c:	ddc00c17 	ldw	r23,48(sp)
    3970:	dd800b17 	ldw	r22,44(sp)
    3974:	dd400a17 	ldw	r21,40(sp)
    3978:	dd000917 	ldw	r20,36(sp)
    397c:	dcc00817 	ldw	r19,32(sp)
    3980:	dc800717 	ldw	r18,28(sp)
    3984:	dc400617 	ldw	r17,24(sp)
    3988:	dc000517 	ldw	r16,20(sp)
    398c:	dec00f04 	addi	sp,sp,60
    3990:	f800283a 	ret
    3994:	b823883a 	mov	r17,r23
    3998:	9825883a 	mov	r18,r19
    399c:	d8000115 	stw	zero,4(sp)
    39a0:	002b883a 	mov	r21,zero
    39a4:	94000017 	ldw	r16,0(r18)
    39a8:	e009883a 	mov	r4,fp
    39ac:	94800104 	addi	r18,r18,4
    39b0:	817fffcc 	andi	r5,r16,65535
    39b4:	0000af40 	call	af4 <__mulsi3>
    39b8:	800ad43a 	srli	r5,r16,16
    39bc:	e009883a 	mov	r4,fp
    39c0:	a8a1883a 	add	r16,r21,r2
    39c4:	0000af40 	call	af4 <__mulsi3>
    39c8:	89000017 	ldw	r4,0(r17)
    39cc:	80ffffcc 	andi	r3,r16,65535
    39d0:	8020d43a 	srli	r16,r16,16
    39d4:	217fffcc 	andi	r5,r4,65535
    39d8:	28cbc83a 	sub	r5,r5,r3
    39dc:	d8c00117 	ldw	r3,4(sp)
    39e0:	2008d43a 	srli	r4,r4,16
    39e4:	1405883a 	add	r2,r2,r16
    39e8:	28cb883a 	add	r5,r5,r3
    39ec:	280dd43a 	srai	r6,r5,16
    39f0:	10ffffcc 	andi	r3,r2,65535
    39f4:	20c9c83a 	sub	r4,r4,r3
    39f8:	2189883a 	add	r4,r4,r6
    39fc:	8900008d 	sth	r4,2(r17)
    3a00:	2009d43a 	srai	r4,r4,16
    3a04:	8940000d 	sth	r5,0(r17)
    3a08:	102ad43a 	srli	r21,r2,16
    3a0c:	8c400104 	addi	r17,r17,4
    3a10:	d9000115 	stw	r4,4(sp)
    3a14:	b4bfe32e 	bgeu	r22,r18,39a4 <quorem+0x188>
    3a18:	d9000217 	ldw	r4,8(sp)
    3a1c:	203fa01e 	bne	r4,zero,38a0 <quorem+0x84>
    3a20:	d8800017 	ldw	r2,0(sp)
    3a24:	10ffff04 	addi	r3,r2,-4
    3a28:	b8c0082e 	bgeu	r23,r3,3a4c <quorem+0x230>
    3a2c:	10bfff17 	ldw	r2,-4(r2)
    3a30:	10000326 	beq	r2,zero,3a40 <quorem+0x224>
    3a34:	00000506 	br	3a4c <quorem+0x230>
    3a38:	18800017 	ldw	r2,0(r3)
    3a3c:	1000031e 	bne	r2,zero,3a4c <quorem+0x230>
    3a40:	18ffff04 	addi	r3,r3,-4
    3a44:	a53fffc4 	addi	r20,r20,-1
    3a48:	b8fffb36 	bltu	r23,r3,3a38 <quorem+0x21c>
    3a4c:	d8c00317 	ldw	r3,12(sp)
    3a50:	1d000415 	stw	r20,16(r3)
    3a54:	003f9206 	br	38a0 <quorem+0x84>
    3a58:	0005883a 	mov	r2,zero
    3a5c:	003fc106 	br	3964 <quorem+0x148>

00003a60 <_dtoa_r>:
    3a60:	22001017 	ldw	r8,64(r4)
    3a64:	deffda04 	addi	sp,sp,-152
    3a68:	dd402115 	stw	r21,132(sp)
    3a6c:	dd002015 	stw	r20,128(sp)
    3a70:	dc801e15 	stw	r18,120(sp)
    3a74:	dc401d15 	stw	r17,116(sp)
    3a78:	dfc02515 	stw	ra,148(sp)
    3a7c:	df002415 	stw	fp,144(sp)
    3a80:	ddc02315 	stw	r23,140(sp)
    3a84:	dd802215 	stw	r22,136(sp)
    3a88:	dcc01f15 	stw	r19,124(sp)
    3a8c:	dc001c15 	stw	r16,112(sp)
    3a90:	d9001615 	stw	r4,88(sp)
    3a94:	3023883a 	mov	r17,r6
    3a98:	2829883a 	mov	r20,r5
    3a9c:	d9c01715 	stw	r7,92(sp)
    3aa0:	dc802817 	ldw	r18,160(sp)
    3aa4:	302b883a 	mov	r21,r6
    3aa8:	40000a26 	beq	r8,zero,3ad4 <_dtoa_r+0x74>
    3aac:	20801117 	ldw	r2,68(r4)
    3ab0:	400b883a 	mov	r5,r8
    3ab4:	40800115 	stw	r2,4(r8)
    3ab8:	20c01117 	ldw	r3,68(r4)
    3abc:	00800044 	movi	r2,1
    3ac0:	10c4983a 	sll	r2,r2,r3
    3ac4:	40800215 	stw	r2,8(r8)
    3ac8:	00064e80 	call	64e8 <_Bfree>
    3acc:	d8c01617 	ldw	r3,88(sp)
    3ad0:	18001015 	stw	zero,64(r3)
    3ad4:	8800a316 	blt	r17,zero,3d64 <_dtoa_r+0x304>
    3ad8:	90000015 	stw	zero,0(r18)
    3adc:	a8dffc2c 	andhi	r3,r21,32752
    3ae0:	009ffc34 	movhi	r2,32752
    3ae4:	18809126 	beq	r3,r2,3d2c <_dtoa_r+0x2cc>
    3ae8:	000d883a 	mov	r6,zero
    3aec:	000f883a 	mov	r7,zero
    3af0:	a009883a 	mov	r4,r20
    3af4:	a80b883a 	mov	r5,r21
    3af8:	dd001215 	stw	r20,72(sp)
    3afc:	dd401315 	stw	r21,76(sp)
    3b00:	0009e340 	call	9e34 <__nedf2>
    3b04:	1000171e 	bne	r2,zero,3b64 <_dtoa_r+0x104>
    3b08:	d9802717 	ldw	r6,156(sp)
    3b0c:	00800044 	movi	r2,1
    3b10:	30800015 	stw	r2,0(r6)
    3b14:	d8802917 	ldw	r2,164(sp)
    3b18:	10029b26 	beq	r2,zero,4588 <_dtoa_r+0xb28>
    3b1c:	d9002917 	ldw	r4,164(sp)
    3b20:	00800074 	movhi	r2,1
    3b24:	10b5c844 	addi	r2,r2,-10463
    3b28:	10ffffc4 	addi	r3,r2,-1
    3b2c:	20800015 	stw	r2,0(r4)
    3b30:	1805883a 	mov	r2,r3
    3b34:	dfc02517 	ldw	ra,148(sp)
    3b38:	df002417 	ldw	fp,144(sp)
    3b3c:	ddc02317 	ldw	r23,140(sp)
    3b40:	dd802217 	ldw	r22,136(sp)
    3b44:	dd402117 	ldw	r21,132(sp)
    3b48:	dd002017 	ldw	r20,128(sp)
    3b4c:	dcc01f17 	ldw	r19,124(sp)
    3b50:	dc801e17 	ldw	r18,120(sp)
    3b54:	dc401d17 	ldw	r17,116(sp)
    3b58:	dc001c17 	ldw	r16,112(sp)
    3b5c:	dec02604 	addi	sp,sp,152
    3b60:	f800283a 	ret
    3b64:	d9001617 	ldw	r4,88(sp)
    3b68:	d9401217 	ldw	r5,72(sp)
    3b6c:	d8800104 	addi	r2,sp,4
    3b70:	a80d883a 	mov	r6,r21
    3b74:	d9c00204 	addi	r7,sp,8
    3b78:	d8800015 	stw	r2,0(sp)
    3b7c:	0006b240 	call	6b24 <__d2b>
    3b80:	d8800715 	stw	r2,28(sp)
    3b84:	a804d53a 	srli	r2,r21,20
    3b88:	1101ffcc 	andi	r4,r2,2047
    3b8c:	20008626 	beq	r4,zero,3da8 <_dtoa_r+0x348>
    3b90:	d8c01217 	ldw	r3,72(sp)
    3b94:	00800434 	movhi	r2,16
    3b98:	10bfffc4 	addi	r2,r2,-1
    3b9c:	ddc00117 	ldw	r23,4(sp)
    3ba0:	a884703a 	and	r2,r21,r2
    3ba4:	1811883a 	mov	r8,r3
    3ba8:	124ffc34 	orhi	r9,r2,16368
    3bac:	25bf0044 	addi	r22,r4,-1023
    3bb0:	d8000815 	stw	zero,32(sp)
    3bb4:	0005883a 	mov	r2,zero
    3bb8:	00cffe34 	movhi	r3,16376
    3bbc:	480b883a 	mov	r5,r9
    3bc0:	4009883a 	mov	r4,r8
    3bc4:	180f883a 	mov	r7,r3
    3bc8:	100d883a 	mov	r6,r2
    3bcc:	000969c0 	call	969c <__subdf3>
    3bd0:	0218dbf4 	movhi	r8,25455
    3bd4:	4210d844 	addi	r8,r8,17249
    3bd8:	024ff4f4 	movhi	r9,16339
    3bdc:	4a61e9c4 	addi	r9,r9,-30809
    3be0:	480f883a 	mov	r7,r9
    3be4:	400d883a 	mov	r6,r8
    3be8:	180b883a 	mov	r5,r3
    3bec:	1009883a 	mov	r4,r2
    3bf0:	00097900 	call	9790 <__muldf3>
    3bf4:	0222d874 	movhi	r8,35681
    3bf8:	42322cc4 	addi	r8,r8,-14157
    3bfc:	024ff1f4 	movhi	r9,16327
    3c00:	4a628a04 	addi	r9,r9,-30168
    3c04:	480f883a 	mov	r7,r9
    3c08:	400d883a 	mov	r6,r8
    3c0c:	180b883a 	mov	r5,r3
    3c10:	1009883a 	mov	r4,r2
    3c14:	000971c0 	call	971c <__adddf3>
    3c18:	b009883a 	mov	r4,r22
    3c1c:	1021883a 	mov	r16,r2
    3c20:	1823883a 	mov	r17,r3
    3c24:	000a0540 	call	a054 <__floatsidf>
    3c28:	021427f4 	movhi	r8,20639
    3c2c:	421e7ec4 	addi	r8,r8,31227
    3c30:	024ff4f4 	movhi	r9,16339
    3c34:	4a5104c4 	addi	r9,r9,17427
    3c38:	480f883a 	mov	r7,r9
    3c3c:	400d883a 	mov	r6,r8
    3c40:	180b883a 	mov	r5,r3
    3c44:	1009883a 	mov	r4,r2
    3c48:	00097900 	call	9790 <__muldf3>
    3c4c:	180f883a 	mov	r7,r3
    3c50:	880b883a 	mov	r5,r17
    3c54:	100d883a 	mov	r6,r2
    3c58:	8009883a 	mov	r4,r16
    3c5c:	000971c0 	call	971c <__adddf3>
    3c60:	1009883a 	mov	r4,r2
    3c64:	180b883a 	mov	r5,r3
    3c68:	1021883a 	mov	r16,r2
    3c6c:	1823883a 	mov	r17,r3
    3c70:	000a14c0 	call	a14c <__fixdfsi>
    3c74:	000d883a 	mov	r6,zero
    3c78:	000f883a 	mov	r7,zero
    3c7c:	8009883a 	mov	r4,r16
    3c80:	880b883a 	mov	r5,r17
    3c84:	d8800d15 	stw	r2,52(sp)
    3c88:	0009fcc0 	call	9fcc <__ltdf2>
    3c8c:	10031716 	blt	r2,zero,48ec <_dtoa_r+0xe8c>
    3c90:	d8c00d17 	ldw	r3,52(sp)
    3c94:	00800584 	movi	r2,22
    3c98:	10c1482e 	bgeu	r2,r3,41bc <_dtoa_r+0x75c>
    3c9c:	01000044 	movi	r4,1
    3ca0:	d9000c15 	stw	r4,48(sp)
    3ca4:	bd85c83a 	sub	r2,r23,r22
    3ca8:	11bfffc4 	addi	r6,r2,-1
    3cac:	30030b16 	blt	r6,zero,48dc <_dtoa_r+0xe7c>
    3cb0:	d9800a15 	stw	r6,40(sp)
    3cb4:	d8001115 	stw	zero,68(sp)
    3cb8:	d8c00d17 	ldw	r3,52(sp)
    3cbc:	1802ff16 	blt	r3,zero,48bc <_dtoa_r+0xe5c>
    3cc0:	d9000a17 	ldw	r4,40(sp)
    3cc4:	d8c00915 	stw	r3,36(sp)
    3cc8:	d8001015 	stw	zero,64(sp)
    3ccc:	20c9883a 	add	r4,r4,r3
    3cd0:	d9000a15 	stw	r4,40(sp)
    3cd4:	d9001717 	ldw	r4,92(sp)
    3cd8:	00800244 	movi	r2,9
    3cdc:	11004636 	bltu	r2,r4,3df8 <_dtoa_r+0x398>
    3ce0:	00800144 	movi	r2,5
    3ce4:	11020416 	blt	r2,r4,44f8 <_dtoa_r+0xa98>
    3ce8:	04400044 	movi	r17,1
    3cec:	d8c01717 	ldw	r3,92(sp)
    3cf0:	00800144 	movi	r2,5
    3cf4:	10c1ed36 	bltu	r2,r3,44ac <_dtoa_r+0xa4c>
    3cf8:	18c5883a 	add	r2,r3,r3
    3cfc:	1085883a 	add	r2,r2,r2
    3d00:	00c00034 	movhi	r3,0
    3d04:	18cf4504 	addi	r3,r3,15636
    3d08:	10c5883a 	add	r2,r2,r3
    3d0c:	11000017 	ldw	r4,0(r2)
    3d10:	2000683a 	jmp	r4
    3d14:	00003e00 	call	3e0 <queuePrint+0x8>
    3d18:	00003e00 	call	3e0 <queuePrint+0x8>
    3d1c:	00004800 	call	480 <queuePrint+0xa8>
    3d20:	000047d8 	cmpnei	zero,zero,287
    3d24:	0000481c 	xori	zero,zero,288
    3d28:	00004828 	cmpgeui	zero,zero,288
    3d2c:	d9002717 	ldw	r4,156(sp)
    3d30:	0089c3c4 	movi	r2,9999
    3d34:	20800015 	stw	r2,0(r4)
    3d38:	a0001026 	beq	r20,zero,3d7c <_dtoa_r+0x31c>
    3d3c:	00c00074 	movhi	r3,1
    3d40:	18f5d404 	addi	r3,r3,-10416
    3d44:	d9802917 	ldw	r6,164(sp)
    3d48:	303f7926 	beq	r6,zero,3b30 <_dtoa_r+0xd0>
    3d4c:	188000c7 	ldb	r2,3(r3)
    3d50:	190000c4 	addi	r4,r3,3
    3d54:	1000101e 	bne	r2,zero,3d98 <_dtoa_r+0x338>
    3d58:	d8802917 	ldw	r2,164(sp)
    3d5c:	11000015 	stw	r4,0(r2)
    3d60:	003f7306 	br	3b30 <_dtoa_r+0xd0>
    3d64:	00a00034 	movhi	r2,32768
    3d68:	10bfffc4 	addi	r2,r2,-1
    3d6c:	00c00044 	movi	r3,1
    3d70:	88aa703a 	and	r21,r17,r2
    3d74:	90c00015 	stw	r3,0(r18)
    3d78:	003f5806 	br	3adc <_dtoa_r+0x7c>
    3d7c:	00800434 	movhi	r2,16
    3d80:	10bfffc4 	addi	r2,r2,-1
    3d84:	a884703a 	and	r2,r21,r2
    3d88:	103fec1e 	bne	r2,zero,3d3c <_dtoa_r+0x2dc>
    3d8c:	00c00074 	movhi	r3,1
    3d90:	18f5d104 	addi	r3,r3,-10428
    3d94:	003feb06 	br	3d44 <_dtoa_r+0x2e4>
    3d98:	d8802917 	ldw	r2,164(sp)
    3d9c:	19000204 	addi	r4,r3,8
    3da0:	11000015 	stw	r4,0(r2)
    3da4:	003f6206 	br	3b30 <_dtoa_r+0xd0>
    3da8:	ddc00117 	ldw	r23,4(sp)
    3dac:	d8800217 	ldw	r2,8(sp)
    3db0:	01000804 	movi	r4,32
    3db4:	b8c10c84 	addi	r3,r23,1074
    3db8:	18a3883a 	add	r17,r3,r2
    3dbc:	2441b80e 	bge	r4,r17,44a0 <_dtoa_r+0xa40>
    3dc0:	00c01004 	movi	r3,64
    3dc4:	1c47c83a 	sub	r3,r3,r17
    3dc8:	88bff804 	addi	r2,r17,-32
    3dcc:	a8c6983a 	sll	r3,r21,r3
    3dd0:	a084d83a 	srl	r2,r20,r2
    3dd4:	1888b03a 	or	r4,r3,r2
    3dd8:	000a2240 	call	a224 <__floatunsidf>
    3ddc:	1011883a 	mov	r8,r2
    3de0:	00bf8434 	movhi	r2,65040
    3de4:	01000044 	movi	r4,1
    3de8:	10d3883a 	add	r9,r2,r3
    3dec:	8dbef344 	addi	r22,r17,-1075
    3df0:	d9000815 	stw	r4,32(sp)
    3df4:	003f6f06 	br	3bb4 <_dtoa_r+0x154>
    3df8:	d8001715 	stw	zero,92(sp)
    3dfc:	04400044 	movi	r17,1
    3e00:	00bfffc4 	movi	r2,-1
    3e04:	00c00044 	movi	r3,1
    3e08:	d8800e15 	stw	r2,56(sp)
    3e0c:	d8002615 	stw	zero,152(sp)
    3e10:	d8800f15 	stw	r2,60(sp)
    3e14:	d8c00b15 	stw	r3,44(sp)
    3e18:	1021883a 	mov	r16,r2
    3e1c:	d8801617 	ldw	r2,88(sp)
    3e20:	10001115 	stw	zero,68(r2)
    3e24:	d8801617 	ldw	r2,88(sp)
    3e28:	11401117 	ldw	r5,68(r2)
    3e2c:	1009883a 	mov	r4,r2
    3e30:	0006a680 	call	6a68 <_Balloc>
    3e34:	d8c01617 	ldw	r3,88(sp)
    3e38:	d8800515 	stw	r2,20(sp)
    3e3c:	18801015 	stw	r2,64(r3)
    3e40:	00800384 	movi	r2,14
    3e44:	14006836 	bltu	r2,r16,3fe8 <_dtoa_r+0x588>
    3e48:	8805003a 	cmpeq	r2,r17,zero
    3e4c:	1000661e 	bne	r2,zero,3fe8 <_dtoa_r+0x588>
    3e50:	d9000d17 	ldw	r4,52(sp)
    3e54:	0102300e 	bge	zero,r4,4718 <_dtoa_r+0xcb8>
    3e58:	208003cc 	andi	r2,r4,15
    3e5c:	100490fa 	slli	r2,r2,3
    3e60:	2025d13a 	srai	r18,r4,4
    3e64:	00c00074 	movhi	r3,1
    3e68:	18f5e504 	addi	r3,r3,-10348
    3e6c:	10c5883a 	add	r2,r2,r3
    3e70:	90c0040c 	andi	r3,r18,16
    3e74:	14000017 	ldw	r16,0(r2)
    3e78:	14400117 	ldw	r17,4(r2)
    3e7c:	18036a1e 	bne	r3,zero,4c28 <_dtoa_r+0x11c8>
    3e80:	05800084 	movi	r22,2
    3e84:	90001026 	beq	r18,zero,3ec8 <_dtoa_r+0x468>
    3e88:	04c00074 	movhi	r19,1
    3e8c:	9cf61704 	addi	r19,r19,-10148
    3e90:	9080004c 	andi	r2,r18,1
    3e94:	1005003a 	cmpeq	r2,r2,zero
    3e98:	1000081e 	bne	r2,zero,3ebc <_dtoa_r+0x45c>
    3e9c:	99800017 	ldw	r6,0(r19)
    3ea0:	99c00117 	ldw	r7,4(r19)
    3ea4:	880b883a 	mov	r5,r17
    3ea8:	8009883a 	mov	r4,r16
    3eac:	00097900 	call	9790 <__muldf3>
    3eb0:	1021883a 	mov	r16,r2
    3eb4:	b5800044 	addi	r22,r22,1
    3eb8:	1823883a 	mov	r17,r3
    3ebc:	9025d07a 	srai	r18,r18,1
    3ec0:	9cc00204 	addi	r19,r19,8
    3ec4:	903ff21e 	bne	r18,zero,3e90 <_dtoa_r+0x430>
    3ec8:	a80b883a 	mov	r5,r21
    3ecc:	a009883a 	mov	r4,r20
    3ed0:	880f883a 	mov	r7,r17
    3ed4:	800d883a 	mov	r6,r16
    3ed8:	0009b540 	call	9b54 <__divdf3>
    3edc:	1029883a 	mov	r20,r2
    3ee0:	182b883a 	mov	r21,r3
    3ee4:	d8c00c17 	ldw	r3,48(sp)
    3ee8:	1805003a 	cmpeq	r2,r3,zero
    3eec:	1000081e 	bne	r2,zero,3f10 <_dtoa_r+0x4b0>
    3ef0:	0005883a 	mov	r2,zero
    3ef4:	00cffc34 	movhi	r3,16368
    3ef8:	180f883a 	mov	r7,r3
    3efc:	a009883a 	mov	r4,r20
    3f00:	a80b883a 	mov	r5,r21
    3f04:	100d883a 	mov	r6,r2
    3f08:	0009fcc0 	call	9fcc <__ltdf2>
    3f0c:	1003fe16 	blt	r2,zero,4f08 <_dtoa_r+0x14a8>
    3f10:	b009883a 	mov	r4,r22
    3f14:	000a0540 	call	a054 <__floatsidf>
    3f18:	180b883a 	mov	r5,r3
    3f1c:	1009883a 	mov	r4,r2
    3f20:	a00d883a 	mov	r6,r20
    3f24:	a80f883a 	mov	r7,r21
    3f28:	00097900 	call	9790 <__muldf3>
    3f2c:	0011883a 	mov	r8,zero
    3f30:	02500734 	movhi	r9,16412
    3f34:	1009883a 	mov	r4,r2
    3f38:	180b883a 	mov	r5,r3
    3f3c:	480f883a 	mov	r7,r9
    3f40:	400d883a 	mov	r6,r8
    3f44:	000971c0 	call	971c <__adddf3>
    3f48:	d9000f17 	ldw	r4,60(sp)
    3f4c:	102d883a 	mov	r22,r2
    3f50:	00bf3034 	movhi	r2,64704
    3f54:	18b9883a 	add	fp,r3,r2
    3f58:	e02f883a 	mov	r23,fp
    3f5c:	20028f1e 	bne	r4,zero,499c <_dtoa_r+0xf3c>
    3f60:	0005883a 	mov	r2,zero
    3f64:	00d00534 	movhi	r3,16404
    3f68:	a009883a 	mov	r4,r20
    3f6c:	a80b883a 	mov	r5,r21
    3f70:	180f883a 	mov	r7,r3
    3f74:	100d883a 	mov	r6,r2
    3f78:	000969c0 	call	969c <__subdf3>
    3f7c:	1009883a 	mov	r4,r2
    3f80:	e00f883a 	mov	r7,fp
    3f84:	180b883a 	mov	r5,r3
    3f88:	b00d883a 	mov	r6,r22
    3f8c:	1025883a 	mov	r18,r2
    3f90:	1827883a 	mov	r19,r3
    3f94:	0009ebc0 	call	9ebc <__gtdf2>
    3f98:	00834f16 	blt	zero,r2,4cd8 <_dtoa_r+0x1278>
    3f9c:	e0e0003c 	xorhi	r3,fp,32768
    3fa0:	9009883a 	mov	r4,r18
    3fa4:	980b883a 	mov	r5,r19
    3fa8:	180f883a 	mov	r7,r3
    3fac:	b00d883a 	mov	r6,r22
    3fb0:	0009fcc0 	call	9fcc <__ltdf2>
    3fb4:	1000080e 	bge	r2,zero,3fd8 <_dtoa_r+0x578>
    3fb8:	0027883a 	mov	r19,zero
    3fbc:	0025883a 	mov	r18,zero
    3fc0:	d8802617 	ldw	r2,152(sp)
    3fc4:	df000517 	ldw	fp,20(sp)
    3fc8:	d8000615 	stw	zero,24(sp)
    3fcc:	0084303a 	nor	r2,zero,r2
    3fd0:	d8800d15 	stw	r2,52(sp)
    3fd4:	00019b06 	br	4644 <_dtoa_r+0xbe4>
    3fd8:	d9801217 	ldw	r6,72(sp)
    3fdc:	d8801317 	ldw	r2,76(sp)
    3fe0:	3029883a 	mov	r20,r6
    3fe4:	102b883a 	mov	r21,r2
    3fe8:	d8c00217 	ldw	r3,8(sp)
    3fec:	18008516 	blt	r3,zero,4204 <_dtoa_r+0x7a4>
    3ff0:	d9000d17 	ldw	r4,52(sp)
    3ff4:	00800384 	movi	r2,14
    3ff8:	11008216 	blt	r2,r4,4204 <_dtoa_r+0x7a4>
    3ffc:	200490fa 	slli	r2,r4,3
    4000:	d9802617 	ldw	r6,152(sp)
    4004:	00c00074 	movhi	r3,1
    4008:	18f5e504 	addi	r3,r3,-10348
    400c:	10c5883a 	add	r2,r2,r3
    4010:	14800017 	ldw	r18,0(r2)
    4014:	14c00117 	ldw	r19,4(r2)
    4018:	30031e16 	blt	r6,zero,4c94 <_dtoa_r+0x1234>
    401c:	d9000517 	ldw	r4,20(sp)
    4020:	d8c00f17 	ldw	r3,60(sp)
    4024:	a823883a 	mov	r17,r21
    4028:	a021883a 	mov	r16,r20
    402c:	192b883a 	add	r21,r3,r4
    4030:	2039883a 	mov	fp,r4
    4034:	00000f06 	br	4074 <_dtoa_r+0x614>
    4038:	0005883a 	mov	r2,zero
    403c:	00d00934 	movhi	r3,16420
    4040:	5009883a 	mov	r4,r10
    4044:	580b883a 	mov	r5,r11
    4048:	180f883a 	mov	r7,r3
    404c:	100d883a 	mov	r6,r2
    4050:	00097900 	call	9790 <__muldf3>
    4054:	180b883a 	mov	r5,r3
    4058:	000d883a 	mov	r6,zero
    405c:	000f883a 	mov	r7,zero
    4060:	1009883a 	mov	r4,r2
    4064:	1021883a 	mov	r16,r2
    4068:	1823883a 	mov	r17,r3
    406c:	0009e340 	call	9e34 <__nedf2>
    4070:	10004526 	beq	r2,zero,4188 <_dtoa_r+0x728>
    4074:	900d883a 	mov	r6,r18
    4078:	980f883a 	mov	r7,r19
    407c:	8009883a 	mov	r4,r16
    4080:	880b883a 	mov	r5,r17
    4084:	0009b540 	call	9b54 <__divdf3>
    4088:	180b883a 	mov	r5,r3
    408c:	1009883a 	mov	r4,r2
    4090:	000a14c0 	call	a14c <__fixdfsi>
    4094:	1009883a 	mov	r4,r2
    4098:	1029883a 	mov	r20,r2
    409c:	000a0540 	call	a054 <__floatsidf>
    40a0:	180f883a 	mov	r7,r3
    40a4:	9009883a 	mov	r4,r18
    40a8:	980b883a 	mov	r5,r19
    40ac:	100d883a 	mov	r6,r2
    40b0:	00097900 	call	9790 <__muldf3>
    40b4:	180f883a 	mov	r7,r3
    40b8:	880b883a 	mov	r5,r17
    40bc:	8009883a 	mov	r4,r16
    40c0:	100d883a 	mov	r6,r2
    40c4:	000969c0 	call	969c <__subdf3>
    40c8:	1015883a 	mov	r10,r2
    40cc:	a0800c04 	addi	r2,r20,48
    40d0:	e0800005 	stb	r2,0(fp)
    40d4:	e7000044 	addi	fp,fp,1
    40d8:	1817883a 	mov	r11,r3
    40dc:	e57fd61e 	bne	fp,r21,4038 <_dtoa_r+0x5d8>
    40e0:	500d883a 	mov	r6,r10
    40e4:	180f883a 	mov	r7,r3
    40e8:	5009883a 	mov	r4,r10
    40ec:	180b883a 	mov	r5,r3
    40f0:	000971c0 	call	971c <__adddf3>
    40f4:	100d883a 	mov	r6,r2
    40f8:	9009883a 	mov	r4,r18
    40fc:	980b883a 	mov	r5,r19
    4100:	180f883a 	mov	r7,r3
    4104:	1021883a 	mov	r16,r2
    4108:	1823883a 	mov	r17,r3
    410c:	0009fcc0 	call	9fcc <__ltdf2>
    4110:	10000816 	blt	r2,zero,4134 <_dtoa_r+0x6d4>
    4114:	980b883a 	mov	r5,r19
    4118:	800d883a 	mov	r6,r16
    411c:	880f883a 	mov	r7,r17
    4120:	9009883a 	mov	r4,r18
    4124:	0009dac0 	call	9dac <__eqdf2>
    4128:	1000171e 	bne	r2,zero,4188 <_dtoa_r+0x728>
    412c:	a080004c 	andi	r2,r20,1
    4130:	10001526 	beq	r2,zero,4188 <_dtoa_r+0x728>
    4134:	d8800d17 	ldw	r2,52(sp)
    4138:	d8800415 	stw	r2,16(sp)
    413c:	e009883a 	mov	r4,fp
    4140:	213fffc4 	addi	r4,r4,-1
    4144:	20c00007 	ldb	r3,0(r4)
    4148:	00800e44 	movi	r2,57
    414c:	1880081e 	bne	r3,r2,4170 <_dtoa_r+0x710>
    4150:	d8800517 	ldw	r2,20(sp)
    4154:	113ffa1e 	bne	r2,r4,4140 <_dtoa_r+0x6e0>
    4158:	d8c00417 	ldw	r3,16(sp)
    415c:	d9800517 	ldw	r6,20(sp)
    4160:	00800c04 	movi	r2,48
    4164:	18c00044 	addi	r3,r3,1
    4168:	d8c00415 	stw	r3,16(sp)
    416c:	30800005 	stb	r2,0(r6)
    4170:	20800003 	ldbu	r2,0(r4)
    4174:	d8c00417 	ldw	r3,16(sp)
    4178:	27000044 	addi	fp,r4,1
    417c:	10800044 	addi	r2,r2,1
    4180:	d8c00d15 	stw	r3,52(sp)
    4184:	20800005 	stb	r2,0(r4)
    4188:	d9001617 	ldw	r4,88(sp)
    418c:	d9400717 	ldw	r5,28(sp)
    4190:	00064e80 	call	64e8 <_Bfree>
    4194:	e0000005 	stb	zero,0(fp)
    4198:	d9800d17 	ldw	r6,52(sp)
    419c:	d8c02717 	ldw	r3,156(sp)
    41a0:	d9002917 	ldw	r4,164(sp)
    41a4:	30800044 	addi	r2,r6,1
    41a8:	18800015 	stw	r2,0(r3)
    41ac:	20029c26 	beq	r4,zero,4c20 <_dtoa_r+0x11c0>
    41b0:	d8c00517 	ldw	r3,20(sp)
    41b4:	27000015 	stw	fp,0(r4)
    41b8:	003e5d06 	br	3b30 <_dtoa_r+0xd0>
    41bc:	d9800d17 	ldw	r6,52(sp)
    41c0:	00c00074 	movhi	r3,1
    41c4:	18f5e504 	addi	r3,r3,-10348
    41c8:	d9001217 	ldw	r4,72(sp)
    41cc:	300490fa 	slli	r2,r6,3
    41d0:	d9401317 	ldw	r5,76(sp)
    41d4:	10c5883a 	add	r2,r2,r3
    41d8:	12000017 	ldw	r8,0(r2)
    41dc:	12400117 	ldw	r9,4(r2)
    41e0:	400d883a 	mov	r6,r8
    41e4:	480f883a 	mov	r7,r9
    41e8:	0009fcc0 	call	9fcc <__ltdf2>
    41ec:	1000030e 	bge	r2,zero,41fc <_dtoa_r+0x79c>
    41f0:	d8800d17 	ldw	r2,52(sp)
    41f4:	10bfffc4 	addi	r2,r2,-1
    41f8:	d8800d15 	stw	r2,52(sp)
    41fc:	d8000c15 	stw	zero,48(sp)
    4200:	003ea806 	br	3ca4 <_dtoa_r+0x244>
    4204:	d9000b17 	ldw	r4,44(sp)
    4208:	202cc03a 	cmpne	r22,r4,zero
    420c:	b000c71e 	bne	r22,zero,452c <_dtoa_r+0xacc>
    4210:	dc001117 	ldw	r16,68(sp)
    4214:	dc801017 	ldw	r18,64(sp)
    4218:	0027883a 	mov	r19,zero
    421c:	04000b0e 	bge	zero,r16,424c <_dtoa_r+0x7ec>
    4220:	d8c00a17 	ldw	r3,40(sp)
    4224:	00c0090e 	bge	zero,r3,424c <_dtoa_r+0x7ec>
    4228:	8005883a 	mov	r2,r16
    422c:	1c011316 	blt	r3,r16,467c <_dtoa_r+0xc1c>
    4230:	d9000a17 	ldw	r4,40(sp)
    4234:	d9801117 	ldw	r6,68(sp)
    4238:	80a1c83a 	sub	r16,r16,r2
    423c:	2089c83a 	sub	r4,r4,r2
    4240:	308dc83a 	sub	r6,r6,r2
    4244:	d9000a15 	stw	r4,40(sp)
    4248:	d9801115 	stw	r6,68(sp)
    424c:	d8801017 	ldw	r2,64(sp)
    4250:	0080150e 	bge	zero,r2,42a8 <_dtoa_r+0x848>
    4254:	d8c00b17 	ldw	r3,44(sp)
    4258:	1805003a 	cmpeq	r2,r3,zero
    425c:	1001c91e 	bne	r2,zero,4984 <_dtoa_r+0xf24>
    4260:	04800e0e 	bge	zero,r18,429c <_dtoa_r+0x83c>
    4264:	d9001617 	ldw	r4,88(sp)
    4268:	980b883a 	mov	r5,r19
    426c:	900d883a 	mov	r6,r18
    4270:	00073340 	call	7334 <__pow5mult>
    4274:	d9001617 	ldw	r4,88(sp)
    4278:	d9800717 	ldw	r6,28(sp)
    427c:	100b883a 	mov	r5,r2
    4280:	1027883a 	mov	r19,r2
    4284:	0006f780 	call	6f78 <__multiply>
    4288:	d9001617 	ldw	r4,88(sp)
    428c:	d9400717 	ldw	r5,28(sp)
    4290:	1023883a 	mov	r17,r2
    4294:	00064e80 	call	64e8 <_Bfree>
    4298:	dc400715 	stw	r17,28(sp)
    429c:	d9001017 	ldw	r4,64(sp)
    42a0:	248dc83a 	sub	r6,r4,r18
    42a4:	30010e1e 	bne	r6,zero,46e0 <_dtoa_r+0xc80>
    42a8:	d9001617 	ldw	r4,88(sp)
    42ac:	04400044 	movi	r17,1
    42b0:	880b883a 	mov	r5,r17
    42b4:	00071cc0 	call	71cc <__i2b>
    42b8:	d9800917 	ldw	r6,36(sp)
    42bc:	1025883a 	mov	r18,r2
    42c0:	0180040e 	bge	zero,r6,42d4 <_dtoa_r+0x874>
    42c4:	d9001617 	ldw	r4,88(sp)
    42c8:	100b883a 	mov	r5,r2
    42cc:	00073340 	call	7334 <__pow5mult>
    42d0:	1025883a 	mov	r18,r2
    42d4:	d8801717 	ldw	r2,92(sp)
    42d8:	8880f30e 	bge	r17,r2,46a8 <_dtoa_r+0xc48>
    42dc:	0023883a 	mov	r17,zero
    42e0:	d9800917 	ldw	r6,36(sp)
    42e4:	30019e1e 	bne	r6,zero,4960 <_dtoa_r+0xf00>
    42e8:	00c00044 	movi	r3,1
    42ec:	d9000a17 	ldw	r4,40(sp)
    42f0:	20c5883a 	add	r2,r4,r3
    42f4:	10c007cc 	andi	r3,r2,31
    42f8:	1800841e 	bne	r3,zero,450c <_dtoa_r+0xaac>
    42fc:	00800704 	movi	r2,28
    4300:	d9000a17 	ldw	r4,40(sp)
    4304:	d9801117 	ldw	r6,68(sp)
    4308:	80a1883a 	add	r16,r16,r2
    430c:	2089883a 	add	r4,r4,r2
    4310:	308d883a 	add	r6,r6,r2
    4314:	d9000a15 	stw	r4,40(sp)
    4318:	d9801115 	stw	r6,68(sp)
    431c:	d8801117 	ldw	r2,68(sp)
    4320:	0080050e 	bge	zero,r2,4338 <_dtoa_r+0x8d8>
    4324:	d9400717 	ldw	r5,28(sp)
    4328:	d9001617 	ldw	r4,88(sp)
    432c:	100d883a 	mov	r6,r2
    4330:	0006e2c0 	call	6e2c <__lshift>
    4334:	d8800715 	stw	r2,28(sp)
    4338:	d8c00a17 	ldw	r3,40(sp)
    433c:	00c0050e 	bge	zero,r3,4354 <_dtoa_r+0x8f4>
    4340:	d9001617 	ldw	r4,88(sp)
    4344:	900b883a 	mov	r5,r18
    4348:	180d883a 	mov	r6,r3
    434c:	0006e2c0 	call	6e2c <__lshift>
    4350:	1025883a 	mov	r18,r2
    4354:	d9000c17 	ldw	r4,48(sp)
    4358:	2005003a 	cmpeq	r2,r4,zero
    435c:	10016f26 	beq	r2,zero,491c <_dtoa_r+0xebc>
    4360:	d9000f17 	ldw	r4,60(sp)
    4364:	0102170e 	bge	zero,r4,4bc4 <_dtoa_r+0x1164>
    4368:	d9800b17 	ldw	r6,44(sp)
    436c:	3005003a 	cmpeq	r2,r6,zero
    4370:	1000881e 	bne	r2,zero,4594 <_dtoa_r+0xb34>
    4374:	0400050e 	bge	zero,r16,438c <_dtoa_r+0x92c>
    4378:	d9001617 	ldw	r4,88(sp)
    437c:	980b883a 	mov	r5,r19
    4380:	800d883a 	mov	r6,r16
    4384:	0006e2c0 	call	6e2c <__lshift>
    4388:	1027883a 	mov	r19,r2
    438c:	8804c03a 	cmpne	r2,r17,zero
    4390:	1002541e 	bne	r2,zero,4ce4 <_dtoa_r+0x1284>
    4394:	980b883a 	mov	r5,r19
    4398:	dd800517 	ldw	r22,20(sp)
    439c:	dcc00615 	stw	r19,24(sp)
    43a0:	a700004c 	andi	fp,r20,1
    43a4:	2827883a 	mov	r19,r5
    43a8:	d9000717 	ldw	r4,28(sp)
    43ac:	900b883a 	mov	r5,r18
    43b0:	000381c0 	call	381c <quorem>
    43b4:	d9000717 	ldw	r4,28(sp)
    43b8:	d9400617 	ldw	r5,24(sp)
    43bc:	1023883a 	mov	r17,r2
    43c0:	8dc00c04 	addi	r23,r17,48
    43c4:	00066440 	call	6644 <__mcmp>
    43c8:	d9001617 	ldw	r4,88(sp)
    43cc:	900b883a 	mov	r5,r18
    43d0:	980d883a 	mov	r6,r19
    43d4:	1029883a 	mov	r20,r2
    43d8:	0006ca00 	call	6ca0 <__mdiff>
    43dc:	102b883a 	mov	r21,r2
    43e0:	10800317 	ldw	r2,12(r2)
    43e4:	1001281e 	bne	r2,zero,4888 <_dtoa_r+0xe28>
    43e8:	d9000717 	ldw	r4,28(sp)
    43ec:	a80b883a 	mov	r5,r21
    43f0:	00066440 	call	6644 <__mcmp>
    43f4:	d9001617 	ldw	r4,88(sp)
    43f8:	1021883a 	mov	r16,r2
    43fc:	a80b883a 	mov	r5,r21
    4400:	00064e80 	call	64e8 <_Bfree>
    4404:	8000041e 	bne	r16,zero,4418 <_dtoa_r+0x9b8>
    4408:	d8801717 	ldw	r2,92(sp)
    440c:	1000021e 	bne	r2,zero,4418 <_dtoa_r+0x9b8>
    4410:	e004c03a 	cmpne	r2,fp,zero
    4414:	10011726 	beq	r2,zero,4874 <_dtoa_r+0xe14>
    4418:	a0010616 	blt	r20,zero,4834 <_dtoa_r+0xdd4>
    441c:	a000041e 	bne	r20,zero,4430 <_dtoa_r+0x9d0>
    4420:	d8c01717 	ldw	r3,92(sp)
    4424:	1800021e 	bne	r3,zero,4430 <_dtoa_r+0x9d0>
    4428:	e004c03a 	cmpne	r2,fp,zero
    442c:	10010126 	beq	r2,zero,4834 <_dtoa_r+0xdd4>
    4430:	04023d16 	blt	zero,r16,4d28 <_dtoa_r+0x12c8>
    4434:	b5c00005 	stb	r23,0(r22)
    4438:	d9800517 	ldw	r6,20(sp)
    443c:	d9000f17 	ldw	r4,60(sp)
    4440:	b5800044 	addi	r22,r22,1
    4444:	3105883a 	add	r2,r6,r4
    4448:	b0806526 	beq	r22,r2,45e0 <_dtoa_r+0xb80>
    444c:	d9400717 	ldw	r5,28(sp)
    4450:	d9001617 	ldw	r4,88(sp)
    4454:	01800284 	movi	r6,10
    4458:	000f883a 	mov	r7,zero
    445c:	00072080 	call	7208 <__multadd>
    4460:	d8800715 	stw	r2,28(sp)
    4464:	d8800617 	ldw	r2,24(sp)
    4468:	14c10c26 	beq	r2,r19,489c <_dtoa_r+0xe3c>
    446c:	d9400617 	ldw	r5,24(sp)
    4470:	d9001617 	ldw	r4,88(sp)
    4474:	01800284 	movi	r6,10
    4478:	000f883a 	mov	r7,zero
    447c:	00072080 	call	7208 <__multadd>
    4480:	d9001617 	ldw	r4,88(sp)
    4484:	980b883a 	mov	r5,r19
    4488:	01800284 	movi	r6,10
    448c:	000f883a 	mov	r7,zero
    4490:	d8800615 	stw	r2,24(sp)
    4494:	00072080 	call	7208 <__multadd>
    4498:	1027883a 	mov	r19,r2
    449c:	003fc206 	br	43a8 <_dtoa_r+0x948>
    44a0:	2445c83a 	sub	r2,r4,r17
    44a4:	a088983a 	sll	r4,r20,r2
    44a8:	003e4b06 	br	3dd8 <_dtoa_r+0x378>
    44ac:	01bfffc4 	movi	r6,-1
    44b0:	00800044 	movi	r2,1
    44b4:	d9800e15 	stw	r6,56(sp)
    44b8:	d9800f15 	stw	r6,60(sp)
    44bc:	d8800b15 	stw	r2,44(sp)
    44c0:	d8c01617 	ldw	r3,88(sp)
    44c4:	008005c4 	movi	r2,23
    44c8:	18001115 	stw	zero,68(r3)
    44cc:	1580082e 	bgeu	r2,r22,44f0 <_dtoa_r+0xa90>
    44d0:	00c00104 	movi	r3,4
    44d4:	0009883a 	mov	r4,zero
    44d8:	18c7883a 	add	r3,r3,r3
    44dc:	18800504 	addi	r2,r3,20
    44e0:	21000044 	addi	r4,r4,1
    44e4:	b0bffc2e 	bgeu	r22,r2,44d8 <_dtoa_r+0xa78>
    44e8:	d9801617 	ldw	r6,88(sp)
    44ec:	31001115 	stw	r4,68(r6)
    44f0:	dc000f17 	ldw	r16,60(sp)
    44f4:	003e4b06 	br	3e24 <_dtoa_r+0x3c4>
    44f8:	d9801717 	ldw	r6,92(sp)
    44fc:	0023883a 	mov	r17,zero
    4500:	31bfff04 	addi	r6,r6,-4
    4504:	d9801715 	stw	r6,92(sp)
    4508:	003df806 	br	3cec <_dtoa_r+0x28c>
    450c:	00800804 	movi	r2,32
    4510:	10c9c83a 	sub	r4,r2,r3
    4514:	00c00104 	movi	r3,4
    4518:	19005a16 	blt	r3,r4,4684 <_dtoa_r+0xc24>
    451c:	008000c4 	movi	r2,3
    4520:	113f7e16 	blt	r2,r4,431c <_dtoa_r+0x8bc>
    4524:	20800704 	addi	r2,r4,28
    4528:	003f7506 	br	4300 <_dtoa_r+0x8a0>
    452c:	d9801717 	ldw	r6,92(sp)
    4530:	00800044 	movi	r2,1
    4534:	1180a10e 	bge	r2,r6,47bc <_dtoa_r+0xd5c>
    4538:	d9800f17 	ldw	r6,60(sp)
    453c:	d8c01017 	ldw	r3,64(sp)
    4540:	30bfffc4 	addi	r2,r6,-1
    4544:	1881c616 	blt	r3,r2,4c60 <_dtoa_r+0x1200>
    4548:	18a5c83a 	sub	r18,r3,r2
    454c:	d8800f17 	ldw	r2,60(sp)
    4550:	10026216 	blt	r2,zero,4edc <_dtoa_r+0x147c>
    4554:	dc001117 	ldw	r16,68(sp)
    4558:	1007883a 	mov	r3,r2
    455c:	d9800a17 	ldw	r6,40(sp)
    4560:	d8801117 	ldw	r2,68(sp)
    4564:	d9001617 	ldw	r4,88(sp)
    4568:	30cd883a 	add	r6,r6,r3
    456c:	10c5883a 	add	r2,r2,r3
    4570:	01400044 	movi	r5,1
    4574:	d9800a15 	stw	r6,40(sp)
    4578:	d8801115 	stw	r2,68(sp)
    457c:	00071cc0 	call	71cc <__i2b>
    4580:	1027883a 	mov	r19,r2
    4584:	003f2506 	br	421c <_dtoa_r+0x7bc>
    4588:	00c00074 	movhi	r3,1
    458c:	18f5c804 	addi	r3,r3,-10464
    4590:	003d6706 	br	3b30 <_dtoa_r+0xd0>
    4594:	dd800517 	ldw	r22,20(sp)
    4598:	04000044 	movi	r16,1
    459c:	00000706 	br	45bc <_dtoa_r+0xb5c>
    45a0:	d9400717 	ldw	r5,28(sp)
    45a4:	d9001617 	ldw	r4,88(sp)
    45a8:	01800284 	movi	r6,10
    45ac:	000f883a 	mov	r7,zero
    45b0:	00072080 	call	7208 <__multadd>
    45b4:	d8800715 	stw	r2,28(sp)
    45b8:	84000044 	addi	r16,r16,1
    45bc:	d9000717 	ldw	r4,28(sp)
    45c0:	900b883a 	mov	r5,r18
    45c4:	000381c0 	call	381c <quorem>
    45c8:	15c00c04 	addi	r23,r2,48
    45cc:	b5c00005 	stb	r23,0(r22)
    45d0:	d8c00f17 	ldw	r3,60(sp)
    45d4:	b5800044 	addi	r22,r22,1
    45d8:	80fff116 	blt	r16,r3,45a0 <_dtoa_r+0xb40>
    45dc:	d8000615 	stw	zero,24(sp)
    45e0:	d9400717 	ldw	r5,28(sp)
    45e4:	d9001617 	ldw	r4,88(sp)
    45e8:	01800044 	movi	r6,1
    45ec:	0006e2c0 	call	6e2c <__lshift>
    45f0:	1009883a 	mov	r4,r2
    45f4:	900b883a 	mov	r5,r18
    45f8:	d8800715 	stw	r2,28(sp)
    45fc:	00066440 	call	6644 <__mcmp>
    4600:	00803c0e 	bge	zero,r2,46f4 <_dtoa_r+0xc94>
    4604:	b009883a 	mov	r4,r22
    4608:	213fffc4 	addi	r4,r4,-1
    460c:	21400003 	ldbu	r5,0(r4)
    4610:	00800e44 	movi	r2,57
    4614:	28c03fcc 	andi	r3,r5,255
    4618:	18c0201c 	xori	r3,r3,128
    461c:	18ffe004 	addi	r3,r3,-128
    4620:	1881981e 	bne	r3,r2,4c84 <_dtoa_r+0x1224>
    4624:	d9800517 	ldw	r6,20(sp)
    4628:	21bff71e 	bne	r4,r6,4608 <_dtoa_r+0xba8>
    462c:	d8800d17 	ldw	r2,52(sp)
    4630:	37000044 	addi	fp,r6,1
    4634:	10800044 	addi	r2,r2,1
    4638:	d8800d15 	stw	r2,52(sp)
    463c:	00800c44 	movi	r2,49
    4640:	30800005 	stb	r2,0(r6)
    4644:	d9001617 	ldw	r4,88(sp)
    4648:	900b883a 	mov	r5,r18
    464c:	00064e80 	call	64e8 <_Bfree>
    4650:	983ecd26 	beq	r19,zero,4188 <_dtoa_r+0x728>
    4654:	d8c00617 	ldw	r3,24(sp)
    4658:	18000426 	beq	r3,zero,466c <_dtoa_r+0xc0c>
    465c:	1cc00326 	beq	r3,r19,466c <_dtoa_r+0xc0c>
    4660:	d9001617 	ldw	r4,88(sp)
    4664:	180b883a 	mov	r5,r3
    4668:	00064e80 	call	64e8 <_Bfree>
    466c:	d9001617 	ldw	r4,88(sp)
    4670:	980b883a 	mov	r5,r19
    4674:	00064e80 	call	64e8 <_Bfree>
    4678:	003ec306 	br	4188 <_dtoa_r+0x728>
    467c:	1805883a 	mov	r2,r3
    4680:	003eeb06 	br	4230 <_dtoa_r+0x7d0>
    4684:	d9800a17 	ldw	r6,40(sp)
    4688:	d8c01117 	ldw	r3,68(sp)
    468c:	20bfff04 	addi	r2,r4,-4
    4690:	308d883a 	add	r6,r6,r2
    4694:	1887883a 	add	r3,r3,r2
    4698:	80a1883a 	add	r16,r16,r2
    469c:	d9800a15 	stw	r6,40(sp)
    46a0:	d8c01115 	stw	r3,68(sp)
    46a4:	003f1d06 	br	431c <_dtoa_r+0x8bc>
    46a8:	a03f0c1e 	bne	r20,zero,42dc <_dtoa_r+0x87c>
    46ac:	00800434 	movhi	r2,16
    46b0:	10bfffc4 	addi	r2,r2,-1
    46b4:	a884703a 	and	r2,r21,r2
    46b8:	103f081e 	bne	r2,zero,42dc <_dtoa_r+0x87c>
    46bc:	a89ffc2c 	andhi	r2,r21,32752
    46c0:	103f0626 	beq	r2,zero,42dc <_dtoa_r+0x87c>
    46c4:	d8c01117 	ldw	r3,68(sp)
    46c8:	d9000a17 	ldw	r4,40(sp)
    46cc:	18c00044 	addi	r3,r3,1
    46d0:	21000044 	addi	r4,r4,1
    46d4:	d8c01115 	stw	r3,68(sp)
    46d8:	d9000a15 	stw	r4,40(sp)
    46dc:	003f0006 	br	42e0 <_dtoa_r+0x880>
    46e0:	d9400717 	ldw	r5,28(sp)
    46e4:	d9001617 	ldw	r4,88(sp)
    46e8:	00073340 	call	7334 <__pow5mult>
    46ec:	d8800715 	stw	r2,28(sp)
    46f0:	003eed06 	br	42a8 <_dtoa_r+0x848>
    46f4:	1000021e 	bne	r2,zero,4700 <_dtoa_r+0xca0>
    46f8:	b880004c 	andi	r2,r23,1
    46fc:	103fc11e 	bne	r2,zero,4604 <_dtoa_r+0xba4>
    4700:	b5bfffc4 	addi	r22,r22,-1
    4704:	b0c00007 	ldb	r3,0(r22)
    4708:	00800c04 	movi	r2,48
    470c:	18bffc26 	beq	r3,r2,4700 <_dtoa_r+0xca0>
    4710:	b7000044 	addi	fp,r22,1
    4714:	003fcb06 	br	4644 <_dtoa_r+0xbe4>
    4718:	d9800d17 	ldw	r6,52(sp)
    471c:	018fc83a 	sub	r7,zero,r6
    4720:	3801f726 	beq	r7,zero,4f00 <_dtoa_r+0x14a0>
    4724:	398003cc 	andi	r6,r7,15
    4728:	300c90fa 	slli	r6,r6,3
    472c:	01400074 	movhi	r5,1
    4730:	2975e504 	addi	r5,r5,-10348
    4734:	d9001217 	ldw	r4,72(sp)
    4738:	314d883a 	add	r6,r6,r5
    473c:	30c00117 	ldw	r3,4(r6)
    4740:	30800017 	ldw	r2,0(r6)
    4744:	d9401317 	ldw	r5,76(sp)
    4748:	3821d13a 	srai	r16,r7,4
    474c:	100d883a 	mov	r6,r2
    4750:	180f883a 	mov	r7,r3
    4754:	00097900 	call	9790 <__muldf3>
    4758:	1011883a 	mov	r8,r2
    475c:	1813883a 	mov	r9,r3
    4760:	1029883a 	mov	r20,r2
    4764:	182b883a 	mov	r21,r3
    4768:	8001e526 	beq	r16,zero,4f00 <_dtoa_r+0x14a0>
    476c:	05800084 	movi	r22,2
    4770:	04400074 	movhi	r17,1
    4774:	8c761704 	addi	r17,r17,-10148
    4778:	8080004c 	andi	r2,r16,1
    477c:	1005003a 	cmpeq	r2,r2,zero
    4780:	1000081e 	bne	r2,zero,47a4 <_dtoa_r+0xd44>
    4784:	89800017 	ldw	r6,0(r17)
    4788:	89c00117 	ldw	r7,4(r17)
    478c:	480b883a 	mov	r5,r9
    4790:	4009883a 	mov	r4,r8
    4794:	00097900 	call	9790 <__muldf3>
    4798:	1011883a 	mov	r8,r2
    479c:	b5800044 	addi	r22,r22,1
    47a0:	1813883a 	mov	r9,r3
    47a4:	8021d07a 	srai	r16,r16,1
    47a8:	8c400204 	addi	r17,r17,8
    47ac:	803ff21e 	bne	r16,zero,4778 <_dtoa_r+0xd18>
    47b0:	4029883a 	mov	r20,r8
    47b4:	482b883a 	mov	r21,r9
    47b8:	003dca06 	br	3ee4 <_dtoa_r+0x484>
    47bc:	d9000817 	ldw	r4,32(sp)
    47c0:	2005003a 	cmpeq	r2,r4,zero
    47c4:	1001f61e 	bne	r2,zero,4fa0 <_dtoa_r+0x1540>
    47c8:	dc001117 	ldw	r16,68(sp)
    47cc:	dc801017 	ldw	r18,64(sp)
    47d0:	18c10cc4 	addi	r3,r3,1075
    47d4:	003f6106 	br	455c <_dtoa_r+0xafc>
    47d8:	d8000b15 	stw	zero,44(sp)
    47dc:	d9802617 	ldw	r6,152(sp)
    47e0:	d8c00d17 	ldw	r3,52(sp)
    47e4:	30800044 	addi	r2,r6,1
    47e8:	18ad883a 	add	r22,r3,r2
    47ec:	b13fffc4 	addi	r4,r22,-1
    47f0:	d9000e15 	stw	r4,56(sp)
    47f4:	0581f60e 	bge	zero,r22,4fd0 <_dtoa_r+0x1570>
    47f8:	dd800f15 	stw	r22,60(sp)
    47fc:	003f3006 	br	44c0 <_dtoa_r+0xa60>
    4800:	d8000b15 	stw	zero,44(sp)
    4804:	d9002617 	ldw	r4,152(sp)
    4808:	0101eb0e 	bge	zero,r4,4fb8 <_dtoa_r+0x1558>
    480c:	202d883a 	mov	r22,r4
    4810:	d9000e15 	stw	r4,56(sp)
    4814:	d9000f15 	stw	r4,60(sp)
    4818:	003f2906 	br	44c0 <_dtoa_r+0xa60>
    481c:	01800044 	movi	r6,1
    4820:	d9800b15 	stw	r6,44(sp)
    4824:	003ff706 	br	4804 <_dtoa_r+0xda4>
    4828:	01000044 	movi	r4,1
    482c:	d9000b15 	stw	r4,44(sp)
    4830:	003fea06 	br	47dc <_dtoa_r+0xd7c>
    4834:	04000c0e 	bge	zero,r16,4868 <_dtoa_r+0xe08>
    4838:	d9400717 	ldw	r5,28(sp)
    483c:	d9001617 	ldw	r4,88(sp)
    4840:	01800044 	movi	r6,1
    4844:	0006e2c0 	call	6e2c <__lshift>
    4848:	1009883a 	mov	r4,r2
    484c:	900b883a 	mov	r5,r18
    4850:	d8800715 	stw	r2,28(sp)
    4854:	00066440 	call	6644 <__mcmp>
    4858:	0081e00e 	bge	zero,r2,4fdc <_dtoa_r+0x157c>
    485c:	bdc00044 	addi	r23,r23,1
    4860:	00800e84 	movi	r2,58
    4864:	b881a226 	beq	r23,r2,4ef0 <_dtoa_r+0x1490>
    4868:	b7000044 	addi	fp,r22,1
    486c:	b5c00005 	stb	r23,0(r22)
    4870:	003f7406 	br	4644 <_dtoa_r+0xbe4>
    4874:	00800e44 	movi	r2,57
    4878:	b8819d26 	beq	r23,r2,4ef0 <_dtoa_r+0x1490>
    487c:	053ffa0e 	bge	zero,r20,4868 <_dtoa_r+0xe08>
    4880:	8dc00c44 	addi	r23,r17,49
    4884:	003ff806 	br	4868 <_dtoa_r+0xe08>
    4888:	d9001617 	ldw	r4,88(sp)
    488c:	a80b883a 	mov	r5,r21
    4890:	04000044 	movi	r16,1
    4894:	00064e80 	call	64e8 <_Bfree>
    4898:	003edf06 	br	4418 <_dtoa_r+0x9b8>
    489c:	d9001617 	ldw	r4,88(sp)
    48a0:	980b883a 	mov	r5,r19
    48a4:	01800284 	movi	r6,10
    48a8:	000f883a 	mov	r7,zero
    48ac:	00072080 	call	7208 <__multadd>
    48b0:	1027883a 	mov	r19,r2
    48b4:	d8800615 	stw	r2,24(sp)
    48b8:	003ebb06 	br	43a8 <_dtoa_r+0x948>
    48bc:	d9801117 	ldw	r6,68(sp)
    48c0:	d8800d17 	ldw	r2,52(sp)
    48c4:	d8000915 	stw	zero,36(sp)
    48c8:	308dc83a 	sub	r6,r6,r2
    48cc:	0087c83a 	sub	r3,zero,r2
    48d0:	d9801115 	stw	r6,68(sp)
    48d4:	d8c01015 	stw	r3,64(sp)
    48d8:	003cfe06 	br	3cd4 <_dtoa_r+0x274>
    48dc:	018dc83a 	sub	r6,zero,r6
    48e0:	d9801115 	stw	r6,68(sp)
    48e4:	d8000a15 	stw	zero,40(sp)
    48e8:	003cf306 	br	3cb8 <_dtoa_r+0x258>
    48ec:	d9000d17 	ldw	r4,52(sp)
    48f0:	000a0540 	call	a054 <__floatsidf>
    48f4:	880b883a 	mov	r5,r17
    48f8:	8009883a 	mov	r4,r16
    48fc:	180f883a 	mov	r7,r3
    4900:	100d883a 	mov	r6,r2
    4904:	0009e340 	call	9e34 <__nedf2>
    4908:	103ce126 	beq	r2,zero,3c90 <_dtoa_r+0x230>
    490c:	d9800d17 	ldw	r6,52(sp)
    4910:	31bfffc4 	addi	r6,r6,-1
    4914:	d9800d15 	stw	r6,52(sp)
    4918:	003cdd06 	br	3c90 <_dtoa_r+0x230>
    491c:	d9000717 	ldw	r4,28(sp)
    4920:	900b883a 	mov	r5,r18
    4924:	00066440 	call	6644 <__mcmp>
    4928:	103e8d0e 	bge	r2,zero,4360 <_dtoa_r+0x900>
    492c:	d9400717 	ldw	r5,28(sp)
    4930:	d9001617 	ldw	r4,88(sp)
    4934:	01800284 	movi	r6,10
    4938:	000f883a 	mov	r7,zero
    493c:	00072080 	call	7208 <__multadd>
    4940:	d9800d17 	ldw	r6,52(sp)
    4944:	d8800715 	stw	r2,28(sp)
    4948:	31bfffc4 	addi	r6,r6,-1
    494c:	d9800d15 	stw	r6,52(sp)
    4950:	b001a71e 	bne	r22,zero,4ff0 <_dtoa_r+0x1590>
    4954:	d8800e17 	ldw	r2,56(sp)
    4958:	d8800f15 	stw	r2,60(sp)
    495c:	003e8006 	br	4360 <_dtoa_r+0x900>
    4960:	90800417 	ldw	r2,16(r18)
    4964:	1085883a 	add	r2,r2,r2
    4968:	1085883a 	add	r2,r2,r2
    496c:	1485883a 	add	r2,r2,r18
    4970:	11000417 	ldw	r4,16(r2)
    4974:	00065100 	call	6510 <__hi0bits>
    4978:	00c00804 	movi	r3,32
    497c:	1887c83a 	sub	r3,r3,r2
    4980:	003e5a06 	br	42ec <_dtoa_r+0x88c>
    4984:	d9400717 	ldw	r5,28(sp)
    4988:	d9801017 	ldw	r6,64(sp)
    498c:	d9001617 	ldw	r4,88(sp)
    4990:	00073340 	call	7334 <__pow5mult>
    4994:	d8800715 	stw	r2,28(sp)
    4998:	003e4306 	br	42a8 <_dtoa_r+0x848>
    499c:	d9800f17 	ldw	r6,60(sp)
    49a0:	d8800d17 	ldw	r2,52(sp)
    49a4:	d9800315 	stw	r6,12(sp)
    49a8:	d8800415 	stw	r2,16(sp)
    49ac:	d8c00b17 	ldw	r3,44(sp)
    49b0:	1805003a 	cmpeq	r2,r3,zero
    49b4:	1000e21e 	bne	r2,zero,4d40 <_dtoa_r+0x12e0>
    49b8:	d9000317 	ldw	r4,12(sp)
    49bc:	0005883a 	mov	r2,zero
    49c0:	00cff834 	movhi	r3,16352
    49c4:	200c90fa 	slli	r6,r4,3
    49c8:	01000074 	movhi	r4,1
    49cc:	2135e504 	addi	r4,r4,-10348
    49d0:	180b883a 	mov	r5,r3
    49d4:	310d883a 	add	r6,r6,r4
    49d8:	327fff17 	ldw	r9,-4(r6)
    49dc:	323ffe17 	ldw	r8,-8(r6)
    49e0:	1009883a 	mov	r4,r2
    49e4:	480f883a 	mov	r7,r9
    49e8:	400d883a 	mov	r6,r8
    49ec:	0009b540 	call	9b54 <__divdf3>
    49f0:	180b883a 	mov	r5,r3
    49f4:	b00d883a 	mov	r6,r22
    49f8:	b80f883a 	mov	r7,r23
    49fc:	1009883a 	mov	r4,r2
    4a00:	000969c0 	call	969c <__subdf3>
    4a04:	a80b883a 	mov	r5,r21
    4a08:	a009883a 	mov	r4,r20
    4a0c:	d8c01915 	stw	r3,100(sp)
    4a10:	d8801815 	stw	r2,96(sp)
    4a14:	000a14c0 	call	a14c <__fixdfsi>
    4a18:	1009883a 	mov	r4,r2
    4a1c:	1027883a 	mov	r19,r2
    4a20:	000a0540 	call	a054 <__floatsidf>
    4a24:	a80b883a 	mov	r5,r21
    4a28:	a009883a 	mov	r4,r20
    4a2c:	180f883a 	mov	r7,r3
    4a30:	100d883a 	mov	r6,r2
    4a34:	000969c0 	call	969c <__subdf3>
    4a38:	d9801817 	ldw	r6,96(sp)
    4a3c:	1823883a 	mov	r17,r3
    4a40:	d8801415 	stw	r2,80(sp)
    4a44:	302d883a 	mov	r22,r6
    4a48:	d9800517 	ldw	r6,20(sp)
    4a4c:	9cc00c04 	addi	r19,r19,48
    4a50:	dc401515 	stw	r17,84(sp)
    4a54:	d8c01917 	ldw	r3,100(sp)
    4a58:	34c00005 	stb	r19,0(r6)
    4a5c:	d8800517 	ldw	r2,20(sp)
    4a60:	d9401917 	ldw	r5,100(sp)
    4a64:	d9801417 	ldw	r6,80(sp)
    4a68:	b009883a 	mov	r4,r22
    4a6c:	880f883a 	mov	r7,r17
    4a70:	182f883a 	mov	r23,r3
    4a74:	17000044 	addi	fp,r2,1
    4a78:	0009ebc0 	call	9ebc <__gtdf2>
    4a7c:	00804e16 	blt	zero,r2,4bb8 <_dtoa_r+0x1158>
    4a80:	d9801417 	ldw	r6,80(sp)
    4a84:	0005883a 	mov	r2,zero
    4a88:	00cffc34 	movhi	r3,16368
    4a8c:	180b883a 	mov	r5,r3
    4a90:	880f883a 	mov	r7,r17
    4a94:	1009883a 	mov	r4,r2
    4a98:	000969c0 	call	969c <__subdf3>
    4a9c:	d9401917 	ldw	r5,100(sp)
    4aa0:	180f883a 	mov	r7,r3
    4aa4:	b009883a 	mov	r4,r22
    4aa8:	100d883a 	mov	r6,r2
    4aac:	0009ebc0 	call	9ebc <__gtdf2>
    4ab0:	00bda216 	blt	zero,r2,413c <_dtoa_r+0x6dc>
    4ab4:	d8c00317 	ldw	r3,12(sp)
    4ab8:	00800044 	movi	r2,1
    4abc:	10c01216 	blt	r2,r3,4b08 <_dtoa_r+0x10a8>
    4ac0:	003d4506 	br	3fd8 <_dtoa_r+0x578>
    4ac4:	d9801417 	ldw	r6,80(sp)
    4ac8:	0005883a 	mov	r2,zero
    4acc:	00cffc34 	movhi	r3,16368
    4ad0:	180b883a 	mov	r5,r3
    4ad4:	880f883a 	mov	r7,r17
    4ad8:	1009883a 	mov	r4,r2
    4adc:	000969c0 	call	969c <__subdf3>
    4ae0:	d9c01b17 	ldw	r7,108(sp)
    4ae4:	180b883a 	mov	r5,r3
    4ae8:	1009883a 	mov	r4,r2
    4aec:	b00d883a 	mov	r6,r22
    4af0:	0009fcc0 	call	9fcc <__ltdf2>
    4af4:	103d9116 	blt	r2,zero,413c <_dtoa_r+0x6dc>
    4af8:	d9800517 	ldw	r6,20(sp)
    4afc:	d9000317 	ldw	r4,12(sp)
    4b00:	3105883a 	add	r2,r6,r4
    4b04:	e0bd3426 	beq	fp,r2,3fd8 <_dtoa_r+0x578>
    4b08:	04500934 	movhi	r17,16420
    4b0c:	0021883a 	mov	r16,zero
    4b10:	b80b883a 	mov	r5,r23
    4b14:	b009883a 	mov	r4,r22
    4b18:	800d883a 	mov	r6,r16
    4b1c:	880f883a 	mov	r7,r17
    4b20:	00097900 	call	9790 <__muldf3>
    4b24:	d9401517 	ldw	r5,84(sp)
    4b28:	d9001417 	ldw	r4,80(sp)
    4b2c:	880f883a 	mov	r7,r17
    4b30:	000d883a 	mov	r6,zero
    4b34:	d8801a15 	stw	r2,104(sp)
    4b38:	d8c01b15 	stw	r3,108(sp)
    4b3c:	00097900 	call	9790 <__muldf3>
    4b40:	180b883a 	mov	r5,r3
    4b44:	1009883a 	mov	r4,r2
    4b48:	1823883a 	mov	r17,r3
    4b4c:	1021883a 	mov	r16,r2
    4b50:	000a14c0 	call	a14c <__fixdfsi>
    4b54:	1009883a 	mov	r4,r2
    4b58:	102b883a 	mov	r21,r2
    4b5c:	000a0540 	call	a054 <__floatsidf>
    4b60:	880b883a 	mov	r5,r17
    4b64:	8009883a 	mov	r4,r16
    4b68:	180f883a 	mov	r7,r3
    4b6c:	100d883a 	mov	r6,r2
    4b70:	000969c0 	call	969c <__subdf3>
    4b74:	1021883a 	mov	r16,r2
    4b78:	d9001b17 	ldw	r4,108(sp)
    4b7c:	1823883a 	mov	r17,r3
    4b80:	dc001415 	stw	r16,80(sp)
    4b84:	ad400c04 	addi	r21,r21,48
    4b88:	dc401515 	stw	r17,84(sp)
    4b8c:	d8801a17 	ldw	r2,104(sp)
    4b90:	e5400005 	stb	r21,0(fp)
    4b94:	202f883a 	mov	r23,r4
    4b98:	d9c01b17 	ldw	r7,108(sp)
    4b9c:	d9001417 	ldw	r4,80(sp)
    4ba0:	880b883a 	mov	r5,r17
    4ba4:	100d883a 	mov	r6,r2
    4ba8:	102d883a 	mov	r22,r2
    4bac:	e7000044 	addi	fp,fp,1
    4bb0:	0009fcc0 	call	9fcc <__ltdf2>
    4bb4:	103fc30e 	bge	r2,zero,4ac4 <_dtoa_r+0x1064>
    4bb8:	d9000417 	ldw	r4,16(sp)
    4bbc:	d9000d15 	stw	r4,52(sp)
    4bc0:	003d7106 	br	4188 <_dtoa_r+0x728>
    4bc4:	d9801717 	ldw	r6,92(sp)
    4bc8:	00800084 	movi	r2,2
    4bcc:	11bde60e 	bge	r2,r6,4368 <_dtoa_r+0x908>
    4bd0:	203cfb1e 	bne	r4,zero,3fc0 <_dtoa_r+0x560>
    4bd4:	d9001617 	ldw	r4,88(sp)
    4bd8:	900b883a 	mov	r5,r18
    4bdc:	01800144 	movi	r6,5
    4be0:	000f883a 	mov	r7,zero
    4be4:	00072080 	call	7208 <__multadd>
    4be8:	d9000717 	ldw	r4,28(sp)
    4bec:	100b883a 	mov	r5,r2
    4bf0:	1025883a 	mov	r18,r2
    4bf4:	00066440 	call	6644 <__mcmp>
    4bf8:	00bcf10e 	bge	zero,r2,3fc0 <_dtoa_r+0x560>
    4bfc:	d8c00d17 	ldw	r3,52(sp)
    4c00:	d9000517 	ldw	r4,20(sp)
    4c04:	d8000615 	stw	zero,24(sp)
    4c08:	18c00044 	addi	r3,r3,1
    4c0c:	d8c00d15 	stw	r3,52(sp)
    4c10:	00800c44 	movi	r2,49
    4c14:	27000044 	addi	fp,r4,1
    4c18:	20800005 	stb	r2,0(r4)
    4c1c:	003e8906 	br	4644 <_dtoa_r+0xbe4>
    4c20:	d8c00517 	ldw	r3,20(sp)
    4c24:	003bc206 	br	3b30 <_dtoa_r+0xd0>
    4c28:	01800074 	movhi	r6,1
    4c2c:	31b61704 	addi	r6,r6,-10148
    4c30:	30c00917 	ldw	r3,36(r6)
    4c34:	30800817 	ldw	r2,32(r6)
    4c38:	d9001217 	ldw	r4,72(sp)
    4c3c:	d9401317 	ldw	r5,76(sp)
    4c40:	180f883a 	mov	r7,r3
    4c44:	100d883a 	mov	r6,r2
    4c48:	0009b540 	call	9b54 <__divdf3>
    4c4c:	948003cc 	andi	r18,r18,15
    4c50:	058000c4 	movi	r22,3
    4c54:	1029883a 	mov	r20,r2
    4c58:	182b883a 	mov	r21,r3
    4c5c:	003c8906 	br	3e84 <_dtoa_r+0x424>
    4c60:	d9001017 	ldw	r4,64(sp)
    4c64:	d9800917 	ldw	r6,36(sp)
    4c68:	0025883a 	mov	r18,zero
    4c6c:	1105c83a 	sub	r2,r2,r4
    4c70:	2089883a 	add	r4,r4,r2
    4c74:	308d883a 	add	r6,r6,r2
    4c78:	d9001015 	stw	r4,64(sp)
    4c7c:	d9800915 	stw	r6,36(sp)
    4c80:	003e3206 	br	454c <_dtoa_r+0xaec>
    4c84:	28800044 	addi	r2,r5,1
    4c88:	27000044 	addi	fp,r4,1
    4c8c:	20800005 	stb	r2,0(r4)
    4c90:	003e6c06 	br	4644 <_dtoa_r+0xbe4>
    4c94:	d8800f17 	ldw	r2,60(sp)
    4c98:	00bce016 	blt	zero,r2,401c <_dtoa_r+0x5bc>
    4c9c:	d9800f17 	ldw	r6,60(sp)
    4ca0:	303cc51e 	bne	r6,zero,3fb8 <_dtoa_r+0x558>
    4ca4:	0005883a 	mov	r2,zero
    4ca8:	00d00534 	movhi	r3,16404
    4cac:	980b883a 	mov	r5,r19
    4cb0:	180f883a 	mov	r7,r3
    4cb4:	9009883a 	mov	r4,r18
    4cb8:	100d883a 	mov	r6,r2
    4cbc:	00097900 	call	9790 <__muldf3>
    4cc0:	180b883a 	mov	r5,r3
    4cc4:	a80f883a 	mov	r7,r21
    4cc8:	1009883a 	mov	r4,r2
    4ccc:	a00d883a 	mov	r6,r20
    4cd0:	0009f440 	call	9f44 <__gedf2>
    4cd4:	103cb80e 	bge	r2,zero,3fb8 <_dtoa_r+0x558>
    4cd8:	0027883a 	mov	r19,zero
    4cdc:	0025883a 	mov	r18,zero
    4ce0:	003fc606 	br	4bfc <_dtoa_r+0x119c>
    4ce4:	99400117 	ldw	r5,4(r19)
    4ce8:	d9001617 	ldw	r4,88(sp)
    4cec:	0006a680 	call	6a68 <_Balloc>
    4cf0:	99800417 	ldw	r6,16(r19)
    4cf4:	11000304 	addi	r4,r2,12
    4cf8:	99400304 	addi	r5,r19,12
    4cfc:	318d883a 	add	r6,r6,r6
    4d00:	318d883a 	add	r6,r6,r6
    4d04:	31800204 	addi	r6,r6,8
    4d08:	1023883a 	mov	r17,r2
    4d0c:	00062d00 	call	62d0 <memcpy>
    4d10:	d9001617 	ldw	r4,88(sp)
    4d14:	880b883a 	mov	r5,r17
    4d18:	01800044 	movi	r6,1
    4d1c:	0006e2c0 	call	6e2c <__lshift>
    4d20:	100b883a 	mov	r5,r2
    4d24:	003d9c06 	br	4398 <_dtoa_r+0x938>
    4d28:	00800e44 	movi	r2,57
    4d2c:	b8807026 	beq	r23,r2,4ef0 <_dtoa_r+0x1490>
    4d30:	b8800044 	addi	r2,r23,1
    4d34:	b7000044 	addi	fp,r22,1
    4d38:	b0800005 	stb	r2,0(r22)
    4d3c:	003e4106 	br	4644 <_dtoa_r+0xbe4>
    4d40:	d8800317 	ldw	r2,12(sp)
    4d44:	01800074 	movhi	r6,1
    4d48:	31b5e504 	addi	r6,r6,-10348
    4d4c:	b009883a 	mov	r4,r22
    4d50:	100e90fa 	slli	r7,r2,3
    4d54:	b80b883a 	mov	r5,r23
    4d58:	398f883a 	add	r7,r7,r6
    4d5c:	38bffe17 	ldw	r2,-8(r7)
    4d60:	d9800517 	ldw	r6,20(sp)
    4d64:	38ffff17 	ldw	r3,-4(r7)
    4d68:	37000044 	addi	fp,r6,1
    4d6c:	180f883a 	mov	r7,r3
    4d70:	100d883a 	mov	r6,r2
    4d74:	00097900 	call	9790 <__muldf3>
    4d78:	a80b883a 	mov	r5,r21
    4d7c:	a009883a 	mov	r4,r20
    4d80:	182f883a 	mov	r23,r3
    4d84:	102d883a 	mov	r22,r2
    4d88:	000a14c0 	call	a14c <__fixdfsi>
    4d8c:	1009883a 	mov	r4,r2
    4d90:	1027883a 	mov	r19,r2
    4d94:	000a0540 	call	a054 <__floatsidf>
    4d98:	a80b883a 	mov	r5,r21
    4d9c:	a009883a 	mov	r4,r20
    4da0:	180f883a 	mov	r7,r3
    4da4:	100d883a 	mov	r6,r2
    4da8:	000969c0 	call	969c <__subdf3>
    4dac:	180b883a 	mov	r5,r3
    4db0:	d8c00517 	ldw	r3,20(sp)
    4db4:	9cc00c04 	addi	r19,r19,48
    4db8:	1009883a 	mov	r4,r2
    4dbc:	1cc00005 	stb	r19,0(r3)
    4dc0:	2021883a 	mov	r16,r4
    4dc4:	d9000317 	ldw	r4,12(sp)
    4dc8:	00800044 	movi	r2,1
    4dcc:	2823883a 	mov	r17,r5
    4dd0:	20802226 	beq	r4,r2,4e5c <_dtoa_r+0x13fc>
    4dd4:	1029883a 	mov	r20,r2
    4dd8:	0005883a 	mov	r2,zero
    4ddc:	00d00934 	movhi	r3,16420
    4de0:	180f883a 	mov	r7,r3
    4de4:	100d883a 	mov	r6,r2
    4de8:	880b883a 	mov	r5,r17
    4dec:	8009883a 	mov	r4,r16
    4df0:	00097900 	call	9790 <__muldf3>
    4df4:	180b883a 	mov	r5,r3
    4df8:	1009883a 	mov	r4,r2
    4dfc:	1823883a 	mov	r17,r3
    4e00:	1021883a 	mov	r16,r2
    4e04:	000a14c0 	call	a14c <__fixdfsi>
    4e08:	1009883a 	mov	r4,r2
    4e0c:	102b883a 	mov	r21,r2
    4e10:	000a0540 	call	a054 <__floatsidf>
    4e14:	880b883a 	mov	r5,r17
    4e18:	8009883a 	mov	r4,r16
    4e1c:	180f883a 	mov	r7,r3
    4e20:	100d883a 	mov	r6,r2
    4e24:	000969c0 	call	969c <__subdf3>
    4e28:	180b883a 	mov	r5,r3
    4e2c:	d8c00517 	ldw	r3,20(sp)
    4e30:	1009883a 	mov	r4,r2
    4e34:	ad400c04 	addi	r21,r21,48
    4e38:	1d05883a 	add	r2,r3,r20
    4e3c:	15400005 	stb	r21,0(r2)
    4e40:	2021883a 	mov	r16,r4
    4e44:	d9000317 	ldw	r4,12(sp)
    4e48:	a5000044 	addi	r20,r20,1
    4e4c:	2823883a 	mov	r17,r5
    4e50:	a13fe11e 	bne	r20,r4,4dd8 <_dtoa_r+0x1378>
    4e54:	e505883a 	add	r2,fp,r20
    4e58:	173fffc4 	addi	fp,r2,-1
    4e5c:	0025883a 	mov	r18,zero
    4e60:	04cff834 	movhi	r19,16352
    4e64:	b009883a 	mov	r4,r22
    4e68:	b80b883a 	mov	r5,r23
    4e6c:	900d883a 	mov	r6,r18
    4e70:	980f883a 	mov	r7,r19
    4e74:	000971c0 	call	971c <__adddf3>
    4e78:	180b883a 	mov	r5,r3
    4e7c:	1009883a 	mov	r4,r2
    4e80:	800d883a 	mov	r6,r16
    4e84:	880f883a 	mov	r7,r17
    4e88:	0009fcc0 	call	9fcc <__ltdf2>
    4e8c:	103cab16 	blt	r2,zero,413c <_dtoa_r+0x6dc>
    4e90:	0009883a 	mov	r4,zero
    4e94:	980b883a 	mov	r5,r19
    4e98:	b80f883a 	mov	r7,r23
    4e9c:	b00d883a 	mov	r6,r22
    4ea0:	000969c0 	call	969c <__subdf3>
    4ea4:	180b883a 	mov	r5,r3
    4ea8:	880f883a 	mov	r7,r17
    4eac:	1009883a 	mov	r4,r2
    4eb0:	800d883a 	mov	r6,r16
    4eb4:	0009ebc0 	call	9ebc <__gtdf2>
    4eb8:	00bc470e 	bge	zero,r2,3fd8 <_dtoa_r+0x578>
    4ebc:	00c00c04 	movi	r3,48
    4ec0:	e73fffc4 	addi	fp,fp,-1
    4ec4:	e0800007 	ldb	r2,0(fp)
    4ec8:	10fffd26 	beq	r2,r3,4ec0 <_dtoa_r+0x1460>
    4ecc:	d9800417 	ldw	r6,16(sp)
    4ed0:	e7000044 	addi	fp,fp,1
    4ed4:	d9800d15 	stw	r6,52(sp)
    4ed8:	003cab06 	br	4188 <_dtoa_r+0x728>
    4edc:	d8c00f17 	ldw	r3,60(sp)
    4ee0:	d9001117 	ldw	r4,68(sp)
    4ee4:	20e1c83a 	sub	r16,r4,r3
    4ee8:	0007883a 	mov	r3,zero
    4eec:	003d9b06 	br	455c <_dtoa_r+0xafc>
    4ef0:	00800e44 	movi	r2,57
    4ef4:	b0800005 	stb	r2,0(r22)
    4ef8:	b5800044 	addi	r22,r22,1
    4efc:	003dc106 	br	4604 <_dtoa_r+0xba4>
    4f00:	05800084 	movi	r22,2
    4f04:	003bf706 	br	3ee4 <_dtoa_r+0x484>
    4f08:	d9000f17 	ldw	r4,60(sp)
    4f0c:	013c000e 	bge	zero,r4,3f10 <_dtoa_r+0x4b0>
    4f10:	d9800e17 	ldw	r6,56(sp)
    4f14:	01bc300e 	bge	zero,r6,3fd8 <_dtoa_r+0x578>
    4f18:	0005883a 	mov	r2,zero
    4f1c:	00d00934 	movhi	r3,16420
    4f20:	a80b883a 	mov	r5,r21
    4f24:	180f883a 	mov	r7,r3
    4f28:	a009883a 	mov	r4,r20
    4f2c:	100d883a 	mov	r6,r2
    4f30:	00097900 	call	9790 <__muldf3>
    4f34:	b1000044 	addi	r4,r22,1
    4f38:	1021883a 	mov	r16,r2
    4f3c:	1823883a 	mov	r17,r3
    4f40:	000a0540 	call	a054 <__floatsidf>
    4f44:	880b883a 	mov	r5,r17
    4f48:	8009883a 	mov	r4,r16
    4f4c:	180f883a 	mov	r7,r3
    4f50:	100d883a 	mov	r6,r2
    4f54:	00097900 	call	9790 <__muldf3>
    4f58:	0011883a 	mov	r8,zero
    4f5c:	02500734 	movhi	r9,16412
    4f60:	180b883a 	mov	r5,r3
    4f64:	480f883a 	mov	r7,r9
    4f68:	1009883a 	mov	r4,r2
    4f6c:	400d883a 	mov	r6,r8
    4f70:	000971c0 	call	971c <__adddf3>
    4f74:	102d883a 	mov	r22,r2
    4f78:	00bf3034 	movhi	r2,64704
    4f7c:	10ef883a 	add	r23,r2,r3
    4f80:	d8800d17 	ldw	r2,52(sp)
    4f84:	d8c00e17 	ldw	r3,56(sp)
    4f88:	8029883a 	mov	r20,r16
    4f8c:	10bfffc4 	addi	r2,r2,-1
    4f90:	882b883a 	mov	r21,r17
    4f94:	d8800415 	stw	r2,16(sp)
    4f98:	d8c00315 	stw	r3,12(sp)
    4f9c:	003e8306 	br	49ac <_dtoa_r+0xf4c>
    4fa0:	d8800117 	ldw	r2,4(sp)
    4fa4:	dc001117 	ldw	r16,68(sp)
    4fa8:	dc801017 	ldw	r18,64(sp)
    4fac:	00c00d84 	movi	r3,54
    4fb0:	1887c83a 	sub	r3,r3,r2
    4fb4:	003d6906 	br	455c <_dtoa_r+0xafc>
    4fb8:	01800044 	movi	r6,1
    4fbc:	3021883a 	mov	r16,r6
    4fc0:	d9800f15 	stw	r6,60(sp)
    4fc4:	d9802615 	stw	r6,152(sp)
    4fc8:	d9800e15 	stw	r6,56(sp)
    4fcc:	003b9306 	br	3e1c <_dtoa_r+0x3bc>
    4fd0:	b021883a 	mov	r16,r22
    4fd4:	dd800f15 	stw	r22,60(sp)
    4fd8:	003b9006 	br	3e1c <_dtoa_r+0x3bc>
    4fdc:	103e221e 	bne	r2,zero,4868 <_dtoa_r+0xe08>
    4fe0:	b880004c 	andi	r2,r23,1
    4fe4:	1005003a 	cmpeq	r2,r2,zero
    4fe8:	103e1f1e 	bne	r2,zero,4868 <_dtoa_r+0xe08>
    4fec:	003e1b06 	br	485c <_dtoa_r+0xdfc>
    4ff0:	d9001617 	ldw	r4,88(sp)
    4ff4:	980b883a 	mov	r5,r19
    4ff8:	01800284 	movi	r6,10
    4ffc:	000f883a 	mov	r7,zero
    5000:	00072080 	call	7208 <__multadd>
    5004:	d8c00e17 	ldw	r3,56(sp)
    5008:	1027883a 	mov	r19,r2
    500c:	d8c00f15 	stw	r3,60(sp)
    5010:	003cd306 	br	4360 <_dtoa_r+0x900>

00005014 <_fflush_r>:
    5014:	defffb04 	addi	sp,sp,-20
    5018:	dcc00315 	stw	r19,12(sp)
    501c:	dc800215 	stw	r18,8(sp)
    5020:	dfc00415 	stw	ra,16(sp)
    5024:	dc400115 	stw	r17,4(sp)
    5028:	dc000015 	stw	r16,0(sp)
    502c:	2027883a 	mov	r19,r4
    5030:	2825883a 	mov	r18,r5
    5034:	20000226 	beq	r4,zero,5040 <_fflush_r+0x2c>
    5038:	20800e17 	ldw	r2,56(r4)
    503c:	10005626 	beq	r2,zero,5198 <_fflush_r+0x184>
    5040:	9100030b 	ldhu	r4,12(r18)
    5044:	20ffffcc 	andi	r3,r4,65535
    5048:	18e0001c 	xori	r3,r3,32768
    504c:	18e00004 	addi	r3,r3,-32768
    5050:	1880020c 	andi	r2,r3,8
    5054:	1000261e 	bne	r2,zero,50f0 <_fflush_r+0xdc>
    5058:	90c00117 	ldw	r3,4(r18)
    505c:	20820014 	ori	r2,r4,2048
    5060:	9080030d 	sth	r2,12(r18)
    5064:	1009883a 	mov	r4,r2
    5068:	00c0400e 	bge	zero,r3,516c <_fflush_r+0x158>
    506c:	92000a17 	ldw	r8,40(r18)
    5070:	40004026 	beq	r8,zero,5174 <_fflush_r+0x160>
    5074:	2084000c 	andi	r2,r4,4096
    5078:	10005326 	beq	r2,zero,51c8 <_fflush_r+0x1b4>
    507c:	94001417 	ldw	r16,80(r18)
    5080:	9080030b 	ldhu	r2,12(r18)
    5084:	1080010c 	andi	r2,r2,4
    5088:	1000481e 	bne	r2,zero,51ac <_fflush_r+0x198>
    508c:	91400717 	ldw	r5,28(r18)
    5090:	9809883a 	mov	r4,r19
    5094:	800d883a 	mov	r6,r16
    5098:	000f883a 	mov	r7,zero
    509c:	403ee83a 	callr	r8
    50a0:	8080261e 	bne	r16,r2,513c <_fflush_r+0x128>
    50a4:	9080030b 	ldhu	r2,12(r18)
    50a8:	91000417 	ldw	r4,16(r18)
    50ac:	90000115 	stw	zero,4(r18)
    50b0:	10bdffcc 	andi	r2,r2,63487
    50b4:	10ffffcc 	andi	r3,r2,65535
    50b8:	18c4000c 	andi	r3,r3,4096
    50bc:	9080030d 	sth	r2,12(r18)
    50c0:	91000015 	stw	r4,0(r18)
    50c4:	18002b26 	beq	r3,zero,5174 <_fflush_r+0x160>
    50c8:	0007883a 	mov	r3,zero
    50cc:	1805883a 	mov	r2,r3
    50d0:	94001415 	stw	r16,80(r18)
    50d4:	dfc00417 	ldw	ra,16(sp)
    50d8:	dcc00317 	ldw	r19,12(sp)
    50dc:	dc800217 	ldw	r18,8(sp)
    50e0:	dc400117 	ldw	r17,4(sp)
    50e4:	dc000017 	ldw	r16,0(sp)
    50e8:	dec00504 	addi	sp,sp,20
    50ec:	f800283a 	ret
    50f0:	94400417 	ldw	r17,16(r18)
    50f4:	88001f26 	beq	r17,zero,5174 <_fflush_r+0x160>
    50f8:	90800017 	ldw	r2,0(r18)
    50fc:	18c000cc 	andi	r3,r3,3
    5100:	94400015 	stw	r17,0(r18)
    5104:	1461c83a 	sub	r16,r2,r17
    5108:	18002526 	beq	r3,zero,51a0 <_fflush_r+0x18c>
    510c:	0005883a 	mov	r2,zero
    5110:	90800215 	stw	r2,8(r18)
    5114:	0400170e 	bge	zero,r16,5174 <_fflush_r+0x160>
    5118:	90c00917 	ldw	r3,36(r18)
    511c:	91400717 	ldw	r5,28(r18)
    5120:	880d883a 	mov	r6,r17
    5124:	800f883a 	mov	r7,r16
    5128:	9809883a 	mov	r4,r19
    512c:	183ee83a 	callr	r3
    5130:	88a3883a 	add	r17,r17,r2
    5134:	80a1c83a 	sub	r16,r16,r2
    5138:	00bff616 	blt	zero,r2,5114 <_fflush_r+0x100>
    513c:	9080030b 	ldhu	r2,12(r18)
    5140:	00ffffc4 	movi	r3,-1
    5144:	10801014 	ori	r2,r2,64
    5148:	9080030d 	sth	r2,12(r18)
    514c:	1805883a 	mov	r2,r3
    5150:	dfc00417 	ldw	ra,16(sp)
    5154:	dcc00317 	ldw	r19,12(sp)
    5158:	dc800217 	ldw	r18,8(sp)
    515c:	dc400117 	ldw	r17,4(sp)
    5160:	dc000017 	ldw	r16,0(sp)
    5164:	dec00504 	addi	sp,sp,20
    5168:	f800283a 	ret
    516c:	90800f17 	ldw	r2,60(r18)
    5170:	00bfbe16 	blt	zero,r2,506c <_fflush_r+0x58>
    5174:	0007883a 	mov	r3,zero
    5178:	1805883a 	mov	r2,r3
    517c:	dfc00417 	ldw	ra,16(sp)
    5180:	dcc00317 	ldw	r19,12(sp)
    5184:	dc800217 	ldw	r18,8(sp)
    5188:	dc400117 	ldw	r17,4(sp)
    518c:	dc000017 	ldw	r16,0(sp)
    5190:	dec00504 	addi	sp,sp,20
    5194:	f800283a 	ret
    5198:	00052ac0 	call	52ac <__sinit>
    519c:	003fa806 	br	5040 <_fflush_r+0x2c>
    51a0:	90800517 	ldw	r2,20(r18)
    51a4:	90800215 	stw	r2,8(r18)
    51a8:	003fda06 	br	5114 <_fflush_r+0x100>
    51ac:	90800117 	ldw	r2,4(r18)
    51b0:	90c00c17 	ldw	r3,48(r18)
    51b4:	80a1c83a 	sub	r16,r16,r2
    51b8:	183fb426 	beq	r3,zero,508c <_fflush_r+0x78>
    51bc:	90800f17 	ldw	r2,60(r18)
    51c0:	80a1c83a 	sub	r16,r16,r2
    51c4:	003fb106 	br	508c <_fflush_r+0x78>
    51c8:	91400717 	ldw	r5,28(r18)
    51cc:	9809883a 	mov	r4,r19
    51d0:	000d883a 	mov	r6,zero
    51d4:	01c00044 	movi	r7,1
    51d8:	403ee83a 	callr	r8
    51dc:	1021883a 	mov	r16,r2
    51e0:	00bfffc4 	movi	r2,-1
    51e4:	80800226 	beq	r16,r2,51f0 <_fflush_r+0x1dc>
    51e8:	92000a17 	ldw	r8,40(r18)
    51ec:	003fa406 	br	5080 <_fflush_r+0x6c>
    51f0:	98c00017 	ldw	r3,0(r19)
    51f4:	00800744 	movi	r2,29
    51f8:	18bfde26 	beq	r3,r2,5174 <_fflush_r+0x160>
    51fc:	9080030b 	ldhu	r2,12(r18)
    5200:	8007883a 	mov	r3,r16
    5204:	10801014 	ori	r2,r2,64
    5208:	9080030d 	sth	r2,12(r18)
    520c:	003fcf06 	br	514c <_fflush_r+0x138>

00005210 <fflush>:
    5210:	01400034 	movhi	r5,0
    5214:	29540504 	addi	r5,r5,20500
    5218:	2007883a 	mov	r3,r4
    521c:	20000526 	beq	r4,zero,5234 <fflush+0x24>
    5220:	00800074 	movhi	r2,1
    5224:	10bd0504 	addi	r2,r2,-3052
    5228:	11000017 	ldw	r4,0(r2)
    522c:	180b883a 	mov	r5,r3
    5230:	00050141 	jmpi	5014 <_fflush_r>
    5234:	00800074 	movhi	r2,1
    5238:	10bd0604 	addi	r2,r2,-3048
    523c:	11000017 	ldw	r4,0(r2)
    5240:	0005e141 	jmpi	5e14 <_fwalk_reent>

00005244 <std>:
    5244:	00800034 	movhi	r2,0
    5248:	109f7104 	addi	r2,r2,32196
    524c:	20800b15 	stw	r2,44(r4)
    5250:	00800034 	movhi	r2,0
    5254:	109fac04 	addi	r2,r2,32432
    5258:	20800815 	stw	r2,32(r4)
    525c:	00c00034 	movhi	r3,0
    5260:	18df8d04 	addi	r3,r3,32308
    5264:	00800034 	movhi	r2,0
    5268:	109f7304 	addi	r2,r2,32204
    526c:	2140030d 	sth	r5,12(r4)
    5270:	2180038d 	sth	r6,14(r4)
    5274:	20c00915 	stw	r3,36(r4)
    5278:	20800a15 	stw	r2,40(r4)
    527c:	20000015 	stw	zero,0(r4)
    5280:	20000115 	stw	zero,4(r4)
    5284:	20000215 	stw	zero,8(r4)
    5288:	20000415 	stw	zero,16(r4)
    528c:	20000515 	stw	zero,20(r4)
    5290:	20000615 	stw	zero,24(r4)
    5294:	21000715 	stw	r4,28(r4)
    5298:	f800283a 	ret

0000529c <__sfp_lock_acquire>:
    529c:	f800283a 	ret

000052a0 <__sfp_lock_release>:
    52a0:	f800283a 	ret

000052a4 <__sinit_lock_acquire>:
    52a4:	f800283a 	ret

000052a8 <__sinit_lock_release>:
    52a8:	f800283a 	ret

000052ac <__sinit>:
    52ac:	20800e17 	ldw	r2,56(r4)
    52b0:	defffd04 	addi	sp,sp,-12
    52b4:	dc400115 	stw	r17,4(sp)
    52b8:	dc000015 	stw	r16,0(sp)
    52bc:	dfc00215 	stw	ra,8(sp)
    52c0:	04400044 	movi	r17,1
    52c4:	01400104 	movi	r5,4
    52c8:	000d883a 	mov	r6,zero
    52cc:	2021883a 	mov	r16,r4
    52d0:	2200bb04 	addi	r8,r4,748
    52d4:	200f883a 	mov	r7,r4
    52d8:	10000526 	beq	r2,zero,52f0 <__sinit+0x44>
    52dc:	dfc00217 	ldw	ra,8(sp)
    52e0:	dc400117 	ldw	r17,4(sp)
    52e4:	dc000017 	ldw	r16,0(sp)
    52e8:	dec00304 	addi	sp,sp,12
    52ec:	f800283a 	ret
    52f0:	21000117 	ldw	r4,4(r4)
    52f4:	00800034 	movhi	r2,0
    52f8:	1094e404 	addi	r2,r2,21392
    52fc:	00c000c4 	movi	r3,3
    5300:	80800f15 	stw	r2,60(r16)
    5304:	80c0b915 	stw	r3,740(r16)
    5308:	8200ba15 	stw	r8,744(r16)
    530c:	84400e15 	stw	r17,56(r16)
    5310:	8000b815 	stw	zero,736(r16)
    5314:	00052440 	call	5244 <std>
    5318:	81000217 	ldw	r4,8(r16)
    531c:	880d883a 	mov	r6,r17
    5320:	800f883a 	mov	r7,r16
    5324:	01400284 	movi	r5,10
    5328:	00052440 	call	5244 <std>
    532c:	81000317 	ldw	r4,12(r16)
    5330:	800f883a 	mov	r7,r16
    5334:	01400484 	movi	r5,18
    5338:	01800084 	movi	r6,2
    533c:	dfc00217 	ldw	ra,8(sp)
    5340:	dc400117 	ldw	r17,4(sp)
    5344:	dc000017 	ldw	r16,0(sp)
    5348:	dec00304 	addi	sp,sp,12
    534c:	00052441 	jmpi	5244 <std>

00005350 <__fp_lock>:
    5350:	0005883a 	mov	r2,zero
    5354:	f800283a 	ret

00005358 <__fp_unlock>:
    5358:	0005883a 	mov	r2,zero
    535c:	f800283a 	ret

00005360 <__fp_unlock_all>:
    5360:	00800074 	movhi	r2,1
    5364:	10bd0504 	addi	r2,r2,-3052
    5368:	11000017 	ldw	r4,0(r2)
    536c:	01400034 	movhi	r5,0
    5370:	2954d604 	addi	r5,r5,21336
    5374:	0005edc1 	jmpi	5edc <_fwalk>

00005378 <__fp_lock_all>:
    5378:	00800074 	movhi	r2,1
    537c:	10bd0504 	addi	r2,r2,-3052
    5380:	11000017 	ldw	r4,0(r2)
    5384:	01400034 	movhi	r5,0
    5388:	2954d404 	addi	r5,r5,21328
    538c:	0005edc1 	jmpi	5edc <_fwalk>

00005390 <_cleanup_r>:
    5390:	01400074 	movhi	r5,1
    5394:	2960f604 	addi	r5,r5,-31784
    5398:	0005edc1 	jmpi	5edc <_fwalk>

0000539c <_cleanup>:
    539c:	00800074 	movhi	r2,1
    53a0:	10bd0604 	addi	r2,r2,-3048
    53a4:	11000017 	ldw	r4,0(r2)
    53a8:	00053901 	jmpi	5390 <_cleanup_r>

000053ac <__sfmoreglue>:
    53ac:	defffc04 	addi	sp,sp,-16
    53b0:	dc000015 	stw	r16,0(sp)
    53b4:	2821883a 	mov	r16,r5
    53b8:	dc400115 	stw	r17,4(sp)
    53bc:	01401704 	movi	r5,92
    53c0:	2023883a 	mov	r17,r4
    53c4:	8009883a 	mov	r4,r16
    53c8:	dfc00315 	stw	ra,12(sp)
    53cc:	dcc00215 	stw	r19,8(sp)
    53d0:	0000af40 	call	af4 <__mulsi3>
    53d4:	11400304 	addi	r5,r2,12
    53d8:	8809883a 	mov	r4,r17
    53dc:	1027883a 	mov	r19,r2
    53e0:	0000c780 	call	c78 <_malloc_r>
    53e4:	10c00304 	addi	r3,r2,12
    53e8:	1023883a 	mov	r17,r2
    53ec:	1809883a 	mov	r4,r3
    53f0:	980d883a 	mov	r6,r19
    53f4:	000b883a 	mov	r5,zero
    53f8:	10000b26 	beq	r2,zero,5428 <__sfmoreglue+0x7c>
    53fc:	14000115 	stw	r16,4(r2)
    5400:	10c00215 	stw	r3,8(r2)
    5404:	10000015 	stw	zero,0(r2)
    5408:	00064500 	call	6450 <memset>
    540c:	8805883a 	mov	r2,r17
    5410:	dfc00317 	ldw	ra,12(sp)
    5414:	dcc00217 	ldw	r19,8(sp)
    5418:	dc400117 	ldw	r17,4(sp)
    541c:	dc000017 	ldw	r16,0(sp)
    5420:	dec00404 	addi	sp,sp,16
    5424:	f800283a 	ret
    5428:	0023883a 	mov	r17,zero
    542c:	8805883a 	mov	r2,r17
    5430:	dfc00317 	ldw	ra,12(sp)
    5434:	dcc00217 	ldw	r19,8(sp)
    5438:	dc400117 	ldw	r17,4(sp)
    543c:	dc000017 	ldw	r16,0(sp)
    5440:	dec00404 	addi	sp,sp,16
    5444:	f800283a 	ret

00005448 <__sfp>:
    5448:	defffd04 	addi	sp,sp,-12
    544c:	00800074 	movhi	r2,1
    5450:	10bd0604 	addi	r2,r2,-3048
    5454:	dc000015 	stw	r16,0(sp)
    5458:	14000017 	ldw	r16,0(r2)
    545c:	dc400115 	stw	r17,4(sp)
    5460:	dfc00215 	stw	ra,8(sp)
    5464:	80800e17 	ldw	r2,56(r16)
    5468:	2023883a 	mov	r17,r4
    546c:	10002626 	beq	r2,zero,5508 <__sfp+0xc0>
    5470:	8400b804 	addi	r16,r16,736
    5474:	80800117 	ldw	r2,4(r16)
    5478:	81000217 	ldw	r4,8(r16)
    547c:	10ffffc4 	addi	r3,r2,-1
    5480:	18000916 	blt	r3,zero,54a8 <__sfp+0x60>
    5484:	2080030f 	ldh	r2,12(r4)
    5488:	10000b26 	beq	r2,zero,54b8 <__sfp+0x70>
    548c:	017fffc4 	movi	r5,-1
    5490:	00000206 	br	549c <__sfp+0x54>
    5494:	2080030f 	ldh	r2,12(r4)
    5498:	10000726 	beq	r2,zero,54b8 <__sfp+0x70>
    549c:	18ffffc4 	addi	r3,r3,-1
    54a0:	21001704 	addi	r4,r4,92
    54a4:	197ffb1e 	bne	r3,r5,5494 <__sfp+0x4c>
    54a8:	80800017 	ldw	r2,0(r16)
    54ac:	10001926 	beq	r2,zero,5514 <__sfp+0xcc>
    54b0:	1021883a 	mov	r16,r2
    54b4:	003fef06 	br	5474 <__sfp+0x2c>
    54b8:	00bfffc4 	movi	r2,-1
    54bc:	00c00044 	movi	r3,1
    54c0:	2080038d 	sth	r2,14(r4)
    54c4:	20c0030d 	sth	r3,12(r4)
    54c8:	20000015 	stw	zero,0(r4)
    54cc:	20000215 	stw	zero,8(r4)
    54d0:	20000115 	stw	zero,4(r4)
    54d4:	20000415 	stw	zero,16(r4)
    54d8:	20000515 	stw	zero,20(r4)
    54dc:	20000615 	stw	zero,24(r4)
    54e0:	20000c15 	stw	zero,48(r4)
    54e4:	20000d15 	stw	zero,52(r4)
    54e8:	20001115 	stw	zero,68(r4)
    54ec:	20001215 	stw	zero,72(r4)
    54f0:	2005883a 	mov	r2,r4
    54f4:	dfc00217 	ldw	ra,8(sp)
    54f8:	dc400117 	ldw	r17,4(sp)
    54fc:	dc000017 	ldw	r16,0(sp)
    5500:	dec00304 	addi	sp,sp,12
    5504:	f800283a 	ret
    5508:	8009883a 	mov	r4,r16
    550c:	00052ac0 	call	52ac <__sinit>
    5510:	003fd706 	br	5470 <__sfp+0x28>
    5514:	8809883a 	mov	r4,r17
    5518:	01400104 	movi	r5,4
    551c:	00053ac0 	call	53ac <__sfmoreglue>
    5520:	80800015 	stw	r2,0(r16)
    5524:	103fe21e 	bne	r2,zero,54b0 <__sfp+0x68>
    5528:	00800304 	movi	r2,12
    552c:	0009883a 	mov	r4,zero
    5530:	88800015 	stw	r2,0(r17)
    5534:	003fee06 	br	54f0 <__sfp+0xa8>

00005538 <_malloc_trim_r>:
    5538:	defffb04 	addi	sp,sp,-20
    553c:	dcc00315 	stw	r19,12(sp)
    5540:	04c00074 	movhi	r19,1
    5544:	9cf77e04 	addi	r19,r19,-8712
    5548:	dc800215 	stw	r18,8(sp)
    554c:	dc400115 	stw	r17,4(sp)
    5550:	dc000015 	stw	r16,0(sp)
    5554:	2823883a 	mov	r17,r5
    5558:	2025883a 	mov	r18,r4
    555c:	dfc00415 	stw	ra,16(sp)
    5560:	000b2b80 	call	b2b8 <__malloc_lock>
    5564:	98800217 	ldw	r2,8(r19)
    5568:	9009883a 	mov	r4,r18
    556c:	000b883a 	mov	r5,zero
    5570:	10c00117 	ldw	r3,4(r2)
    5574:	00bfff04 	movi	r2,-4
    5578:	18a0703a 	and	r16,r3,r2
    557c:	8463c83a 	sub	r17,r16,r17
    5580:	8c43fbc4 	addi	r17,r17,4079
    5584:	8822d33a 	srli	r17,r17,12
    5588:	0083ffc4 	movi	r2,4095
    558c:	8c7fffc4 	addi	r17,r17,-1
    5590:	8822933a 	slli	r17,r17,12
    5594:	1440060e 	bge	r2,r17,55b0 <_malloc_trim_r+0x78>
    5598:	00015080 	call	1508 <_sbrk_r>
    559c:	98c00217 	ldw	r3,8(r19)
    55a0:	9009883a 	mov	r4,r18
    55a4:	044bc83a 	sub	r5,zero,r17
    55a8:	80c7883a 	add	r3,r16,r3
    55ac:	10c00926 	beq	r2,r3,55d4 <_malloc_trim_r+0x9c>
    55b0:	000b2d80 	call	b2d8 <__malloc_unlock>
    55b4:	0005883a 	mov	r2,zero
    55b8:	dfc00417 	ldw	ra,16(sp)
    55bc:	dcc00317 	ldw	r19,12(sp)
    55c0:	dc800217 	ldw	r18,8(sp)
    55c4:	dc400117 	ldw	r17,4(sp)
    55c8:	dc000017 	ldw	r16,0(sp)
    55cc:	dec00504 	addi	sp,sp,20
    55d0:	f800283a 	ret
    55d4:	9009883a 	mov	r4,r18
    55d8:	00015080 	call	1508 <_sbrk_r>
    55dc:	844dc83a 	sub	r6,r16,r17
    55e0:	00ffffc4 	movi	r3,-1
    55e4:	9009883a 	mov	r4,r18
    55e8:	000b883a 	mov	r5,zero
    55ec:	01c00074 	movhi	r7,1
    55f0:	39c3d804 	addi	r7,r7,3936
    55f4:	31800054 	ori	r6,r6,1
    55f8:	10c00926 	beq	r2,r3,5620 <_malloc_trim_r+0xe8>
    55fc:	38800017 	ldw	r2,0(r7)
    5600:	98c00217 	ldw	r3,8(r19)
    5604:	9009883a 	mov	r4,r18
    5608:	1445c83a 	sub	r2,r2,r17
    560c:	38800015 	stw	r2,0(r7)
    5610:	19800115 	stw	r6,4(r3)
    5614:	000b2d80 	call	b2d8 <__malloc_unlock>
    5618:	00800044 	movi	r2,1
    561c:	003fe606 	br	55b8 <_malloc_trim_r+0x80>
    5620:	00015080 	call	1508 <_sbrk_r>
    5624:	99800217 	ldw	r6,8(r19)
    5628:	100f883a 	mov	r7,r2
    562c:	9009883a 	mov	r4,r18
    5630:	1187c83a 	sub	r3,r2,r6
    5634:	008003c4 	movi	r2,15
    5638:	19400054 	ori	r5,r3,1
    563c:	10ffdc0e 	bge	r2,r3,55b0 <_malloc_trim_r+0x78>
    5640:	00800074 	movhi	r2,1
    5644:	10bd0804 	addi	r2,r2,-3040
    5648:	10c00017 	ldw	r3,0(r2)
    564c:	00800074 	movhi	r2,1
    5650:	1083d804 	addi	r2,r2,3936
    5654:	31400115 	stw	r5,4(r6)
    5658:	38c7c83a 	sub	r3,r7,r3
    565c:	10c00015 	stw	r3,0(r2)
    5660:	003fd306 	br	55b0 <_malloc_trim_r+0x78>

00005664 <_free_r>:
    5664:	defffd04 	addi	sp,sp,-12
    5668:	dc400115 	stw	r17,4(sp)
    566c:	dc000015 	stw	r16,0(sp)
    5670:	dfc00215 	stw	ra,8(sp)
    5674:	2821883a 	mov	r16,r5
    5678:	2023883a 	mov	r17,r4
    567c:	28005a26 	beq	r5,zero,57e8 <_free_r+0x184>
    5680:	000b2b80 	call	b2b8 <__malloc_lock>
    5684:	823ffe04 	addi	r8,r16,-8
    5688:	41400117 	ldw	r5,4(r8)
    568c:	00bfff84 	movi	r2,-2
    5690:	02800074 	movhi	r10,1
    5694:	52b77e04 	addi	r10,r10,-8712
    5698:	288e703a 	and	r7,r5,r2
    569c:	41cd883a 	add	r6,r8,r7
    56a0:	30c00117 	ldw	r3,4(r6)
    56a4:	51000217 	ldw	r4,8(r10)
    56a8:	00bfff04 	movi	r2,-4
    56ac:	1892703a 	and	r9,r3,r2
    56b0:	5017883a 	mov	r11,r10
    56b4:	31006726 	beq	r6,r4,5854 <_free_r+0x1f0>
    56b8:	2880004c 	andi	r2,r5,1
    56bc:	1005003a 	cmpeq	r2,r2,zero
    56c0:	32400115 	stw	r9,4(r6)
    56c4:	10001a1e 	bne	r2,zero,5730 <_free_r+0xcc>
    56c8:	000b883a 	mov	r5,zero
    56cc:	3247883a 	add	r3,r6,r9
    56d0:	18800117 	ldw	r2,4(r3)
    56d4:	1080004c 	andi	r2,r2,1
    56d8:	1000231e 	bne	r2,zero,5768 <_free_r+0x104>
    56dc:	280ac03a 	cmpne	r5,r5,zero
    56e0:	3a4f883a 	add	r7,r7,r9
    56e4:	2800451e 	bne	r5,zero,57fc <_free_r+0x198>
    56e8:	31000217 	ldw	r4,8(r6)
    56ec:	00800074 	movhi	r2,1
    56f0:	10b78004 	addi	r2,r2,-8704
    56f4:	20807b26 	beq	r4,r2,58e4 <_free_r+0x280>
    56f8:	30800317 	ldw	r2,12(r6)
    56fc:	3a07883a 	add	r3,r7,r8
    5700:	19c00015 	stw	r7,0(r3)
    5704:	11000215 	stw	r4,8(r2)
    5708:	20800315 	stw	r2,12(r4)
    570c:	38800054 	ori	r2,r7,1
    5710:	40800115 	stw	r2,4(r8)
    5714:	28001a26 	beq	r5,zero,5780 <_free_r+0x11c>
    5718:	8809883a 	mov	r4,r17
    571c:	dfc00217 	ldw	ra,8(sp)
    5720:	dc400117 	ldw	r17,4(sp)
    5724:	dc000017 	ldw	r16,0(sp)
    5728:	dec00304 	addi	sp,sp,12
    572c:	000b2d81 	jmpi	b2d8 <__malloc_unlock>
    5730:	80bffe17 	ldw	r2,-8(r16)
    5734:	50c00204 	addi	r3,r10,8
    5738:	4091c83a 	sub	r8,r8,r2
    573c:	41000217 	ldw	r4,8(r8)
    5740:	388f883a 	add	r7,r7,r2
    5744:	20c06126 	beq	r4,r3,58cc <_free_r+0x268>
    5748:	40800317 	ldw	r2,12(r8)
    574c:	3247883a 	add	r3,r6,r9
    5750:	000b883a 	mov	r5,zero
    5754:	11000215 	stw	r4,8(r2)
    5758:	20800315 	stw	r2,12(r4)
    575c:	18800117 	ldw	r2,4(r3)
    5760:	1080004c 	andi	r2,r2,1
    5764:	103fdd26 	beq	r2,zero,56dc <_free_r+0x78>
    5768:	38800054 	ori	r2,r7,1
    576c:	3a07883a 	add	r3,r7,r8
    5770:	280ac03a 	cmpne	r5,r5,zero
    5774:	40800115 	stw	r2,4(r8)
    5778:	19c00015 	stw	r7,0(r3)
    577c:	283fe61e 	bne	r5,zero,5718 <_free_r+0xb4>
    5780:	00807fc4 	movi	r2,511
    5784:	11c01f2e 	bgeu	r2,r7,5804 <_free_r+0x1a0>
    5788:	3806d27a 	srli	r3,r7,9
    578c:	1800481e 	bne	r3,zero,58b0 <_free_r+0x24c>
    5790:	3804d0fa 	srli	r2,r7,3
    5794:	100690fa 	slli	r3,r2,3
    5798:	1acd883a 	add	r6,r3,r11
    579c:	31400217 	ldw	r5,8(r6)
    57a0:	31405926 	beq	r6,r5,5908 <_free_r+0x2a4>
    57a4:	28800117 	ldw	r2,4(r5)
    57a8:	00ffff04 	movi	r3,-4
    57ac:	10c4703a 	and	r2,r2,r3
    57b0:	3880022e 	bgeu	r7,r2,57bc <_free_r+0x158>
    57b4:	29400217 	ldw	r5,8(r5)
    57b8:	317ffa1e 	bne	r6,r5,57a4 <_free_r+0x140>
    57bc:	29800317 	ldw	r6,12(r5)
    57c0:	41800315 	stw	r6,12(r8)
    57c4:	41400215 	stw	r5,8(r8)
    57c8:	8809883a 	mov	r4,r17
    57cc:	2a000315 	stw	r8,12(r5)
    57d0:	32000215 	stw	r8,8(r6)
    57d4:	dfc00217 	ldw	ra,8(sp)
    57d8:	dc400117 	ldw	r17,4(sp)
    57dc:	dc000017 	ldw	r16,0(sp)
    57e0:	dec00304 	addi	sp,sp,12
    57e4:	000b2d81 	jmpi	b2d8 <__malloc_unlock>
    57e8:	dfc00217 	ldw	ra,8(sp)
    57ec:	dc400117 	ldw	r17,4(sp)
    57f0:	dc000017 	ldw	r16,0(sp)
    57f4:	dec00304 	addi	sp,sp,12
    57f8:	f800283a 	ret
    57fc:	31000217 	ldw	r4,8(r6)
    5800:	003fbd06 	br	56f8 <_free_r+0x94>
    5804:	3806d0fa 	srli	r3,r7,3
    5808:	00800044 	movi	r2,1
    580c:	51400117 	ldw	r5,4(r10)
    5810:	180890fa 	slli	r4,r3,3
    5814:	1807d0ba 	srai	r3,r3,2
    5818:	22c9883a 	add	r4,r4,r11
    581c:	21800217 	ldw	r6,8(r4)
    5820:	10c4983a 	sll	r2,r2,r3
    5824:	41000315 	stw	r4,12(r8)
    5828:	41800215 	stw	r6,8(r8)
    582c:	288ab03a 	or	r5,r5,r2
    5830:	22000215 	stw	r8,8(r4)
    5834:	8809883a 	mov	r4,r17
    5838:	51400115 	stw	r5,4(r10)
    583c:	32000315 	stw	r8,12(r6)
    5840:	dfc00217 	ldw	ra,8(sp)
    5844:	dc400117 	ldw	r17,4(sp)
    5848:	dc000017 	ldw	r16,0(sp)
    584c:	dec00304 	addi	sp,sp,12
    5850:	000b2d81 	jmpi	b2d8 <__malloc_unlock>
    5854:	2880004c 	andi	r2,r5,1
    5858:	3a4d883a 	add	r6,r7,r9
    585c:	1000071e 	bne	r2,zero,587c <_free_r+0x218>
    5860:	80bffe17 	ldw	r2,-8(r16)
    5864:	4091c83a 	sub	r8,r8,r2
    5868:	41000317 	ldw	r4,12(r8)
    586c:	40c00217 	ldw	r3,8(r8)
    5870:	308d883a 	add	r6,r6,r2
    5874:	20c00215 	stw	r3,8(r4)
    5878:	19000315 	stw	r4,12(r3)
    587c:	00800074 	movhi	r2,1
    5880:	10bd0704 	addi	r2,r2,-3044
    5884:	11000017 	ldw	r4,0(r2)
    5888:	30c00054 	ori	r3,r6,1
    588c:	52000215 	stw	r8,8(r10)
    5890:	40c00115 	stw	r3,4(r8)
    5894:	313fa036 	bltu	r6,r4,5718 <_free_r+0xb4>
    5898:	00800074 	movhi	r2,1
    589c:	1083af04 	addi	r2,r2,3772
    58a0:	11400017 	ldw	r5,0(r2)
    58a4:	8809883a 	mov	r4,r17
    58a8:	00055380 	call	5538 <_malloc_trim_r>
    58ac:	003f9a06 	br	5718 <_free_r+0xb4>
    58b0:	00800104 	movi	r2,4
    58b4:	10c0072e 	bgeu	r2,r3,58d4 <_free_r+0x270>
    58b8:	00800504 	movi	r2,20
    58bc:	10c01936 	bltu	r2,r3,5924 <_free_r+0x2c0>
    58c0:	188016c4 	addi	r2,r3,91
    58c4:	100690fa 	slli	r3,r2,3
    58c8:	003fb306 	br	5798 <_free_r+0x134>
    58cc:	01400044 	movi	r5,1
    58d0:	003f7e06 	br	56cc <_free_r+0x68>
    58d4:	3804d1ba 	srli	r2,r7,6
    58d8:	10800e04 	addi	r2,r2,56
    58dc:	100690fa 	slli	r3,r2,3
    58e0:	003fad06 	br	5798 <_free_r+0x134>
    58e4:	22000315 	stw	r8,12(r4)
    58e8:	22000215 	stw	r8,8(r4)
    58ec:	3a05883a 	add	r2,r7,r8
    58f0:	38c00054 	ori	r3,r7,1
    58f4:	11c00015 	stw	r7,0(r2)
    58f8:	41000215 	stw	r4,8(r8)
    58fc:	40c00115 	stw	r3,4(r8)
    5900:	41000315 	stw	r4,12(r8)
    5904:	003f8406 	br	5718 <_free_r+0xb4>
    5908:	1005d0ba 	srai	r2,r2,2
    590c:	00c00044 	movi	r3,1
    5910:	51000117 	ldw	r4,4(r10)
    5914:	1886983a 	sll	r3,r3,r2
    5918:	20c8b03a 	or	r4,r4,r3
    591c:	51000115 	stw	r4,4(r10)
    5920:	003fa706 	br	57c0 <_free_r+0x15c>
    5924:	00801504 	movi	r2,84
    5928:	10c00436 	bltu	r2,r3,593c <_free_r+0x2d8>
    592c:	3804d33a 	srli	r2,r7,12
    5930:	10801b84 	addi	r2,r2,110
    5934:	100690fa 	slli	r3,r2,3
    5938:	003f9706 	br	5798 <_free_r+0x134>
    593c:	00805504 	movi	r2,340
    5940:	10c00436 	bltu	r2,r3,5954 <_free_r+0x2f0>
    5944:	3804d3fa 	srli	r2,r7,15
    5948:	10801dc4 	addi	r2,r2,119
    594c:	100690fa 	slli	r3,r2,3
    5950:	003f9106 	br	5798 <_free_r+0x134>
    5954:	00815504 	movi	r2,1364
    5958:	10c0032e 	bgeu	r2,r3,5968 <_free_r+0x304>
    595c:	00801f84 	movi	r2,126
    5960:	00c0fc04 	movi	r3,1008
    5964:	003f8c06 	br	5798 <_free_r+0x134>
    5968:	3804d4ba 	srli	r2,r7,18
    596c:	10801f04 	addi	r2,r2,124
    5970:	100690fa 	slli	r3,r2,3
    5974:	003f8806 	br	5798 <_free_r+0x134>

00005978 <__sfvwrite_r>:
    5978:	30800217 	ldw	r2,8(r6)
    597c:	defff504 	addi	sp,sp,-44
    5980:	df000915 	stw	fp,36(sp)
    5984:	dd800715 	stw	r22,28(sp)
    5988:	dc800315 	stw	r18,12(sp)
    598c:	dfc00a15 	stw	ra,40(sp)
    5990:	ddc00815 	stw	r23,32(sp)
    5994:	dd400615 	stw	r21,24(sp)
    5998:	dd000515 	stw	r20,20(sp)
    599c:	dcc00415 	stw	r19,16(sp)
    59a0:	dc400215 	stw	r17,8(sp)
    59a4:	dc000115 	stw	r16,4(sp)
    59a8:	302d883a 	mov	r22,r6
    59ac:	2039883a 	mov	fp,r4
    59b0:	2825883a 	mov	r18,r5
    59b4:	10001c26 	beq	r2,zero,5a28 <__sfvwrite_r+0xb0>
    59b8:	29c0030b 	ldhu	r7,12(r5)
    59bc:	3880020c 	andi	r2,r7,8
    59c0:	10002726 	beq	r2,zero,5a60 <__sfvwrite_r+0xe8>
    59c4:	28800417 	ldw	r2,16(r5)
    59c8:	10002526 	beq	r2,zero,5a60 <__sfvwrite_r+0xe8>
    59cc:	3880008c 	andi	r2,r7,2
    59d0:	b5400017 	ldw	r21,0(r22)
    59d4:	10002826 	beq	r2,zero,5a78 <__sfvwrite_r+0x100>
    59d8:	0021883a 	mov	r16,zero
    59dc:	0023883a 	mov	r17,zero
    59e0:	880d883a 	mov	r6,r17
    59e4:	e009883a 	mov	r4,fp
    59e8:	00810004 	movi	r2,1024
    59ec:	80006e26 	beq	r16,zero,5ba8 <__sfvwrite_r+0x230>
    59f0:	800f883a 	mov	r7,r16
    59f4:	91400717 	ldw	r5,28(r18)
    59f8:	1400012e 	bgeu	r2,r16,5a00 <__sfvwrite_r+0x88>
    59fc:	100f883a 	mov	r7,r2
    5a00:	90c00917 	ldw	r3,36(r18)
    5a04:	183ee83a 	callr	r3
    5a08:	1007883a 	mov	r3,r2
    5a0c:	80a1c83a 	sub	r16,r16,r2
    5a10:	88a3883a 	add	r17,r17,r2
    5a14:	00806d0e 	bge	zero,r2,5bcc <__sfvwrite_r+0x254>
    5a18:	b0800217 	ldw	r2,8(r22)
    5a1c:	10c5c83a 	sub	r2,r2,r3
    5a20:	b0800215 	stw	r2,8(r22)
    5a24:	103fee1e 	bne	r2,zero,59e0 <__sfvwrite_r+0x68>
    5a28:	0009883a 	mov	r4,zero
    5a2c:	2005883a 	mov	r2,r4
    5a30:	dfc00a17 	ldw	ra,40(sp)
    5a34:	df000917 	ldw	fp,36(sp)
    5a38:	ddc00817 	ldw	r23,32(sp)
    5a3c:	dd800717 	ldw	r22,28(sp)
    5a40:	dd400617 	ldw	r21,24(sp)
    5a44:	dd000517 	ldw	r20,20(sp)
    5a48:	dcc00417 	ldw	r19,16(sp)
    5a4c:	dc800317 	ldw	r18,12(sp)
    5a50:	dc400217 	ldw	r17,8(sp)
    5a54:	dc000117 	ldw	r16,4(sp)
    5a58:	dec00b04 	addi	sp,sp,44
    5a5c:	f800283a 	ret
    5a60:	000352c0 	call	352c <__swsetup_r>
    5a64:	1000e41e 	bne	r2,zero,5df8 <__sfvwrite_r+0x480>
    5a68:	91c0030b 	ldhu	r7,12(r18)
    5a6c:	b5400017 	ldw	r21,0(r22)
    5a70:	3880008c 	andi	r2,r7,2
    5a74:	103fd81e 	bne	r2,zero,59d8 <__sfvwrite_r+0x60>
    5a78:	3880004c 	andi	r2,r7,1
    5a7c:	1005003a 	cmpeq	r2,r2,zero
    5a80:	10005726 	beq	r2,zero,5be0 <__sfvwrite_r+0x268>
    5a84:	0029883a 	mov	r20,zero
    5a88:	002f883a 	mov	r23,zero
    5a8c:	a0004226 	beq	r20,zero,5b98 <__sfvwrite_r+0x220>
    5a90:	3880800c 	andi	r2,r7,512
    5a94:	94000217 	ldw	r16,8(r18)
    5a98:	10008b26 	beq	r2,zero,5cc8 <__sfvwrite_r+0x350>
    5a9c:	800d883a 	mov	r6,r16
    5aa0:	a400a536 	bltu	r20,r16,5d38 <__sfvwrite_r+0x3c0>
    5aa4:	3881200c 	andi	r2,r7,1152
    5aa8:	10002726 	beq	r2,zero,5b48 <__sfvwrite_r+0x1d0>
    5aac:	90800517 	ldw	r2,20(r18)
    5ab0:	92000417 	ldw	r8,16(r18)
    5ab4:	91400017 	ldw	r5,0(r18)
    5ab8:	1087883a 	add	r3,r2,r2
    5abc:	1887883a 	add	r3,r3,r2
    5ac0:	1808d7fa 	srli	r4,r3,31
    5ac4:	2a21c83a 	sub	r16,r5,r8
    5ac8:	80800044 	addi	r2,r16,1
    5acc:	20c9883a 	add	r4,r4,r3
    5ad0:	2027d07a 	srai	r19,r4,1
    5ad4:	a085883a 	add	r2,r20,r2
    5ad8:	980d883a 	mov	r6,r19
    5adc:	9880022e 	bgeu	r19,r2,5ae8 <__sfvwrite_r+0x170>
    5ae0:	1027883a 	mov	r19,r2
    5ae4:	100d883a 	mov	r6,r2
    5ae8:	3881000c 	andi	r2,r7,1024
    5aec:	1000b826 	beq	r2,zero,5dd0 <__sfvwrite_r+0x458>
    5af0:	300b883a 	mov	r5,r6
    5af4:	e009883a 	mov	r4,fp
    5af8:	0000c780 	call	c78 <_malloc_r>
    5afc:	10003126 	beq	r2,zero,5bc4 <__sfvwrite_r+0x24c>
    5b00:	91400417 	ldw	r5,16(r18)
    5b04:	1009883a 	mov	r4,r2
    5b08:	800d883a 	mov	r6,r16
    5b0c:	1023883a 	mov	r17,r2
    5b10:	00062d00 	call	62d0 <memcpy>
    5b14:	90c0030b 	ldhu	r3,12(r18)
    5b18:	00beffc4 	movi	r2,-1025
    5b1c:	1886703a 	and	r3,r3,r2
    5b20:	18c02014 	ori	r3,r3,128
    5b24:	90c0030d 	sth	r3,12(r18)
    5b28:	9c07c83a 	sub	r3,r19,r16
    5b2c:	8c05883a 	add	r2,r17,r16
    5b30:	a00d883a 	mov	r6,r20
    5b34:	a021883a 	mov	r16,r20
    5b38:	90800015 	stw	r2,0(r18)
    5b3c:	90c00215 	stw	r3,8(r18)
    5b40:	94400415 	stw	r17,16(r18)
    5b44:	94c00515 	stw	r19,20(r18)
    5b48:	91000017 	ldw	r4,0(r18)
    5b4c:	b80b883a 	mov	r5,r23
    5b50:	a023883a 	mov	r17,r20
    5b54:	00063700 	call	6370 <memmove>
    5b58:	90c00217 	ldw	r3,8(r18)
    5b5c:	90800017 	ldw	r2,0(r18)
    5b60:	a027883a 	mov	r19,r20
    5b64:	1c07c83a 	sub	r3,r3,r16
    5b68:	1405883a 	add	r2,r2,r16
    5b6c:	90c00215 	stw	r3,8(r18)
    5b70:	a021883a 	mov	r16,r20
    5b74:	90800015 	stw	r2,0(r18)
    5b78:	b0800217 	ldw	r2,8(r22)
    5b7c:	1405c83a 	sub	r2,r2,r16
    5b80:	b0800215 	stw	r2,8(r22)
    5b84:	103fa826 	beq	r2,zero,5a28 <__sfvwrite_r+0xb0>
    5b88:	a469c83a 	sub	r20,r20,r17
    5b8c:	91c0030b 	ldhu	r7,12(r18)
    5b90:	bcef883a 	add	r23,r23,r19
    5b94:	a03fbe1e 	bne	r20,zero,5a90 <__sfvwrite_r+0x118>
    5b98:	adc00017 	ldw	r23,0(r21)
    5b9c:	ad000117 	ldw	r20,4(r21)
    5ba0:	ad400204 	addi	r21,r21,8
    5ba4:	003fb906 	br	5a8c <__sfvwrite_r+0x114>
    5ba8:	ac400017 	ldw	r17,0(r21)
    5bac:	ac000117 	ldw	r16,4(r21)
    5bb0:	ad400204 	addi	r21,r21,8
    5bb4:	003f8a06 	br	59e0 <__sfvwrite_r+0x68>
    5bb8:	91400417 	ldw	r5,16(r18)
    5bbc:	e009883a 	mov	r4,fp
    5bc0:	00056640 	call	5664 <_free_r>
    5bc4:	00800304 	movi	r2,12
    5bc8:	e0800015 	stw	r2,0(fp)
    5bcc:	9080030b 	ldhu	r2,12(r18)
    5bd0:	013fffc4 	movi	r4,-1
    5bd4:	10801014 	ori	r2,r2,64
    5bd8:	9080030d 	sth	r2,12(r18)
    5bdc:	003f9306 	br	5a2c <__sfvwrite_r+0xb4>
    5be0:	0027883a 	mov	r19,zero
    5be4:	002f883a 	mov	r23,zero
    5be8:	d8000015 	stw	zero,0(sp)
    5bec:	0029883a 	mov	r20,zero
    5bf0:	98001e26 	beq	r19,zero,5c6c <__sfvwrite_r+0x2f4>
    5bf4:	d8c00017 	ldw	r3,0(sp)
    5bf8:	1804c03a 	cmpne	r2,r3,zero
    5bfc:	10005e26 	beq	r2,zero,5d78 <__sfvwrite_r+0x400>
    5c00:	9821883a 	mov	r16,r19
    5c04:	a4c0012e 	bgeu	r20,r19,5c0c <__sfvwrite_r+0x294>
    5c08:	a021883a 	mov	r16,r20
    5c0c:	91000017 	ldw	r4,0(r18)
    5c10:	90800417 	ldw	r2,16(r18)
    5c14:	91800217 	ldw	r6,8(r18)
    5c18:	91c00517 	ldw	r7,20(r18)
    5c1c:	1100022e 	bgeu	r2,r4,5c28 <__sfvwrite_r+0x2b0>
    5c20:	31e3883a 	add	r17,r6,r7
    5c24:	8c001616 	blt	r17,r16,5c80 <__sfvwrite_r+0x308>
    5c28:	81c03816 	blt	r16,r7,5d0c <__sfvwrite_r+0x394>
    5c2c:	90c00917 	ldw	r3,36(r18)
    5c30:	91400717 	ldw	r5,28(r18)
    5c34:	e009883a 	mov	r4,fp
    5c38:	b80d883a 	mov	r6,r23
    5c3c:	183ee83a 	callr	r3
    5c40:	1023883a 	mov	r17,r2
    5c44:	00bfe10e 	bge	zero,r2,5bcc <__sfvwrite_r+0x254>
    5c48:	a469c83a 	sub	r20,r20,r17
    5c4c:	a0001826 	beq	r20,zero,5cb0 <__sfvwrite_r+0x338>
    5c50:	b0800217 	ldw	r2,8(r22)
    5c54:	1445c83a 	sub	r2,r2,r17
    5c58:	b0800215 	stw	r2,8(r22)
    5c5c:	103f7226 	beq	r2,zero,5a28 <__sfvwrite_r+0xb0>
    5c60:	9c67c83a 	sub	r19,r19,r17
    5c64:	bc6f883a 	add	r23,r23,r17
    5c68:	983fe21e 	bne	r19,zero,5bf4 <__sfvwrite_r+0x27c>
    5c6c:	adc00017 	ldw	r23,0(r21)
    5c70:	acc00117 	ldw	r19,4(r21)
    5c74:	ad400204 	addi	r21,r21,8
    5c78:	d8000015 	stw	zero,0(sp)
    5c7c:	003fdc06 	br	5bf0 <__sfvwrite_r+0x278>
    5c80:	b80b883a 	mov	r5,r23
    5c84:	880d883a 	mov	r6,r17
    5c88:	00063700 	call	6370 <memmove>
    5c8c:	90c00017 	ldw	r3,0(r18)
    5c90:	e009883a 	mov	r4,fp
    5c94:	900b883a 	mov	r5,r18
    5c98:	1c47883a 	add	r3,r3,r17
    5c9c:	90c00015 	stw	r3,0(r18)
    5ca0:	00050140 	call	5014 <_fflush_r>
    5ca4:	103fc91e 	bne	r2,zero,5bcc <__sfvwrite_r+0x254>
    5ca8:	a469c83a 	sub	r20,r20,r17
    5cac:	a03fe81e 	bne	r20,zero,5c50 <__sfvwrite_r+0x2d8>
    5cb0:	e009883a 	mov	r4,fp
    5cb4:	900b883a 	mov	r5,r18
    5cb8:	00050140 	call	5014 <_fflush_r>
    5cbc:	103fc31e 	bne	r2,zero,5bcc <__sfvwrite_r+0x254>
    5cc0:	d8000015 	stw	zero,0(sp)
    5cc4:	003fe206 	br	5c50 <__sfvwrite_r+0x2d8>
    5cc8:	91000017 	ldw	r4,0(r18)
    5ccc:	90800417 	ldw	r2,16(r18)
    5cd0:	1100022e 	bgeu	r2,r4,5cdc <__sfvwrite_r+0x364>
    5cd4:	8023883a 	mov	r17,r16
    5cd8:	85003136 	bltu	r16,r20,5da0 <__sfvwrite_r+0x428>
    5cdc:	91c00517 	ldw	r7,20(r18)
    5ce0:	a1c01836 	bltu	r20,r7,5d44 <__sfvwrite_r+0x3cc>
    5ce4:	90c00917 	ldw	r3,36(r18)
    5ce8:	91400717 	ldw	r5,28(r18)
    5cec:	e009883a 	mov	r4,fp
    5cf0:	b80d883a 	mov	r6,r23
    5cf4:	183ee83a 	callr	r3
    5cf8:	1021883a 	mov	r16,r2
    5cfc:	00bfb30e 	bge	zero,r2,5bcc <__sfvwrite_r+0x254>
    5d00:	1023883a 	mov	r17,r2
    5d04:	1027883a 	mov	r19,r2
    5d08:	003f9b06 	br	5b78 <__sfvwrite_r+0x200>
    5d0c:	b80b883a 	mov	r5,r23
    5d10:	800d883a 	mov	r6,r16
    5d14:	00063700 	call	6370 <memmove>
    5d18:	90c00217 	ldw	r3,8(r18)
    5d1c:	90800017 	ldw	r2,0(r18)
    5d20:	8023883a 	mov	r17,r16
    5d24:	1c07c83a 	sub	r3,r3,r16
    5d28:	1405883a 	add	r2,r2,r16
    5d2c:	90c00215 	stw	r3,8(r18)
    5d30:	90800015 	stw	r2,0(r18)
    5d34:	003fc406 	br	5c48 <__sfvwrite_r+0x2d0>
    5d38:	a00d883a 	mov	r6,r20
    5d3c:	a021883a 	mov	r16,r20
    5d40:	003f8106 	br	5b48 <__sfvwrite_r+0x1d0>
    5d44:	b80b883a 	mov	r5,r23
    5d48:	a00d883a 	mov	r6,r20
    5d4c:	00063700 	call	6370 <memmove>
    5d50:	90c00217 	ldw	r3,8(r18)
    5d54:	90800017 	ldw	r2,0(r18)
    5d58:	a021883a 	mov	r16,r20
    5d5c:	1d07c83a 	sub	r3,r3,r20
    5d60:	1505883a 	add	r2,r2,r20
    5d64:	a023883a 	mov	r17,r20
    5d68:	a027883a 	mov	r19,r20
    5d6c:	90c00215 	stw	r3,8(r18)
    5d70:	90800015 	stw	r2,0(r18)
    5d74:	003f8006 	br	5b78 <__sfvwrite_r+0x200>
    5d78:	b809883a 	mov	r4,r23
    5d7c:	01400284 	movi	r5,10
    5d80:	980d883a 	mov	r6,r19
    5d84:	00061ec0 	call	61ec <memchr>
    5d88:	10001726 	beq	r2,zero,5de8 <__sfvwrite_r+0x470>
    5d8c:	15c5c83a 	sub	r2,r2,r23
    5d90:	15000044 	addi	r20,r2,1
    5d94:	00800044 	movi	r2,1
    5d98:	d8800015 	stw	r2,0(sp)
    5d9c:	003f9806 	br	5c00 <__sfvwrite_r+0x288>
    5da0:	b80b883a 	mov	r5,r23
    5da4:	800d883a 	mov	r6,r16
    5da8:	00063700 	call	6370 <memmove>
    5dac:	90c00017 	ldw	r3,0(r18)
    5db0:	e009883a 	mov	r4,fp
    5db4:	900b883a 	mov	r5,r18
    5db8:	1c07883a 	add	r3,r3,r16
    5dbc:	90c00015 	stw	r3,0(r18)
    5dc0:	8027883a 	mov	r19,r16
    5dc4:	00050140 	call	5014 <_fflush_r>
    5dc8:	103f6b26 	beq	r2,zero,5b78 <__sfvwrite_r+0x200>
    5dcc:	003f7f06 	br	5bcc <__sfvwrite_r+0x254>
    5dd0:	400b883a 	mov	r5,r8
    5dd4:	e009883a 	mov	r4,fp
    5dd8:	00077600 	call	7760 <_realloc_r>
    5ddc:	103f7626 	beq	r2,zero,5bb8 <__sfvwrite_r+0x240>
    5de0:	1023883a 	mov	r17,r2
    5de4:	003f5006 	br	5b28 <__sfvwrite_r+0x1b0>
    5de8:	00c00044 	movi	r3,1
    5dec:	9d000044 	addi	r20,r19,1
    5df0:	d8c00015 	stw	r3,0(sp)
    5df4:	003f8206 	br	5c00 <__sfvwrite_r+0x288>
    5df8:	9080030b 	ldhu	r2,12(r18)
    5dfc:	00c00244 	movi	r3,9
    5e00:	013fffc4 	movi	r4,-1
    5e04:	10801014 	ori	r2,r2,64
    5e08:	9080030d 	sth	r2,12(r18)
    5e0c:	e0c00015 	stw	r3,0(fp)
    5e10:	003f0606 	br	5a2c <__sfvwrite_r+0xb4>

00005e14 <_fwalk_reent>:
    5e14:	defff704 	addi	sp,sp,-36
    5e18:	dcc00315 	stw	r19,12(sp)
    5e1c:	24c0b804 	addi	r19,r4,736
    5e20:	dd800615 	stw	r22,24(sp)
    5e24:	dd400515 	stw	r21,20(sp)
    5e28:	dfc00815 	stw	ra,32(sp)
    5e2c:	ddc00715 	stw	r23,28(sp)
    5e30:	dd000415 	stw	r20,16(sp)
    5e34:	dc800215 	stw	r18,8(sp)
    5e38:	dc400115 	stw	r17,4(sp)
    5e3c:	dc000015 	stw	r16,0(sp)
    5e40:	202b883a 	mov	r21,r4
    5e44:	282d883a 	mov	r22,r5
    5e48:	000529c0 	call	529c <__sfp_lock_acquire>
    5e4c:	98002126 	beq	r19,zero,5ed4 <_fwalk_reent+0xc0>
    5e50:	002f883a 	mov	r23,zero
    5e54:	9c800117 	ldw	r18,4(r19)
    5e58:	9c000217 	ldw	r16,8(r19)
    5e5c:	90bfffc4 	addi	r2,r18,-1
    5e60:	10000d16 	blt	r2,zero,5e98 <_fwalk_reent+0x84>
    5e64:	0023883a 	mov	r17,zero
    5e68:	053fffc4 	movi	r20,-1
    5e6c:	8080030f 	ldh	r2,12(r16)
    5e70:	8c400044 	addi	r17,r17,1
    5e74:	10000626 	beq	r2,zero,5e90 <_fwalk_reent+0x7c>
    5e78:	8080038f 	ldh	r2,14(r16)
    5e7c:	800b883a 	mov	r5,r16
    5e80:	a809883a 	mov	r4,r21
    5e84:	15000226 	beq	r2,r20,5e90 <_fwalk_reent+0x7c>
    5e88:	b03ee83a 	callr	r22
    5e8c:	b8aeb03a 	or	r23,r23,r2
    5e90:	84001704 	addi	r16,r16,92
    5e94:	947ff51e 	bne	r18,r17,5e6c <_fwalk_reent+0x58>
    5e98:	9cc00017 	ldw	r19,0(r19)
    5e9c:	983fed1e 	bne	r19,zero,5e54 <_fwalk_reent+0x40>
    5ea0:	00052a00 	call	52a0 <__sfp_lock_release>
    5ea4:	b805883a 	mov	r2,r23
    5ea8:	dfc00817 	ldw	ra,32(sp)
    5eac:	ddc00717 	ldw	r23,28(sp)
    5eb0:	dd800617 	ldw	r22,24(sp)
    5eb4:	dd400517 	ldw	r21,20(sp)
    5eb8:	dd000417 	ldw	r20,16(sp)
    5ebc:	dcc00317 	ldw	r19,12(sp)
    5ec0:	dc800217 	ldw	r18,8(sp)
    5ec4:	dc400117 	ldw	r17,4(sp)
    5ec8:	dc000017 	ldw	r16,0(sp)
    5ecc:	dec00904 	addi	sp,sp,36
    5ed0:	f800283a 	ret
    5ed4:	002f883a 	mov	r23,zero
    5ed8:	003ff106 	br	5ea0 <_fwalk_reent+0x8c>

00005edc <_fwalk>:
    5edc:	defff804 	addi	sp,sp,-32
    5ee0:	dcc00315 	stw	r19,12(sp)
    5ee4:	24c0b804 	addi	r19,r4,736
    5ee8:	dd400515 	stw	r21,20(sp)
    5eec:	dfc00715 	stw	ra,28(sp)
    5ef0:	dd800615 	stw	r22,24(sp)
    5ef4:	dd000415 	stw	r20,16(sp)
    5ef8:	dc800215 	stw	r18,8(sp)
    5efc:	dc400115 	stw	r17,4(sp)
    5f00:	dc000015 	stw	r16,0(sp)
    5f04:	282b883a 	mov	r21,r5
    5f08:	000529c0 	call	529c <__sfp_lock_acquire>
    5f0c:	98001f26 	beq	r19,zero,5f8c <_fwalk+0xb0>
    5f10:	002d883a 	mov	r22,zero
    5f14:	9c800117 	ldw	r18,4(r19)
    5f18:	9c000217 	ldw	r16,8(r19)
    5f1c:	90bfffc4 	addi	r2,r18,-1
    5f20:	10000c16 	blt	r2,zero,5f54 <_fwalk+0x78>
    5f24:	0023883a 	mov	r17,zero
    5f28:	053fffc4 	movi	r20,-1
    5f2c:	8080030f 	ldh	r2,12(r16)
    5f30:	8c400044 	addi	r17,r17,1
    5f34:	10000526 	beq	r2,zero,5f4c <_fwalk+0x70>
    5f38:	8080038f 	ldh	r2,14(r16)
    5f3c:	8009883a 	mov	r4,r16
    5f40:	15000226 	beq	r2,r20,5f4c <_fwalk+0x70>
    5f44:	a83ee83a 	callr	r21
    5f48:	b0acb03a 	or	r22,r22,r2
    5f4c:	84001704 	addi	r16,r16,92
    5f50:	947ff61e 	bne	r18,r17,5f2c <_fwalk+0x50>
    5f54:	9cc00017 	ldw	r19,0(r19)
    5f58:	983fee1e 	bne	r19,zero,5f14 <_fwalk+0x38>
    5f5c:	00052a00 	call	52a0 <__sfp_lock_release>
    5f60:	b005883a 	mov	r2,r22
    5f64:	dfc00717 	ldw	ra,28(sp)
    5f68:	dd800617 	ldw	r22,24(sp)
    5f6c:	dd400517 	ldw	r21,20(sp)
    5f70:	dd000417 	ldw	r20,16(sp)
    5f74:	dcc00317 	ldw	r19,12(sp)
    5f78:	dc800217 	ldw	r18,8(sp)
    5f7c:	dc400117 	ldw	r17,4(sp)
    5f80:	dc000017 	ldw	r16,0(sp)
    5f84:	dec00804 	addi	sp,sp,32
    5f88:	f800283a 	ret
    5f8c:	002d883a 	mov	r22,zero
    5f90:	003ff206 	br	5f5c <_fwalk+0x80>

00005f94 <__locale_charset>:
    5f94:	d0a00517 	ldw	r2,-32748(gp)
    5f98:	f800283a 	ret

00005f9c <_localeconv_r>:
    5f9c:	00800074 	movhi	r2,1
    5fa0:	10b5d904 	addi	r2,r2,-10396
    5fa4:	f800283a 	ret

00005fa8 <localeconv>:
    5fa8:	00800074 	movhi	r2,1
    5fac:	10bd0504 	addi	r2,r2,-3052
    5fb0:	11000017 	ldw	r4,0(r2)
    5fb4:	0005f9c1 	jmpi	5f9c <_localeconv_r>

00005fb8 <_setlocale_r>:
    5fb8:	defffc04 	addi	sp,sp,-16
    5fbc:	00c00074 	movhi	r3,1
    5fc0:	18f5af04 	addi	r3,r3,-10564
    5fc4:	dc800215 	stw	r18,8(sp)
    5fc8:	dc400115 	stw	r17,4(sp)
    5fcc:	dc000015 	stw	r16,0(sp)
    5fd0:	2023883a 	mov	r17,r4
    5fd4:	2825883a 	mov	r18,r5
    5fd8:	dfc00315 	stw	ra,12(sp)
    5fdc:	3021883a 	mov	r16,r6
    5fe0:	3009883a 	mov	r4,r6
    5fe4:	180b883a 	mov	r5,r3
    5fe8:	30000926 	beq	r6,zero,6010 <_setlocale_r+0x58>
    5fec:	0007f100 	call	7f10 <strcmp>
    5ff0:	8009883a 	mov	r4,r16
    5ff4:	01400074 	movhi	r5,1
    5ff8:	2975c004 	addi	r5,r5,-10496
    5ffc:	10000b1e 	bne	r2,zero,602c <_setlocale_r+0x74>
    6000:	8c000d15 	stw	r16,52(r17)
    6004:	8c800c15 	stw	r18,48(r17)
    6008:	00c00074 	movhi	r3,1
    600c:	18f5af04 	addi	r3,r3,-10564
    6010:	1805883a 	mov	r2,r3
    6014:	dfc00317 	ldw	ra,12(sp)
    6018:	dc800217 	ldw	r18,8(sp)
    601c:	dc400117 	ldw	r17,4(sp)
    6020:	dc000017 	ldw	r16,0(sp)
    6024:	dec00404 	addi	sp,sp,16
    6028:	f800283a 	ret
    602c:	0007f100 	call	7f10 <strcmp>
    6030:	0007883a 	mov	r3,zero
    6034:	103ff226 	beq	r2,zero,6000 <_setlocale_r+0x48>
    6038:	003ff506 	br	6010 <_setlocale_r+0x58>

0000603c <setlocale>:
    603c:	01800074 	movhi	r6,1
    6040:	31bd0504 	addi	r6,r6,-3052
    6044:	2007883a 	mov	r3,r4
    6048:	31000017 	ldw	r4,0(r6)
    604c:	280d883a 	mov	r6,r5
    6050:	180b883a 	mov	r5,r3
    6054:	0005fb81 	jmpi	5fb8 <_setlocale_r>

00006058 <__smakebuf_r>:
    6058:	2880030b 	ldhu	r2,12(r5)
    605c:	deffed04 	addi	sp,sp,-76
    6060:	dc401015 	stw	r17,64(sp)
    6064:	1080008c 	andi	r2,r2,2
    6068:	dc000f15 	stw	r16,60(sp)
    606c:	dfc01215 	stw	ra,72(sp)
    6070:	dc801115 	stw	r18,68(sp)
    6074:	2821883a 	mov	r16,r5
    6078:	2023883a 	mov	r17,r4
    607c:	10000b26 	beq	r2,zero,60ac <__smakebuf_r+0x54>
    6080:	28c010c4 	addi	r3,r5,67
    6084:	00800044 	movi	r2,1
    6088:	28800515 	stw	r2,20(r5)
    608c:	28c00415 	stw	r3,16(r5)
    6090:	28c00015 	stw	r3,0(r5)
    6094:	dfc01217 	ldw	ra,72(sp)
    6098:	dc801117 	ldw	r18,68(sp)
    609c:	dc401017 	ldw	r17,64(sp)
    60a0:	dc000f17 	ldw	r16,60(sp)
    60a4:	dec01304 	addi	sp,sp,76
    60a8:	f800283a 	ret
    60ac:	2940038f 	ldh	r5,14(r5)
    60b0:	28002116 	blt	r5,zero,6138 <__smakebuf_r+0xe0>
    60b4:	d80d883a 	mov	r6,sp
    60b8:	00083ec0 	call	83ec <_fstat_r>
    60bc:	10001e16 	blt	r2,zero,6138 <__smakebuf_r+0xe0>
    60c0:	d8800117 	ldw	r2,4(sp)
    60c4:	00e00014 	movui	r3,32768
    60c8:	113c000c 	andi	r4,r2,61440
    60cc:	20c03126 	beq	r4,r3,6194 <__smakebuf_r+0x13c>
    60d0:	8080030b 	ldhu	r2,12(r16)
    60d4:	00c80004 	movi	r3,8192
    60d8:	10820014 	ori	r2,r2,2048
    60dc:	8080030d 	sth	r2,12(r16)
    60e0:	20c01e26 	beq	r4,r3,615c <__smakebuf_r+0x104>
    60e4:	04810004 	movi	r18,1024
    60e8:	8809883a 	mov	r4,r17
    60ec:	900b883a 	mov	r5,r18
    60f0:	0000c780 	call	c78 <_malloc_r>
    60f4:	1009883a 	mov	r4,r2
    60f8:	10003126 	beq	r2,zero,61c0 <__smakebuf_r+0x168>
    60fc:	80c0030b 	ldhu	r3,12(r16)
    6100:	00800034 	movhi	r2,0
    6104:	1094e404 	addi	r2,r2,21392
    6108:	88800f15 	stw	r2,60(r17)
    610c:	18c02014 	ori	r3,r3,128
    6110:	84800515 	stw	r18,20(r16)
    6114:	80c0030d 	sth	r3,12(r16)
    6118:	81000415 	stw	r4,16(r16)
    611c:	81000015 	stw	r4,0(r16)
    6120:	dfc01217 	ldw	ra,72(sp)
    6124:	dc801117 	ldw	r18,68(sp)
    6128:	dc401017 	ldw	r17,64(sp)
    612c:	dc000f17 	ldw	r16,60(sp)
    6130:	dec01304 	addi	sp,sp,76
    6134:	f800283a 	ret
    6138:	80c0030b 	ldhu	r3,12(r16)
    613c:	1880200c 	andi	r2,r3,128
    6140:	10000426 	beq	r2,zero,6154 <__smakebuf_r+0xfc>
    6144:	04801004 	movi	r18,64
    6148:	18820014 	ori	r2,r3,2048
    614c:	8080030d 	sth	r2,12(r16)
    6150:	003fe506 	br	60e8 <__smakebuf_r+0x90>
    6154:	04810004 	movi	r18,1024
    6158:	003ffb06 	br	6148 <__smakebuf_r+0xf0>
    615c:	8140038f 	ldh	r5,14(r16)
    6160:	8809883a 	mov	r4,r17
    6164:	00084600 	call	8460 <_isatty_r>
    6168:	103fde26 	beq	r2,zero,60e4 <__smakebuf_r+0x8c>
    616c:	8080030b 	ldhu	r2,12(r16)
    6170:	80c010c4 	addi	r3,r16,67
    6174:	04810004 	movi	r18,1024
    6178:	10800054 	ori	r2,r2,1
    617c:	8080030d 	sth	r2,12(r16)
    6180:	00800044 	movi	r2,1
    6184:	80c00415 	stw	r3,16(r16)
    6188:	80800515 	stw	r2,20(r16)
    618c:	80c00015 	stw	r3,0(r16)
    6190:	003fd506 	br	60e8 <__smakebuf_r+0x90>
    6194:	80c00a17 	ldw	r3,40(r16)
    6198:	00800034 	movhi	r2,0
    619c:	109f7304 	addi	r2,r2,32204
    61a0:	18bfcb1e 	bne	r3,r2,60d0 <__smakebuf_r+0x78>
    61a4:	8080030b 	ldhu	r2,12(r16)
    61a8:	00c10004 	movi	r3,1024
    61ac:	1825883a 	mov	r18,r3
    61b0:	10c4b03a 	or	r2,r2,r3
    61b4:	8080030d 	sth	r2,12(r16)
    61b8:	80c01315 	stw	r3,76(r16)
    61bc:	003fca06 	br	60e8 <__smakebuf_r+0x90>
    61c0:	8100030b 	ldhu	r4,12(r16)
    61c4:	2080800c 	andi	r2,r4,512
    61c8:	103fb21e 	bne	r2,zero,6094 <__smakebuf_r+0x3c>
    61cc:	80c010c4 	addi	r3,r16,67
    61d0:	21000094 	ori	r4,r4,2
    61d4:	00800044 	movi	r2,1
    61d8:	80800515 	stw	r2,20(r16)
    61dc:	8100030d 	sth	r4,12(r16)
    61e0:	80c00415 	stw	r3,16(r16)
    61e4:	80c00015 	stw	r3,0(r16)
    61e8:	003faa06 	br	6094 <__smakebuf_r+0x3c>

000061ec <memchr>:
    61ec:	008000c4 	movi	r2,3
    61f0:	29403fcc 	andi	r5,r5,255
    61f4:	2007883a 	mov	r3,r4
    61f8:	1180022e 	bgeu	r2,r6,6204 <memchr+0x18>
    61fc:	2084703a 	and	r2,r4,r2
    6200:	10000b26 	beq	r2,zero,6230 <memchr+0x44>
    6204:	313fffc4 	addi	r4,r6,-1
    6208:	3000051e 	bne	r6,zero,6220 <memchr+0x34>
    620c:	00002c06 	br	62c0 <memchr+0xd4>
    6210:	213fffc4 	addi	r4,r4,-1
    6214:	00bfffc4 	movi	r2,-1
    6218:	18c00044 	addi	r3,r3,1
    621c:	20802826 	beq	r4,r2,62c0 <memchr+0xd4>
    6220:	18800003 	ldbu	r2,0(r3)
    6224:	28bffa1e 	bne	r5,r2,6210 <memchr+0x24>
    6228:	1805883a 	mov	r2,r3
    622c:	f800283a 	ret
    6230:	0011883a 	mov	r8,zero
    6234:	0007883a 	mov	r3,zero
    6238:	01c00104 	movi	r7,4
    623c:	4004923a 	slli	r2,r8,8
    6240:	18c00044 	addi	r3,r3,1
    6244:	1151883a 	add	r8,r2,r5
    6248:	19fffc1e 	bne	r3,r7,623c <memchr+0x50>
    624c:	02bfbff4 	movhi	r10,65279
    6250:	52bfbfc4 	addi	r10,r10,-257
    6254:	02602074 	movhi	r9,32897
    6258:	4a602004 	addi	r9,r9,-32640
    625c:	02c000c4 	movi	r11,3
    6260:	20800017 	ldw	r2,0(r4)
    6264:	31bfff04 	addi	r6,r6,-4
    6268:	200f883a 	mov	r7,r4
    626c:	1204f03a 	xor	r2,r2,r8
    6270:	1287883a 	add	r3,r2,r10
    6274:	1a46703a 	and	r3,r3,r9
    6278:	0084303a 	nor	r2,zero,r2
    627c:	10c4703a 	and	r2,r2,r3
    6280:	10000b26 	beq	r2,zero,62b0 <memchr+0xc4>
    6284:	20800003 	ldbu	r2,0(r4)
    6288:	28800f26 	beq	r5,r2,62c8 <memchr+0xdc>
    628c:	20800043 	ldbu	r2,1(r4)
    6290:	21c00044 	addi	r7,r4,1
    6294:	28800c26 	beq	r5,r2,62c8 <memchr+0xdc>
    6298:	20800083 	ldbu	r2,2(r4)
    629c:	21c00084 	addi	r7,r4,2
    62a0:	28800926 	beq	r5,r2,62c8 <memchr+0xdc>
    62a4:	208000c3 	ldbu	r2,3(r4)
    62a8:	21c000c4 	addi	r7,r4,3
    62ac:	28800626 	beq	r5,r2,62c8 <memchr+0xdc>
    62b0:	21000104 	addi	r4,r4,4
    62b4:	59bfea36 	bltu	r11,r6,6260 <memchr+0x74>
    62b8:	2007883a 	mov	r3,r4
    62bc:	003fd106 	br	6204 <memchr+0x18>
    62c0:	0005883a 	mov	r2,zero
    62c4:	f800283a 	ret
    62c8:	3805883a 	mov	r2,r7
    62cc:	f800283a 	ret

000062d0 <memcpy>:
    62d0:	01c003c4 	movi	r7,15
    62d4:	2007883a 	mov	r3,r4
    62d8:	3980032e 	bgeu	r7,r6,62e8 <memcpy+0x18>
    62dc:	2904b03a 	or	r2,r5,r4
    62e0:	108000cc 	andi	r2,r2,3
    62e4:	10000926 	beq	r2,zero,630c <memcpy+0x3c>
    62e8:	30000626 	beq	r6,zero,6304 <memcpy+0x34>
    62ec:	30cd883a 	add	r6,r6,r3
    62f0:	28800003 	ldbu	r2,0(r5)
    62f4:	29400044 	addi	r5,r5,1
    62f8:	18800005 	stb	r2,0(r3)
    62fc:	18c00044 	addi	r3,r3,1
    6300:	30fffb1e 	bne	r6,r3,62f0 <memcpy+0x20>
    6304:	2005883a 	mov	r2,r4
    6308:	f800283a 	ret
    630c:	3811883a 	mov	r8,r7
    6310:	200f883a 	mov	r7,r4
    6314:	28c00017 	ldw	r3,0(r5)
    6318:	31bffc04 	addi	r6,r6,-16
    631c:	38c00015 	stw	r3,0(r7)
    6320:	28800117 	ldw	r2,4(r5)
    6324:	38800115 	stw	r2,4(r7)
    6328:	28c00217 	ldw	r3,8(r5)
    632c:	38c00215 	stw	r3,8(r7)
    6330:	28800317 	ldw	r2,12(r5)
    6334:	29400404 	addi	r5,r5,16
    6338:	38800315 	stw	r2,12(r7)
    633c:	39c00404 	addi	r7,r7,16
    6340:	41bff436 	bltu	r8,r6,6314 <memcpy+0x44>
    6344:	008000c4 	movi	r2,3
    6348:	1180072e 	bgeu	r2,r6,6368 <memcpy+0x98>
    634c:	1007883a 	mov	r3,r2
    6350:	28800017 	ldw	r2,0(r5)
    6354:	31bfff04 	addi	r6,r6,-4
    6358:	29400104 	addi	r5,r5,4
    635c:	38800015 	stw	r2,0(r7)
    6360:	39c00104 	addi	r7,r7,4
    6364:	19bffa36 	bltu	r3,r6,6350 <memcpy+0x80>
    6368:	3807883a 	mov	r3,r7
    636c:	003fde06 	br	62e8 <memcpy+0x18>

00006370 <memmove>:
    6370:	2807883a 	mov	r3,r5
    6374:	2011883a 	mov	r8,r4
    6378:	29000c2e 	bgeu	r5,r4,63ac <memmove+0x3c>
    637c:	298f883a 	add	r7,r5,r6
    6380:	21c00a2e 	bgeu	r4,r7,63ac <memmove+0x3c>
    6384:	30000726 	beq	r6,zero,63a4 <memmove+0x34>
    6388:	2187883a 	add	r3,r4,r6
    638c:	198dc83a 	sub	r6,r3,r6
    6390:	39ffffc4 	addi	r7,r7,-1
    6394:	38800003 	ldbu	r2,0(r7)
    6398:	18ffffc4 	addi	r3,r3,-1
    639c:	18800005 	stb	r2,0(r3)
    63a0:	19bffb1e 	bne	r3,r6,6390 <memmove+0x20>
    63a4:	2005883a 	mov	r2,r4
    63a8:	f800283a 	ret
    63ac:	01c003c4 	movi	r7,15
    63b0:	39800a36 	bltu	r7,r6,63dc <memmove+0x6c>
    63b4:	303ffb26 	beq	r6,zero,63a4 <memmove+0x34>
    63b8:	400f883a 	mov	r7,r8
    63bc:	320d883a 	add	r6,r6,r8
    63c0:	28800003 	ldbu	r2,0(r5)
    63c4:	29400044 	addi	r5,r5,1
    63c8:	38800005 	stb	r2,0(r7)
    63cc:	39c00044 	addi	r7,r7,1
    63d0:	39bffb1e 	bne	r7,r6,63c0 <memmove+0x50>
    63d4:	2005883a 	mov	r2,r4
    63d8:	f800283a 	ret
    63dc:	1904b03a 	or	r2,r3,r4
    63e0:	108000cc 	andi	r2,r2,3
    63e4:	103ff31e 	bne	r2,zero,63b4 <memmove+0x44>
    63e8:	3811883a 	mov	r8,r7
    63ec:	180b883a 	mov	r5,r3
    63f0:	200f883a 	mov	r7,r4
    63f4:	28c00017 	ldw	r3,0(r5)
    63f8:	31bffc04 	addi	r6,r6,-16
    63fc:	38c00015 	stw	r3,0(r7)
    6400:	28800117 	ldw	r2,4(r5)
    6404:	38800115 	stw	r2,4(r7)
    6408:	28c00217 	ldw	r3,8(r5)
    640c:	38c00215 	stw	r3,8(r7)
    6410:	28800317 	ldw	r2,12(r5)
    6414:	29400404 	addi	r5,r5,16
    6418:	38800315 	stw	r2,12(r7)
    641c:	39c00404 	addi	r7,r7,16
    6420:	41bff436 	bltu	r8,r6,63f4 <memmove+0x84>
    6424:	008000c4 	movi	r2,3
    6428:	1180072e 	bgeu	r2,r6,6448 <memmove+0xd8>
    642c:	1007883a 	mov	r3,r2
    6430:	28800017 	ldw	r2,0(r5)
    6434:	31bfff04 	addi	r6,r6,-4
    6438:	29400104 	addi	r5,r5,4
    643c:	38800015 	stw	r2,0(r7)
    6440:	39c00104 	addi	r7,r7,4
    6444:	19bffa36 	bltu	r3,r6,6430 <memmove+0xc0>
    6448:	3811883a 	mov	r8,r7
    644c:	003fd906 	br	63b4 <memmove+0x44>

00006450 <memset>:
    6450:	008000c4 	movi	r2,3
    6454:	29403fcc 	andi	r5,r5,255
    6458:	2007883a 	mov	r3,r4
    645c:	1180022e 	bgeu	r2,r6,6468 <memset+0x18>
    6460:	2084703a 	and	r2,r4,r2
    6464:	10000826 	beq	r2,zero,6488 <memset+0x38>
    6468:	30000526 	beq	r6,zero,6480 <memset+0x30>
    646c:	2805883a 	mov	r2,r5
    6470:	30cd883a 	add	r6,r6,r3
    6474:	18800005 	stb	r2,0(r3)
    6478:	18c00044 	addi	r3,r3,1
    647c:	19bffd1e 	bne	r3,r6,6474 <memset+0x24>
    6480:	2005883a 	mov	r2,r4
    6484:	f800283a 	ret
    6488:	2804923a 	slli	r2,r5,8
    648c:	020003c4 	movi	r8,15
    6490:	200f883a 	mov	r7,r4
    6494:	2884b03a 	or	r2,r5,r2
    6498:	1006943a 	slli	r3,r2,16
    649c:	10c6b03a 	or	r3,r2,r3
    64a0:	41800a2e 	bgeu	r8,r6,64cc <memset+0x7c>
    64a4:	4005883a 	mov	r2,r8
    64a8:	31bffc04 	addi	r6,r6,-16
    64ac:	38c00015 	stw	r3,0(r7)
    64b0:	38c00115 	stw	r3,4(r7)
    64b4:	38c00215 	stw	r3,8(r7)
    64b8:	38c00315 	stw	r3,12(r7)
    64bc:	39c00404 	addi	r7,r7,16
    64c0:	11bff936 	bltu	r2,r6,64a8 <memset+0x58>
    64c4:	008000c4 	movi	r2,3
    64c8:	1180052e 	bgeu	r2,r6,64e0 <memset+0x90>
    64cc:	31bfff04 	addi	r6,r6,-4
    64d0:	008000c4 	movi	r2,3
    64d4:	38c00015 	stw	r3,0(r7)
    64d8:	39c00104 	addi	r7,r7,4
    64dc:	11bffb36 	bltu	r2,r6,64cc <memset+0x7c>
    64e0:	3807883a 	mov	r3,r7
    64e4:	003fe006 	br	6468 <memset+0x18>

000064e8 <_Bfree>:
    64e8:	28000826 	beq	r5,zero,650c <_Bfree+0x24>
    64ec:	28800117 	ldw	r2,4(r5)
    64f0:	21001317 	ldw	r4,76(r4)
    64f4:	1085883a 	add	r2,r2,r2
    64f8:	1085883a 	add	r2,r2,r2
    64fc:	1105883a 	add	r2,r2,r4
    6500:	10c00017 	ldw	r3,0(r2)
    6504:	28c00015 	stw	r3,0(r5)
    6508:	11400015 	stw	r5,0(r2)
    650c:	f800283a 	ret

00006510 <__hi0bits>:
    6510:	20bfffec 	andhi	r2,r4,65535
    6514:	10001426 	beq	r2,zero,6568 <__hi0bits+0x58>
    6518:	0007883a 	mov	r3,zero
    651c:	20bfc02c 	andhi	r2,r4,65280
    6520:	1000021e 	bne	r2,zero,652c <__hi0bits+0x1c>
    6524:	2008923a 	slli	r4,r4,8
    6528:	18c00204 	addi	r3,r3,8
    652c:	20bc002c 	andhi	r2,r4,61440
    6530:	1000021e 	bne	r2,zero,653c <__hi0bits+0x2c>
    6534:	2008913a 	slli	r4,r4,4
    6538:	18c00104 	addi	r3,r3,4
    653c:	20b0002c 	andhi	r2,r4,49152
    6540:	1000031e 	bne	r2,zero,6550 <__hi0bits+0x40>
    6544:	2105883a 	add	r2,r4,r4
    6548:	18c00084 	addi	r3,r3,2
    654c:	1089883a 	add	r4,r2,r2
    6550:	20000316 	blt	r4,zero,6560 <__hi0bits+0x50>
    6554:	2090002c 	andhi	r2,r4,16384
    6558:	10000626 	beq	r2,zero,6574 <__hi0bits+0x64>
    655c:	18c00044 	addi	r3,r3,1
    6560:	1805883a 	mov	r2,r3
    6564:	f800283a 	ret
    6568:	2008943a 	slli	r4,r4,16
    656c:	00c00404 	movi	r3,16
    6570:	003fea06 	br	651c <__hi0bits+0xc>
    6574:	00c00804 	movi	r3,32
    6578:	1805883a 	mov	r2,r3
    657c:	f800283a 	ret

00006580 <__lo0bits>:
    6580:	20c00017 	ldw	r3,0(r4)
    6584:	188001cc 	andi	r2,r3,7
    6588:	10000a26 	beq	r2,zero,65b4 <__lo0bits+0x34>
    658c:	1880004c 	andi	r2,r3,1
    6590:	1005003a 	cmpeq	r2,r2,zero
    6594:	10002126 	beq	r2,zero,661c <__lo0bits+0x9c>
    6598:	1880008c 	andi	r2,r3,2
    659c:	1000251e 	bne	r2,zero,6634 <__lo0bits+0xb4>
    65a0:	1804d0ba 	srli	r2,r3,2
    65a4:	01400084 	movi	r5,2
    65a8:	20800015 	stw	r2,0(r4)
    65ac:	2805883a 	mov	r2,r5
    65b0:	f800283a 	ret
    65b4:	18bfffcc 	andi	r2,r3,65535
    65b8:	10001526 	beq	r2,zero,6610 <__lo0bits+0x90>
    65bc:	000b883a 	mov	r5,zero
    65c0:	18803fcc 	andi	r2,r3,255
    65c4:	1000021e 	bne	r2,zero,65d0 <__lo0bits+0x50>
    65c8:	1806d23a 	srli	r3,r3,8
    65cc:	29400204 	addi	r5,r5,8
    65d0:	188003cc 	andi	r2,r3,15
    65d4:	1000021e 	bne	r2,zero,65e0 <__lo0bits+0x60>
    65d8:	1806d13a 	srli	r3,r3,4
    65dc:	29400104 	addi	r5,r5,4
    65e0:	188000cc 	andi	r2,r3,3
    65e4:	1000021e 	bne	r2,zero,65f0 <__lo0bits+0x70>
    65e8:	1806d0ba 	srli	r3,r3,2
    65ec:	29400084 	addi	r5,r5,2
    65f0:	1880004c 	andi	r2,r3,1
    65f4:	1000031e 	bne	r2,zero,6604 <__lo0bits+0x84>
    65f8:	1806d07a 	srli	r3,r3,1
    65fc:	18000a26 	beq	r3,zero,6628 <__lo0bits+0xa8>
    6600:	29400044 	addi	r5,r5,1
    6604:	2805883a 	mov	r2,r5
    6608:	20c00015 	stw	r3,0(r4)
    660c:	f800283a 	ret
    6610:	1806d43a 	srli	r3,r3,16
    6614:	01400404 	movi	r5,16
    6618:	003fe906 	br	65c0 <__lo0bits+0x40>
    661c:	000b883a 	mov	r5,zero
    6620:	2805883a 	mov	r2,r5
    6624:	f800283a 	ret
    6628:	01400804 	movi	r5,32
    662c:	2805883a 	mov	r2,r5
    6630:	f800283a 	ret
    6634:	1804d07a 	srli	r2,r3,1
    6638:	01400044 	movi	r5,1
    663c:	20800015 	stw	r2,0(r4)
    6640:	003fda06 	br	65ac <__lo0bits+0x2c>

00006644 <__mcmp>:
    6644:	20800417 	ldw	r2,16(r4)
    6648:	28c00417 	ldw	r3,16(r5)
    664c:	10cfc83a 	sub	r7,r2,r3
    6650:	38000c1e 	bne	r7,zero,6684 <__mcmp+0x40>
    6654:	18c5883a 	add	r2,r3,r3
    6658:	1085883a 	add	r2,r2,r2
    665c:	10c00504 	addi	r3,r2,20
    6660:	21000504 	addi	r4,r4,20
    6664:	28cb883a 	add	r5,r5,r3
    6668:	2085883a 	add	r2,r4,r2
    666c:	10bfff04 	addi	r2,r2,-4
    6670:	297fff04 	addi	r5,r5,-4
    6674:	11800017 	ldw	r6,0(r2)
    6678:	28c00017 	ldw	r3,0(r5)
    667c:	30c0031e 	bne	r6,r3,668c <__mcmp+0x48>
    6680:	20bffa36 	bltu	r4,r2,666c <__mcmp+0x28>
    6684:	3805883a 	mov	r2,r7
    6688:	f800283a 	ret
    668c:	30c00336 	bltu	r6,r3,669c <__mcmp+0x58>
    6690:	01c00044 	movi	r7,1
    6694:	3805883a 	mov	r2,r7
    6698:	f800283a 	ret
    669c:	01ffffc4 	movi	r7,-1
    66a0:	003ff806 	br	6684 <__mcmp+0x40>

000066a4 <__ulp>:
    66a4:	295ffc2c 	andhi	r5,r5,32752
    66a8:	013f3034 	movhi	r4,64704
    66ac:	290b883a 	add	r5,r5,r4
    66b0:	0145c83a 	sub	r2,zero,r5
    66b4:	1007d53a 	srai	r3,r2,20
    66b8:	000d883a 	mov	r6,zero
    66bc:	0140040e 	bge	zero,r5,66d0 <__ulp+0x2c>
    66c0:	280f883a 	mov	r7,r5
    66c4:	3807883a 	mov	r3,r7
    66c8:	3005883a 	mov	r2,r6
    66cc:	f800283a 	ret
    66d0:	008004c4 	movi	r2,19
    66d4:	193ffb04 	addi	r4,r3,-20
    66d8:	10c00c0e 	bge	r2,r3,670c <__ulp+0x68>
    66dc:	008007c4 	movi	r2,31
    66e0:	1107c83a 	sub	r3,r2,r4
    66e4:	00800784 	movi	r2,30
    66e8:	01400044 	movi	r5,1
    66ec:	11000216 	blt	r2,r4,66f8 <__ulp+0x54>
    66f0:	00800044 	movi	r2,1
    66f4:	10ca983a 	sll	r5,r2,r3
    66f8:	000f883a 	mov	r7,zero
    66fc:	280d883a 	mov	r6,r5
    6700:	3807883a 	mov	r3,r7
    6704:	3005883a 	mov	r2,r6
    6708:	f800283a 	ret
    670c:	00800234 	movhi	r2,8
    6710:	10cfd83a 	sra	r7,r2,r3
    6714:	000d883a 	mov	r6,zero
    6718:	3005883a 	mov	r2,r6
    671c:	3807883a 	mov	r3,r7
    6720:	f800283a 	ret

00006724 <__b2d>:
    6724:	20800417 	ldw	r2,16(r4)
    6728:	defff904 	addi	sp,sp,-28
    672c:	dd000415 	stw	r20,16(sp)
    6730:	1085883a 	add	r2,r2,r2
    6734:	25000504 	addi	r20,r4,20
    6738:	1085883a 	add	r2,r2,r2
    673c:	dc000015 	stw	r16,0(sp)
    6740:	a0a1883a 	add	r16,r20,r2
    6744:	dd400515 	stw	r21,20(sp)
    6748:	857fff17 	ldw	r21,-4(r16)
    674c:	dc400115 	stw	r17,4(sp)
    6750:	dfc00615 	stw	ra,24(sp)
    6754:	a809883a 	mov	r4,r21
    6758:	2823883a 	mov	r17,r5
    675c:	dcc00315 	stw	r19,12(sp)
    6760:	dc800215 	stw	r18,8(sp)
    6764:	00065100 	call	6510 <__hi0bits>
    6768:	100b883a 	mov	r5,r2
    676c:	00800804 	movi	r2,32
    6770:	1145c83a 	sub	r2,r2,r5
    6774:	88800015 	stw	r2,0(r17)
    6778:	00800284 	movi	r2,10
    677c:	80ffff04 	addi	r3,r16,-4
    6780:	11401416 	blt	r2,r5,67d4 <__b2d+0xb0>
    6784:	008002c4 	movi	r2,11
    6788:	1149c83a 	sub	r4,r2,r5
    678c:	a0c02736 	bltu	r20,r3,682c <__b2d+0x108>
    6790:	000d883a 	mov	r6,zero
    6794:	28800544 	addi	r2,r5,21
    6798:	a906d83a 	srl	r3,r21,r4
    679c:	a884983a 	sll	r2,r21,r2
    67a0:	1ccffc34 	orhi	r19,r3,16368
    67a4:	11a4b03a 	or	r18,r2,r6
    67a8:	9005883a 	mov	r2,r18
    67ac:	9807883a 	mov	r3,r19
    67b0:	dfc00617 	ldw	ra,24(sp)
    67b4:	dd400517 	ldw	r21,20(sp)
    67b8:	dd000417 	ldw	r20,16(sp)
    67bc:	dcc00317 	ldw	r19,12(sp)
    67c0:	dc800217 	ldw	r18,8(sp)
    67c4:	dc400117 	ldw	r17,4(sp)
    67c8:	dc000017 	ldw	r16,0(sp)
    67cc:	dec00704 	addi	sp,sp,28
    67d0:	f800283a 	ret
    67d4:	a0c00e36 	bltu	r20,r3,6810 <__b2d+0xec>
    67d8:	293ffd44 	addi	r4,r5,-11
    67dc:	000d883a 	mov	r6,zero
    67e0:	20000f26 	beq	r4,zero,6820 <__b2d+0xfc>
    67e4:	00800804 	movi	r2,32
    67e8:	110bc83a 	sub	r5,r2,r4
    67ec:	a0c01236 	bltu	r20,r3,6838 <__b2d+0x114>
    67f0:	000f883a 	mov	r7,zero
    67f4:	a904983a 	sll	r2,r21,r4
    67f8:	3146d83a 	srl	r3,r6,r5
    67fc:	3108983a 	sll	r4,r6,r4
    6800:	108ffc34 	orhi	r2,r2,16368
    6804:	18a6b03a 	or	r19,r3,r2
    6808:	3924b03a 	or	r18,r7,r4
    680c:	003fe606 	br	67a8 <__b2d+0x84>
    6810:	293ffd44 	addi	r4,r5,-11
    6814:	81bffe17 	ldw	r6,-8(r16)
    6818:	80fffe04 	addi	r3,r16,-8
    681c:	203ff11e 	bne	r4,zero,67e4 <__b2d+0xc0>
    6820:	accffc34 	orhi	r19,r21,16368
    6824:	3025883a 	mov	r18,r6
    6828:	003fdf06 	br	67a8 <__b2d+0x84>
    682c:	18bfff17 	ldw	r2,-4(r3)
    6830:	110cd83a 	srl	r6,r2,r4
    6834:	003fd706 	br	6794 <__b2d+0x70>
    6838:	18bfff17 	ldw	r2,-4(r3)
    683c:	114ed83a 	srl	r7,r2,r5
    6840:	003fec06 	br	67f4 <__b2d+0xd0>

00006844 <__ratio>:
    6844:	defff904 	addi	sp,sp,-28
    6848:	dc400215 	stw	r17,8(sp)
    684c:	2823883a 	mov	r17,r5
    6850:	d80b883a 	mov	r5,sp
    6854:	dfc00615 	stw	ra,24(sp)
    6858:	dd000515 	stw	r20,20(sp)
    685c:	dcc00415 	stw	r19,16(sp)
    6860:	dc800315 	stw	r18,12(sp)
    6864:	2025883a 	mov	r18,r4
    6868:	00067240 	call	6724 <__b2d>
    686c:	8809883a 	mov	r4,r17
    6870:	d9400104 	addi	r5,sp,4
    6874:	1027883a 	mov	r19,r2
    6878:	1829883a 	mov	r20,r3
    687c:	00067240 	call	6724 <__b2d>
    6880:	89000417 	ldw	r4,16(r17)
    6884:	91c00417 	ldw	r7,16(r18)
    6888:	d9800117 	ldw	r6,4(sp)
    688c:	180b883a 	mov	r5,r3
    6890:	390fc83a 	sub	r7,r7,r4
    6894:	1009883a 	mov	r4,r2
    6898:	d8800017 	ldw	r2,0(sp)
    689c:	380e917a 	slli	r7,r7,5
    68a0:	2011883a 	mov	r8,r4
    68a4:	1185c83a 	sub	r2,r2,r6
    68a8:	11c5883a 	add	r2,r2,r7
    68ac:	1006953a 	slli	r3,r2,20
    68b0:	2813883a 	mov	r9,r5
    68b4:	00800d0e 	bge	zero,r2,68ec <__ratio+0xa8>
    68b8:	1d29883a 	add	r20,r3,r20
    68bc:	a00b883a 	mov	r5,r20
    68c0:	480f883a 	mov	r7,r9
    68c4:	9809883a 	mov	r4,r19
    68c8:	400d883a 	mov	r6,r8
    68cc:	0009b540 	call	9b54 <__divdf3>
    68d0:	dfc00617 	ldw	ra,24(sp)
    68d4:	dd000517 	ldw	r20,20(sp)
    68d8:	dcc00417 	ldw	r19,16(sp)
    68dc:	dc800317 	ldw	r18,12(sp)
    68e0:	dc400217 	ldw	r17,8(sp)
    68e4:	dec00704 	addi	sp,sp,28
    68e8:	f800283a 	ret
    68ec:	28d3c83a 	sub	r9,r5,r3
    68f0:	003ff206 	br	68bc <__ratio+0x78>

000068f4 <_mprec_log10>:
    68f4:	defffe04 	addi	sp,sp,-8
    68f8:	008005c4 	movi	r2,23
    68fc:	dc000015 	stw	r16,0(sp)
    6900:	dfc00115 	stw	ra,4(sp)
    6904:	2021883a 	mov	r16,r4
    6908:	11000c16 	blt	r2,r4,693c <_mprec_log10+0x48>
    690c:	200490fa 	slli	r2,r4,3
    6910:	00c00074 	movhi	r3,1
    6914:	18f5e504 	addi	r3,r3,-10348
    6918:	10c5883a 	add	r2,r2,r3
    691c:	12400117 	ldw	r9,4(r2)
    6920:	12000017 	ldw	r8,0(r2)
    6924:	4807883a 	mov	r3,r9
    6928:	4005883a 	mov	r2,r8
    692c:	dfc00117 	ldw	ra,4(sp)
    6930:	dc000017 	ldw	r16,0(sp)
    6934:	dec00204 	addi	sp,sp,8
    6938:	f800283a 	ret
    693c:	0011883a 	mov	r8,zero
    6940:	024ffc34 	movhi	r9,16368
    6944:	0005883a 	mov	r2,zero
    6948:	00d00934 	movhi	r3,16420
    694c:	480b883a 	mov	r5,r9
    6950:	4009883a 	mov	r4,r8
    6954:	180f883a 	mov	r7,r3
    6958:	100d883a 	mov	r6,r2
    695c:	00097900 	call	9790 <__muldf3>
    6960:	843fffc4 	addi	r16,r16,-1
    6964:	1011883a 	mov	r8,r2
    6968:	1813883a 	mov	r9,r3
    696c:	803ff51e 	bne	r16,zero,6944 <_mprec_log10+0x50>
    6970:	4005883a 	mov	r2,r8
    6974:	4807883a 	mov	r3,r9
    6978:	dfc00117 	ldw	ra,4(sp)
    697c:	dc000017 	ldw	r16,0(sp)
    6980:	dec00204 	addi	sp,sp,8
    6984:	f800283a 	ret

00006988 <__copybits>:
    6988:	297fffc4 	addi	r5,r5,-1
    698c:	30800417 	ldw	r2,16(r6)
    6990:	280bd17a 	srai	r5,r5,5
    6994:	31800504 	addi	r6,r6,20
    6998:	1085883a 	add	r2,r2,r2
    699c:	294b883a 	add	r5,r5,r5
    69a0:	294b883a 	add	r5,r5,r5
    69a4:	1085883a 	add	r2,r2,r2
    69a8:	290b883a 	add	r5,r5,r4
    69ac:	3087883a 	add	r3,r6,r2
    69b0:	29400104 	addi	r5,r5,4
    69b4:	30c0052e 	bgeu	r6,r3,69cc <__copybits+0x44>
    69b8:	30800017 	ldw	r2,0(r6)
    69bc:	31800104 	addi	r6,r6,4
    69c0:	20800015 	stw	r2,0(r4)
    69c4:	21000104 	addi	r4,r4,4
    69c8:	30fffb36 	bltu	r6,r3,69b8 <__copybits+0x30>
    69cc:	2140032e 	bgeu	r4,r5,69dc <__copybits+0x54>
    69d0:	20000015 	stw	zero,0(r4)
    69d4:	21000104 	addi	r4,r4,4
    69d8:	217ffd36 	bltu	r4,r5,69d0 <__copybits+0x48>
    69dc:	f800283a 	ret

000069e0 <__any_on>:
    69e0:	20800417 	ldw	r2,16(r4)
    69e4:	2807d17a 	srai	r3,r5,5
    69e8:	21000504 	addi	r4,r4,20
    69ec:	10c00d0e 	bge	r2,r3,6a24 <__any_on+0x44>
    69f0:	1085883a 	add	r2,r2,r2
    69f4:	1085883a 	add	r2,r2,r2
    69f8:	208d883a 	add	r6,r4,r2
    69fc:	2180182e 	bgeu	r4,r6,6a60 <__any_on+0x80>
    6a00:	30bfff17 	ldw	r2,-4(r6)
    6a04:	30ffff04 	addi	r3,r6,-4
    6a08:	1000041e 	bne	r2,zero,6a1c <__any_on+0x3c>
    6a0c:	20c0142e 	bgeu	r4,r3,6a60 <__any_on+0x80>
    6a10:	18ffff04 	addi	r3,r3,-4
    6a14:	18800017 	ldw	r2,0(r3)
    6a18:	103ffc26 	beq	r2,zero,6a0c <__any_on+0x2c>
    6a1c:	00800044 	movi	r2,1
    6a20:	f800283a 	ret
    6a24:	18800a0e 	bge	r3,r2,6a50 <__any_on+0x70>
    6a28:	294007cc 	andi	r5,r5,31
    6a2c:	28000826 	beq	r5,zero,6a50 <__any_on+0x70>
    6a30:	18c5883a 	add	r2,r3,r3
    6a34:	1085883a 	add	r2,r2,r2
    6a38:	208d883a 	add	r6,r4,r2
    6a3c:	30c00017 	ldw	r3,0(r6)
    6a40:	1944d83a 	srl	r2,r3,r5
    6a44:	1144983a 	sll	r2,r2,r5
    6a48:	18bff41e 	bne	r3,r2,6a1c <__any_on+0x3c>
    6a4c:	003feb06 	br	69fc <__any_on+0x1c>
    6a50:	18c5883a 	add	r2,r3,r3
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	208d883a 	add	r6,r4,r2
    6a5c:	003fe706 	br	69fc <__any_on+0x1c>
    6a60:	0005883a 	mov	r2,zero
    6a64:	f800283a 	ret

00006a68 <_Balloc>:
    6a68:	20c01317 	ldw	r3,76(r4)
    6a6c:	defffb04 	addi	sp,sp,-20
    6a70:	dcc00315 	stw	r19,12(sp)
    6a74:	dc800215 	stw	r18,8(sp)
    6a78:	dfc00415 	stw	ra,16(sp)
    6a7c:	2825883a 	mov	r18,r5
    6a80:	dc400115 	stw	r17,4(sp)
    6a84:	dc000015 	stw	r16,0(sp)
    6a88:	2027883a 	mov	r19,r4
    6a8c:	01800404 	movi	r6,16
    6a90:	01400104 	movi	r5,4
    6a94:	18001726 	beq	r3,zero,6af4 <_Balloc+0x8c>
    6a98:	01400044 	movi	r5,1
    6a9c:	9485883a 	add	r2,r18,r18
    6aa0:	2ca2983a 	sll	r17,r5,r18
    6aa4:	1085883a 	add	r2,r2,r2
    6aa8:	10c7883a 	add	r3,r2,r3
    6aac:	1c000017 	ldw	r16,0(r3)
    6ab0:	8c4d883a 	add	r6,r17,r17
    6ab4:	318d883a 	add	r6,r6,r6
    6ab8:	9809883a 	mov	r4,r19
    6abc:	31800504 	addi	r6,r6,20
    6ac0:	80001226 	beq	r16,zero,6b0c <_Balloc+0xa4>
    6ac4:	80800017 	ldw	r2,0(r16)
    6ac8:	18800015 	stw	r2,0(r3)
    6acc:	80000415 	stw	zero,16(r16)
    6ad0:	80000315 	stw	zero,12(r16)
    6ad4:	8005883a 	mov	r2,r16
    6ad8:	dfc00417 	ldw	ra,16(sp)
    6adc:	dcc00317 	ldw	r19,12(sp)
    6ae0:	dc800217 	ldw	r18,8(sp)
    6ae4:	dc400117 	ldw	r17,4(sp)
    6ae8:	dc000017 	ldw	r16,0(sp)
    6aec:	dec00504 	addi	sp,sp,20
    6af0:	f800283a 	ret
    6af4:	00081900 	call	8190 <_calloc_r>
    6af8:	1007883a 	mov	r3,r2
    6afc:	0021883a 	mov	r16,zero
    6b00:	98801315 	stw	r2,76(r19)
    6b04:	103fe41e 	bne	r2,zero,6a98 <_Balloc+0x30>
    6b08:	003ff206 	br	6ad4 <_Balloc+0x6c>
    6b0c:	00081900 	call	8190 <_calloc_r>
    6b10:	103ff026 	beq	r2,zero,6ad4 <_Balloc+0x6c>
    6b14:	1021883a 	mov	r16,r2
    6b18:	14800115 	stw	r18,4(r2)
    6b1c:	14400215 	stw	r17,8(r2)
    6b20:	003fea06 	br	6acc <_Balloc+0x64>

00006b24 <__d2b>:
    6b24:	defff504 	addi	sp,sp,-44
    6b28:	dcc00515 	stw	r19,20(sp)
    6b2c:	04c00044 	movi	r19,1
    6b30:	dc000215 	stw	r16,8(sp)
    6b34:	2821883a 	mov	r16,r5
    6b38:	980b883a 	mov	r5,r19
    6b3c:	ddc00915 	stw	r23,36(sp)
    6b40:	dd800815 	stw	r22,32(sp)
    6b44:	dd400715 	stw	r21,28(sp)
    6b48:	dd000615 	stw	r20,24(sp)
    6b4c:	dc800415 	stw	r18,16(sp)
    6b50:	dc400315 	stw	r17,12(sp)
    6b54:	dfc00a15 	stw	ra,40(sp)
    6b58:	3023883a 	mov	r17,r6
    6b5c:	382d883a 	mov	r22,r7
    6b60:	ddc00b17 	ldw	r23,44(sp)
    6b64:	0006a680 	call	6a68 <_Balloc>
    6b68:	1025883a 	mov	r18,r2
    6b6c:	00a00034 	movhi	r2,32768
    6b70:	10bfffc4 	addi	r2,r2,-1
    6b74:	8888703a 	and	r4,r17,r2
    6b78:	202ad53a 	srli	r21,r4,20
    6b7c:	00800434 	movhi	r2,16
    6b80:	10bfffc4 	addi	r2,r2,-1
    6b84:	8886703a 	and	r3,r17,r2
    6b88:	a829003a 	cmpeq	r20,r21,zero
    6b8c:	800b883a 	mov	r5,r16
    6b90:	d8c00115 	stw	r3,4(sp)
    6b94:	94000504 	addi	r16,r18,20
    6b98:	a000021e 	bne	r20,zero,6ba4 <__d2b+0x80>
    6b9c:	18c00434 	orhi	r3,r3,16
    6ba0:	d8c00115 	stw	r3,4(sp)
    6ba4:	28002726 	beq	r5,zero,6c44 <__d2b+0x120>
    6ba8:	d809883a 	mov	r4,sp
    6bac:	d9400015 	stw	r5,0(sp)
    6bb0:	00065800 	call	6580 <__lo0bits>
    6bb4:	100d883a 	mov	r6,r2
    6bb8:	10003526 	beq	r2,zero,6c90 <__d2b+0x16c>
    6bbc:	d8c00117 	ldw	r3,4(sp)
    6bc0:	00800804 	movi	r2,32
    6bc4:	1185c83a 	sub	r2,r2,r6
    6bc8:	d9000017 	ldw	r4,0(sp)
    6bcc:	1886983a 	sll	r3,r3,r2
    6bd0:	1906b03a 	or	r3,r3,r4
    6bd4:	90c00515 	stw	r3,20(r18)
    6bd8:	d8c00117 	ldw	r3,4(sp)
    6bdc:	1986d83a 	srl	r3,r3,r6
    6be0:	d8c00115 	stw	r3,4(sp)
    6be4:	180b003a 	cmpeq	r5,r3,zero
    6be8:	00800084 	movi	r2,2
    6bec:	114bc83a 	sub	r5,r2,r5
    6bf0:	80c00115 	stw	r3,4(r16)
    6bf4:	91400415 	stw	r5,16(r18)
    6bf8:	a0001a1e 	bne	r20,zero,6c64 <__d2b+0x140>
    6bfc:	3545883a 	add	r2,r6,r21
    6c00:	10bef344 	addi	r2,r2,-1075
    6c04:	00c00d44 	movi	r3,53
    6c08:	b0800015 	stw	r2,0(r22)
    6c0c:	1987c83a 	sub	r3,r3,r6
    6c10:	b8c00015 	stw	r3,0(r23)
    6c14:	9005883a 	mov	r2,r18
    6c18:	dfc00a17 	ldw	ra,40(sp)
    6c1c:	ddc00917 	ldw	r23,36(sp)
    6c20:	dd800817 	ldw	r22,32(sp)
    6c24:	dd400717 	ldw	r21,28(sp)
    6c28:	dd000617 	ldw	r20,24(sp)
    6c2c:	dcc00517 	ldw	r19,20(sp)
    6c30:	dc800417 	ldw	r18,16(sp)
    6c34:	dc400317 	ldw	r17,12(sp)
    6c38:	dc000217 	ldw	r16,8(sp)
    6c3c:	dec00b04 	addi	sp,sp,44
    6c40:	f800283a 	ret
    6c44:	d9000104 	addi	r4,sp,4
    6c48:	00065800 	call	6580 <__lo0bits>
    6c4c:	11800804 	addi	r6,r2,32
    6c50:	d8800117 	ldw	r2,4(sp)
    6c54:	94c00415 	stw	r19,16(r18)
    6c58:	980b883a 	mov	r5,r19
    6c5c:	90800515 	stw	r2,20(r18)
    6c60:	a03fe626 	beq	r20,zero,6bfc <__d2b+0xd8>
    6c64:	2945883a 	add	r2,r5,r5
    6c68:	1085883a 	add	r2,r2,r2
    6c6c:	1405883a 	add	r2,r2,r16
    6c70:	113fff17 	ldw	r4,-4(r2)
    6c74:	30fef384 	addi	r3,r6,-1074
    6c78:	2820917a 	slli	r16,r5,5
    6c7c:	b0c00015 	stw	r3,0(r22)
    6c80:	00065100 	call	6510 <__hi0bits>
    6c84:	80a1c83a 	sub	r16,r16,r2
    6c88:	bc000015 	stw	r16,0(r23)
    6c8c:	003fe106 	br	6c14 <__d2b+0xf0>
    6c90:	d8800017 	ldw	r2,0(sp)
    6c94:	90800515 	stw	r2,20(r18)
    6c98:	d8c00117 	ldw	r3,4(sp)
    6c9c:	003fd106 	br	6be4 <__d2b+0xc0>

00006ca0 <__mdiff>:
    6ca0:	defffb04 	addi	sp,sp,-20
    6ca4:	dc000015 	stw	r16,0(sp)
    6ca8:	2821883a 	mov	r16,r5
    6cac:	dc800215 	stw	r18,8(sp)
    6cb0:	300b883a 	mov	r5,r6
    6cb4:	2025883a 	mov	r18,r4
    6cb8:	8009883a 	mov	r4,r16
    6cbc:	dc400115 	stw	r17,4(sp)
    6cc0:	dfc00415 	stw	ra,16(sp)
    6cc4:	dcc00315 	stw	r19,12(sp)
    6cc8:	3023883a 	mov	r17,r6
    6ccc:	00066440 	call	6644 <__mcmp>
    6cd0:	10004226 	beq	r2,zero,6ddc <__mdiff+0x13c>
    6cd4:	10005016 	blt	r2,zero,6e18 <__mdiff+0x178>
    6cd8:	0027883a 	mov	r19,zero
    6cdc:	81400117 	ldw	r5,4(r16)
    6ce0:	9009883a 	mov	r4,r18
    6ce4:	0006a680 	call	6a68 <_Balloc>
    6ce8:	1019883a 	mov	r12,r2
    6cec:	82800417 	ldw	r10,16(r16)
    6cf0:	88800417 	ldw	r2,16(r17)
    6cf4:	81800504 	addi	r6,r16,20
    6cf8:	5287883a 	add	r3,r10,r10
    6cfc:	1085883a 	add	r2,r2,r2
    6d00:	18c7883a 	add	r3,r3,r3
    6d04:	1085883a 	add	r2,r2,r2
    6d08:	8a000504 	addi	r8,r17,20
    6d0c:	64c00315 	stw	r19,12(r12)
    6d10:	30db883a 	add	r13,r6,r3
    6d14:	4097883a 	add	r11,r8,r2
    6d18:	61c00504 	addi	r7,r12,20
    6d1c:	0013883a 	mov	r9,zero
    6d20:	31000017 	ldw	r4,0(r6)
    6d24:	41400017 	ldw	r5,0(r8)
    6d28:	42000104 	addi	r8,r8,4
    6d2c:	20bfffcc 	andi	r2,r4,65535
    6d30:	28ffffcc 	andi	r3,r5,65535
    6d34:	10c5c83a 	sub	r2,r2,r3
    6d38:	1245883a 	add	r2,r2,r9
    6d3c:	2008d43a 	srli	r4,r4,16
    6d40:	280ad43a 	srli	r5,r5,16
    6d44:	1007d43a 	srai	r3,r2,16
    6d48:	3880000d 	sth	r2,0(r7)
    6d4c:	2149c83a 	sub	r4,r4,r5
    6d50:	20c9883a 	add	r4,r4,r3
    6d54:	3900008d 	sth	r4,2(r7)
    6d58:	31800104 	addi	r6,r6,4
    6d5c:	39c00104 	addi	r7,r7,4
    6d60:	2013d43a 	srai	r9,r4,16
    6d64:	42ffee36 	bltu	r8,r11,6d20 <__mdiff+0x80>
    6d68:	33400c2e 	bgeu	r6,r13,6d9c <__mdiff+0xfc>
    6d6c:	30800017 	ldw	r2,0(r6)
    6d70:	31800104 	addi	r6,r6,4
    6d74:	10ffffcc 	andi	r3,r2,65535
    6d78:	1a47883a 	add	r3,r3,r9
    6d7c:	1004d43a 	srli	r2,r2,16
    6d80:	1809d43a 	srai	r4,r3,16
    6d84:	38c0000d 	sth	r3,0(r7)
    6d88:	1105883a 	add	r2,r2,r4
    6d8c:	3880008d 	sth	r2,2(r7)
    6d90:	1013d43a 	srai	r9,r2,16
    6d94:	39c00104 	addi	r7,r7,4
    6d98:	337ff436 	bltu	r6,r13,6d6c <__mdiff+0xcc>
    6d9c:	38bfff17 	ldw	r2,-4(r7)
    6da0:	38ffff04 	addi	r3,r7,-4
    6da4:	1000041e 	bne	r2,zero,6db8 <__mdiff+0x118>
    6da8:	18ffff04 	addi	r3,r3,-4
    6dac:	18800017 	ldw	r2,0(r3)
    6db0:	52bfffc4 	addi	r10,r10,-1
    6db4:	103ffc26 	beq	r2,zero,6da8 <__mdiff+0x108>
    6db8:	6005883a 	mov	r2,r12
    6dbc:	62800415 	stw	r10,16(r12)
    6dc0:	dfc00417 	ldw	ra,16(sp)
    6dc4:	dcc00317 	ldw	r19,12(sp)
    6dc8:	dc800217 	ldw	r18,8(sp)
    6dcc:	dc400117 	ldw	r17,4(sp)
    6dd0:	dc000017 	ldw	r16,0(sp)
    6dd4:	dec00504 	addi	sp,sp,20
    6dd8:	f800283a 	ret
    6ddc:	9009883a 	mov	r4,r18
    6de0:	000b883a 	mov	r5,zero
    6de4:	0006a680 	call	6a68 <_Balloc>
    6de8:	1019883a 	mov	r12,r2
    6dec:	00800044 	movi	r2,1
    6df0:	60800415 	stw	r2,16(r12)
    6df4:	6005883a 	mov	r2,r12
    6df8:	60000515 	stw	zero,20(r12)
    6dfc:	dfc00417 	ldw	ra,16(sp)
    6e00:	dcc00317 	ldw	r19,12(sp)
    6e04:	dc800217 	ldw	r18,8(sp)
    6e08:	dc400117 	ldw	r17,4(sp)
    6e0c:	dc000017 	ldw	r16,0(sp)
    6e10:	dec00504 	addi	sp,sp,20
    6e14:	f800283a 	ret
    6e18:	880d883a 	mov	r6,r17
    6e1c:	04c00044 	movi	r19,1
    6e20:	8023883a 	mov	r17,r16
    6e24:	3021883a 	mov	r16,r6
    6e28:	003fac06 	br	6cdc <__mdiff+0x3c>

00006e2c <__lshift>:
    6e2c:	defff904 	addi	sp,sp,-28
    6e30:	28800417 	ldw	r2,16(r5)
    6e34:	dc000015 	stw	r16,0(sp)
    6e38:	3021d17a 	srai	r16,r6,5
    6e3c:	28c00217 	ldw	r3,8(r5)
    6e40:	10800044 	addi	r2,r2,1
    6e44:	dc400115 	stw	r17,4(sp)
    6e48:	80a3883a 	add	r17,r16,r2
    6e4c:	dd400515 	stw	r21,20(sp)
    6e50:	dd000415 	stw	r20,16(sp)
    6e54:	dc800215 	stw	r18,8(sp)
    6e58:	dfc00615 	stw	ra,24(sp)
    6e5c:	2825883a 	mov	r18,r5
    6e60:	dcc00315 	stw	r19,12(sp)
    6e64:	3029883a 	mov	r20,r6
    6e68:	202b883a 	mov	r21,r4
    6e6c:	29400117 	ldw	r5,4(r5)
    6e70:	1c40030e 	bge	r3,r17,6e80 <__lshift+0x54>
    6e74:	18c7883a 	add	r3,r3,r3
    6e78:	29400044 	addi	r5,r5,1
    6e7c:	1c7ffd16 	blt	r3,r17,6e74 <__lshift+0x48>
    6e80:	a809883a 	mov	r4,r21
    6e84:	0006a680 	call	6a68 <_Balloc>
    6e88:	1027883a 	mov	r19,r2
    6e8c:	11400504 	addi	r5,r2,20
    6e90:	0400090e 	bge	zero,r16,6eb8 <__lshift+0x8c>
    6e94:	2805883a 	mov	r2,r5
    6e98:	0007883a 	mov	r3,zero
    6e9c:	18c00044 	addi	r3,r3,1
    6ea0:	10000015 	stw	zero,0(r2)
    6ea4:	10800104 	addi	r2,r2,4
    6ea8:	80fffc1e 	bne	r16,r3,6e9c <__lshift+0x70>
    6eac:	8405883a 	add	r2,r16,r16
    6eb0:	1085883a 	add	r2,r2,r2
    6eb4:	288b883a 	add	r5,r5,r2
    6eb8:	90800417 	ldw	r2,16(r18)
    6ebc:	91000504 	addi	r4,r18,20
    6ec0:	a18007cc 	andi	r6,r20,31
    6ec4:	1085883a 	add	r2,r2,r2
    6ec8:	1085883a 	add	r2,r2,r2
    6ecc:	208f883a 	add	r7,r4,r2
    6ed0:	30001e26 	beq	r6,zero,6f4c <__lshift+0x120>
    6ed4:	00800804 	movi	r2,32
    6ed8:	1191c83a 	sub	r8,r2,r6
    6edc:	0007883a 	mov	r3,zero
    6ee0:	20800017 	ldw	r2,0(r4)
    6ee4:	1184983a 	sll	r2,r2,r6
    6ee8:	1884b03a 	or	r2,r3,r2
    6eec:	28800015 	stw	r2,0(r5)
    6ef0:	20c00017 	ldw	r3,0(r4)
    6ef4:	21000104 	addi	r4,r4,4
    6ef8:	29400104 	addi	r5,r5,4
    6efc:	1a06d83a 	srl	r3,r3,r8
    6f00:	21fff736 	bltu	r4,r7,6ee0 <__lshift+0xb4>
    6f04:	28c00015 	stw	r3,0(r5)
    6f08:	18000126 	beq	r3,zero,6f10 <__lshift+0xe4>
    6f0c:	8c400044 	addi	r17,r17,1
    6f10:	88bfffc4 	addi	r2,r17,-1
    6f14:	98800415 	stw	r2,16(r19)
    6f18:	a809883a 	mov	r4,r21
    6f1c:	900b883a 	mov	r5,r18
    6f20:	00064e80 	call	64e8 <_Bfree>
    6f24:	9805883a 	mov	r2,r19
    6f28:	dfc00617 	ldw	ra,24(sp)
    6f2c:	dd400517 	ldw	r21,20(sp)
    6f30:	dd000417 	ldw	r20,16(sp)
    6f34:	dcc00317 	ldw	r19,12(sp)
    6f38:	dc800217 	ldw	r18,8(sp)
    6f3c:	dc400117 	ldw	r17,4(sp)
    6f40:	dc000017 	ldw	r16,0(sp)
    6f44:	dec00704 	addi	sp,sp,28
    6f48:	f800283a 	ret
    6f4c:	20800017 	ldw	r2,0(r4)
    6f50:	21000104 	addi	r4,r4,4
    6f54:	28800015 	stw	r2,0(r5)
    6f58:	29400104 	addi	r5,r5,4
    6f5c:	21ffec2e 	bgeu	r4,r7,6f10 <__lshift+0xe4>
    6f60:	20800017 	ldw	r2,0(r4)
    6f64:	21000104 	addi	r4,r4,4
    6f68:	28800015 	stw	r2,0(r5)
    6f6c:	29400104 	addi	r5,r5,4
    6f70:	21fff636 	bltu	r4,r7,6f4c <__lshift+0x120>
    6f74:	003fe606 	br	6f10 <__lshift+0xe4>

00006f78 <__multiply>:
    6f78:	defff004 	addi	sp,sp,-64
    6f7c:	dc800815 	stw	r18,32(sp)
    6f80:	dc400715 	stw	r17,28(sp)
    6f84:	2c800417 	ldw	r18,16(r5)
    6f88:	34400417 	ldw	r17,16(r6)
    6f8c:	dcc00915 	stw	r19,36(sp)
    6f90:	dc000615 	stw	r16,24(sp)
    6f94:	dfc00f15 	stw	ra,60(sp)
    6f98:	df000e15 	stw	fp,56(sp)
    6f9c:	ddc00d15 	stw	r23,52(sp)
    6fa0:	dd800c15 	stw	r22,48(sp)
    6fa4:	dd400b15 	stw	r21,44(sp)
    6fa8:	dd000a15 	stw	r20,40(sp)
    6fac:	2821883a 	mov	r16,r5
    6fb0:	3027883a 	mov	r19,r6
    6fb4:	9440040e 	bge	r18,r17,6fc8 <__multiply+0x50>
    6fb8:	8825883a 	mov	r18,r17
    6fbc:	2c400417 	ldw	r17,16(r5)
    6fc0:	2827883a 	mov	r19,r5
    6fc4:	3021883a 	mov	r16,r6
    6fc8:	80800217 	ldw	r2,8(r16)
    6fcc:	9447883a 	add	r3,r18,r17
    6fd0:	d8c00415 	stw	r3,16(sp)
    6fd4:	81400117 	ldw	r5,4(r16)
    6fd8:	10c0010e 	bge	r2,r3,6fe0 <__multiply+0x68>
    6fdc:	29400044 	addi	r5,r5,1
    6fe0:	0006a680 	call	6a68 <_Balloc>
    6fe4:	d8800515 	stw	r2,20(sp)
    6fe8:	d9000417 	ldw	r4,16(sp)
    6fec:	d8c00517 	ldw	r3,20(sp)
    6ff0:	2105883a 	add	r2,r4,r4
    6ff4:	1085883a 	add	r2,r2,r2
    6ff8:	19000504 	addi	r4,r3,20
    6ffc:	2085883a 	add	r2,r4,r2
    7000:	d8800315 	stw	r2,12(sp)
    7004:	2080052e 	bgeu	r4,r2,701c <__multiply+0xa4>
    7008:	2005883a 	mov	r2,r4
    700c:	d8c00317 	ldw	r3,12(sp)
    7010:	10000015 	stw	zero,0(r2)
    7014:	10800104 	addi	r2,r2,4
    7018:	10fffc36 	bltu	r2,r3,700c <__multiply+0x94>
    701c:	8c45883a 	add	r2,r17,r17
    7020:	9487883a 	add	r3,r18,r18
    7024:	9dc00504 	addi	r23,r19,20
    7028:	1085883a 	add	r2,r2,r2
    702c:	84000504 	addi	r16,r16,20
    7030:	18c7883a 	add	r3,r3,r3
    7034:	b885883a 	add	r2,r23,r2
    7038:	dc000015 	stw	r16,0(sp)
    703c:	d8800215 	stw	r2,8(sp)
    7040:	80f9883a 	add	fp,r16,r3
    7044:	b880432e 	bgeu	r23,r2,7154 <__multiply+0x1dc>
    7048:	d9000115 	stw	r4,4(sp)
    704c:	b9000017 	ldw	r4,0(r23)
    7050:	253fffcc 	andi	r20,r4,65535
    7054:	a0001a26 	beq	r20,zero,70c0 <__multiply+0x148>
    7058:	dcc00017 	ldw	r19,0(sp)
    705c:	dc800117 	ldw	r18,4(sp)
    7060:	002b883a 	mov	r21,zero
    7064:	9c400017 	ldw	r17,0(r19)
    7068:	94000017 	ldw	r16,0(r18)
    706c:	a009883a 	mov	r4,r20
    7070:	897fffcc 	andi	r5,r17,65535
    7074:	0000af40 	call	af4 <__mulsi3>
    7078:	880ad43a 	srli	r5,r17,16
    707c:	80ffffcc 	andi	r3,r16,65535
    7080:	a8c7883a 	add	r3,r21,r3
    7084:	a009883a 	mov	r4,r20
    7088:	10e3883a 	add	r17,r2,r3
    708c:	8020d43a 	srli	r16,r16,16
    7090:	0000af40 	call	af4 <__mulsi3>
    7094:	8806d43a 	srli	r3,r17,16
    7098:	1405883a 	add	r2,r2,r16
    709c:	9cc00104 	addi	r19,r19,4
    70a0:	1887883a 	add	r3,r3,r2
    70a4:	90c0008d 	sth	r3,2(r18)
    70a8:	9440000d 	sth	r17,0(r18)
    70ac:	182ad43a 	srli	r21,r3,16
    70b0:	94800104 	addi	r18,r18,4
    70b4:	9f3feb36 	bltu	r19,fp,7064 <__multiply+0xec>
    70b8:	95400015 	stw	r21,0(r18)
    70bc:	b9000017 	ldw	r4,0(r23)
    70c0:	202ad43a 	srli	r21,r4,16
    70c4:	a8001c26 	beq	r21,zero,7138 <__multiply+0x1c0>
    70c8:	d9000117 	ldw	r4,4(sp)
    70cc:	dd000017 	ldw	r20,0(sp)
    70d0:	002d883a 	mov	r22,zero
    70d4:	24c00017 	ldw	r19,0(r4)
    70d8:	2025883a 	mov	r18,r4
    70dc:	9823883a 	mov	r17,r19
    70e0:	a4000017 	ldw	r16,0(r20)
    70e4:	a809883a 	mov	r4,r21
    70e8:	a5000104 	addi	r20,r20,4
    70ec:	817fffcc 	andi	r5,r16,65535
    70f0:	0000af40 	call	af4 <__mulsi3>
    70f4:	8806d43a 	srli	r3,r17,16
    70f8:	800ad43a 	srli	r5,r16,16
    70fc:	94c0000d 	sth	r19,0(r18)
    7100:	b0c7883a 	add	r3,r22,r3
    7104:	10e1883a 	add	r16,r2,r3
    7108:	9400008d 	sth	r16,2(r18)
    710c:	a809883a 	mov	r4,r21
    7110:	94800104 	addi	r18,r18,4
    7114:	0000af40 	call	af4 <__mulsi3>
    7118:	94400017 	ldw	r17,0(r18)
    711c:	8020d43a 	srli	r16,r16,16
    7120:	88ffffcc 	andi	r3,r17,65535
    7124:	10c5883a 	add	r2,r2,r3
    7128:	80a7883a 	add	r19,r16,r2
    712c:	982cd43a 	srli	r22,r19,16
    7130:	a73feb36 	bltu	r20,fp,70e0 <__multiply+0x168>
    7134:	94c00015 	stw	r19,0(r18)
    7138:	d8800217 	ldw	r2,8(sp)
    713c:	bdc00104 	addi	r23,r23,4
    7140:	b880042e 	bgeu	r23,r2,7154 <__multiply+0x1dc>
    7144:	d8c00117 	ldw	r3,4(sp)
    7148:	18c00104 	addi	r3,r3,4
    714c:	d8c00115 	stw	r3,4(sp)
    7150:	003fbe06 	br	704c <__multiply+0xd4>
    7154:	d9000417 	ldw	r4,16(sp)
    7158:	01000c0e 	bge	zero,r4,718c <__multiply+0x214>
    715c:	d8c00317 	ldw	r3,12(sp)
    7160:	18bfff17 	ldw	r2,-4(r3)
    7164:	18ffff04 	addi	r3,r3,-4
    7168:	10000326 	beq	r2,zero,7178 <__multiply+0x200>
    716c:	00000706 	br	718c <__multiply+0x214>
    7170:	18800017 	ldw	r2,0(r3)
    7174:	1000051e 	bne	r2,zero,718c <__multiply+0x214>
    7178:	d9000417 	ldw	r4,16(sp)
    717c:	18ffff04 	addi	r3,r3,-4
    7180:	213fffc4 	addi	r4,r4,-1
    7184:	d9000415 	stw	r4,16(sp)
    7188:	203ff91e 	bne	r4,zero,7170 <__multiply+0x1f8>
    718c:	d8800417 	ldw	r2,16(sp)
    7190:	d8c00517 	ldw	r3,20(sp)
    7194:	18800415 	stw	r2,16(r3)
    7198:	1805883a 	mov	r2,r3
    719c:	dfc00f17 	ldw	ra,60(sp)
    71a0:	df000e17 	ldw	fp,56(sp)
    71a4:	ddc00d17 	ldw	r23,52(sp)
    71a8:	dd800c17 	ldw	r22,48(sp)
    71ac:	dd400b17 	ldw	r21,44(sp)
    71b0:	dd000a17 	ldw	r20,40(sp)
    71b4:	dcc00917 	ldw	r19,36(sp)
    71b8:	dc800817 	ldw	r18,32(sp)
    71bc:	dc400717 	ldw	r17,28(sp)
    71c0:	dc000617 	ldw	r16,24(sp)
    71c4:	dec01004 	addi	sp,sp,64
    71c8:	f800283a 	ret

000071cc <__i2b>:
    71cc:	defffd04 	addi	sp,sp,-12
    71d0:	dc000015 	stw	r16,0(sp)
    71d4:	04000044 	movi	r16,1
    71d8:	dc800115 	stw	r18,4(sp)
    71dc:	2825883a 	mov	r18,r5
    71e0:	800b883a 	mov	r5,r16
    71e4:	dfc00215 	stw	ra,8(sp)
    71e8:	0006a680 	call	6a68 <_Balloc>
    71ec:	14000415 	stw	r16,16(r2)
    71f0:	14800515 	stw	r18,20(r2)
    71f4:	dfc00217 	ldw	ra,8(sp)
    71f8:	dc800117 	ldw	r18,4(sp)
    71fc:	dc000017 	ldw	r16,0(sp)
    7200:	dec00304 	addi	sp,sp,12
    7204:	f800283a 	ret

00007208 <__multadd>:
    7208:	defff604 	addi	sp,sp,-40
    720c:	dd800615 	stw	r22,24(sp)
    7210:	2d800417 	ldw	r22,16(r5)
    7214:	df000815 	stw	fp,32(sp)
    7218:	ddc00715 	stw	r23,28(sp)
    721c:	dd400515 	stw	r21,20(sp)
    7220:	dd000415 	stw	r20,16(sp)
    7224:	dcc00315 	stw	r19,12(sp)
    7228:	dc800215 	stw	r18,8(sp)
    722c:	dfc00915 	stw	ra,36(sp)
    7230:	dc400115 	stw	r17,4(sp)
    7234:	dc000015 	stw	r16,0(sp)
    7238:	282f883a 	mov	r23,r5
    723c:	2039883a 	mov	fp,r4
    7240:	302b883a 	mov	r21,r6
    7244:	3829883a 	mov	r20,r7
    7248:	2c800504 	addi	r18,r5,20
    724c:	0027883a 	mov	r19,zero
    7250:	94400017 	ldw	r17,0(r18)
    7254:	a80b883a 	mov	r5,r21
    7258:	9cc00044 	addi	r19,r19,1
    725c:	893fffcc 	andi	r4,r17,65535
    7260:	0000af40 	call	af4 <__mulsi3>
    7264:	8808d43a 	srli	r4,r17,16
    7268:	1521883a 	add	r16,r2,r20
    726c:	a80b883a 	mov	r5,r21
    7270:	0000af40 	call	af4 <__mulsi3>
    7274:	8008d43a 	srli	r4,r16,16
    7278:	843fffcc 	andi	r16,r16,65535
    727c:	1105883a 	add	r2,r2,r4
    7280:	1006943a 	slli	r3,r2,16
    7284:	1028d43a 	srli	r20,r2,16
    7288:	1c07883a 	add	r3,r3,r16
    728c:	90c00015 	stw	r3,0(r18)
    7290:	94800104 	addi	r18,r18,4
    7294:	9dbfee16 	blt	r19,r22,7250 <__multadd+0x48>
    7298:	a0000826 	beq	r20,zero,72bc <__multadd+0xb4>
    729c:	b8800217 	ldw	r2,8(r23)
    72a0:	b080130e 	bge	r22,r2,72f0 <__multadd+0xe8>
    72a4:	b585883a 	add	r2,r22,r22
    72a8:	1085883a 	add	r2,r2,r2
    72ac:	15c5883a 	add	r2,r2,r23
    72b0:	b0c00044 	addi	r3,r22,1
    72b4:	15000515 	stw	r20,20(r2)
    72b8:	b8c00415 	stw	r3,16(r23)
    72bc:	b805883a 	mov	r2,r23
    72c0:	dfc00917 	ldw	ra,36(sp)
    72c4:	df000817 	ldw	fp,32(sp)
    72c8:	ddc00717 	ldw	r23,28(sp)
    72cc:	dd800617 	ldw	r22,24(sp)
    72d0:	dd400517 	ldw	r21,20(sp)
    72d4:	dd000417 	ldw	r20,16(sp)
    72d8:	dcc00317 	ldw	r19,12(sp)
    72dc:	dc800217 	ldw	r18,8(sp)
    72e0:	dc400117 	ldw	r17,4(sp)
    72e4:	dc000017 	ldw	r16,0(sp)
    72e8:	dec00a04 	addi	sp,sp,40
    72ec:	f800283a 	ret
    72f0:	b9400117 	ldw	r5,4(r23)
    72f4:	e009883a 	mov	r4,fp
    72f8:	29400044 	addi	r5,r5,1
    72fc:	0006a680 	call	6a68 <_Balloc>
    7300:	b9800417 	ldw	r6,16(r23)
    7304:	b9400304 	addi	r5,r23,12
    7308:	11000304 	addi	r4,r2,12
    730c:	318d883a 	add	r6,r6,r6
    7310:	318d883a 	add	r6,r6,r6
    7314:	31800204 	addi	r6,r6,8
    7318:	1023883a 	mov	r17,r2
    731c:	00062d00 	call	62d0 <memcpy>
    7320:	b80b883a 	mov	r5,r23
    7324:	e009883a 	mov	r4,fp
    7328:	00064e80 	call	64e8 <_Bfree>
    732c:	882f883a 	mov	r23,r17
    7330:	003fdc06 	br	72a4 <__multadd+0x9c>

00007334 <__pow5mult>:
    7334:	defffa04 	addi	sp,sp,-24
    7338:	308000cc 	andi	r2,r6,3
    733c:	dd000415 	stw	r20,16(sp)
    7340:	dcc00315 	stw	r19,12(sp)
    7344:	dc000015 	stw	r16,0(sp)
    7348:	dfc00515 	stw	ra,20(sp)
    734c:	dc800215 	stw	r18,8(sp)
    7350:	dc400115 	stw	r17,4(sp)
    7354:	3021883a 	mov	r16,r6
    7358:	2027883a 	mov	r19,r4
    735c:	2829883a 	mov	r20,r5
    7360:	10002b1e 	bne	r2,zero,7410 <__pow5mult+0xdc>
    7364:	8025d0ba 	srai	r18,r16,2
    7368:	90001b26 	beq	r18,zero,73d8 <__pow5mult+0xa4>
    736c:	9c001217 	ldw	r16,72(r19)
    7370:	8000081e 	bne	r16,zero,7394 <__pow5mult+0x60>
    7374:	00003006 	br	7438 <__pow5mult+0x104>
    7378:	800b883a 	mov	r5,r16
    737c:	800d883a 	mov	r6,r16
    7380:	9809883a 	mov	r4,r19
    7384:	90001426 	beq	r18,zero,73d8 <__pow5mult+0xa4>
    7388:	80800017 	ldw	r2,0(r16)
    738c:	10001b26 	beq	r2,zero,73fc <__pow5mult+0xc8>
    7390:	1021883a 	mov	r16,r2
    7394:	9080004c 	andi	r2,r18,1
    7398:	1005003a 	cmpeq	r2,r2,zero
    739c:	9025d07a 	srai	r18,r18,1
    73a0:	800d883a 	mov	r6,r16
    73a4:	9809883a 	mov	r4,r19
    73a8:	a00b883a 	mov	r5,r20
    73ac:	103ff21e 	bne	r2,zero,7378 <__pow5mult+0x44>
    73b0:	0006f780 	call	6f78 <__multiply>
    73b4:	a00b883a 	mov	r5,r20
    73b8:	9809883a 	mov	r4,r19
    73bc:	1023883a 	mov	r17,r2
    73c0:	00064e80 	call	64e8 <_Bfree>
    73c4:	8829883a 	mov	r20,r17
    73c8:	800b883a 	mov	r5,r16
    73cc:	800d883a 	mov	r6,r16
    73d0:	9809883a 	mov	r4,r19
    73d4:	903fec1e 	bne	r18,zero,7388 <__pow5mult+0x54>
    73d8:	a005883a 	mov	r2,r20
    73dc:	dfc00517 	ldw	ra,20(sp)
    73e0:	dd000417 	ldw	r20,16(sp)
    73e4:	dcc00317 	ldw	r19,12(sp)
    73e8:	dc800217 	ldw	r18,8(sp)
    73ec:	dc400117 	ldw	r17,4(sp)
    73f0:	dc000017 	ldw	r16,0(sp)
    73f4:	dec00604 	addi	sp,sp,24
    73f8:	f800283a 	ret
    73fc:	0006f780 	call	6f78 <__multiply>
    7400:	80800015 	stw	r2,0(r16)
    7404:	1021883a 	mov	r16,r2
    7408:	10000015 	stw	zero,0(r2)
    740c:	003fe106 	br	7394 <__pow5mult+0x60>
    7410:	1085883a 	add	r2,r2,r2
    7414:	00c00074 	movhi	r3,1
    7418:	18f62b04 	addi	r3,r3,-10068
    741c:	1085883a 	add	r2,r2,r2
    7420:	10c5883a 	add	r2,r2,r3
    7424:	11bfff17 	ldw	r6,-4(r2)
    7428:	000f883a 	mov	r7,zero
    742c:	00072080 	call	7208 <__multadd>
    7430:	1029883a 	mov	r20,r2
    7434:	003fcb06 	br	7364 <__pow5mult+0x30>
    7438:	9809883a 	mov	r4,r19
    743c:	01409c44 	movi	r5,625
    7440:	00071cc0 	call	71cc <__i2b>
    7444:	98801215 	stw	r2,72(r19)
    7448:	1021883a 	mov	r16,r2
    744c:	10000015 	stw	zero,0(r2)
    7450:	003fd006 	br	7394 <__pow5mult+0x60>

00007454 <__s2b>:
    7454:	defff904 	addi	sp,sp,-28
    7458:	dcc00315 	stw	r19,12(sp)
    745c:	dc800215 	stw	r18,8(sp)
    7460:	2827883a 	mov	r19,r5
    7464:	2025883a 	mov	r18,r4
    7468:	01400244 	movi	r5,9
    746c:	39000204 	addi	r4,r7,8
    7470:	dd000415 	stw	r20,16(sp)
    7474:	dc400115 	stw	r17,4(sp)
    7478:	dfc00615 	stw	ra,24(sp)
    747c:	dd400515 	stw	r21,20(sp)
    7480:	dc000015 	stw	r16,0(sp)
    7484:	3829883a 	mov	r20,r7
    7488:	3023883a 	mov	r17,r6
    748c:	0000a240 	call	a24 <__divsi3>
    7490:	00c00044 	movi	r3,1
    7494:	1880350e 	bge	r3,r2,756c <__s2b+0x118>
    7498:	000b883a 	mov	r5,zero
    749c:	18c7883a 	add	r3,r3,r3
    74a0:	29400044 	addi	r5,r5,1
    74a4:	18bffd16 	blt	r3,r2,749c <__s2b+0x48>
    74a8:	9009883a 	mov	r4,r18
    74ac:	0006a680 	call	6a68 <_Balloc>
    74b0:	1011883a 	mov	r8,r2
    74b4:	d8800717 	ldw	r2,28(sp)
    74b8:	00c00044 	movi	r3,1
    74bc:	01800244 	movi	r6,9
    74c0:	40800515 	stw	r2,20(r8)
    74c4:	40c00415 	stw	r3,16(r8)
    74c8:	3440260e 	bge	r6,r17,7564 <__s2b+0x110>
    74cc:	3021883a 	mov	r16,r6
    74d0:	99ab883a 	add	r21,r19,r6
    74d4:	9c05883a 	add	r2,r19,r16
    74d8:	11c00007 	ldb	r7,0(r2)
    74dc:	400b883a 	mov	r5,r8
    74e0:	9009883a 	mov	r4,r18
    74e4:	39fff404 	addi	r7,r7,-48
    74e8:	01800284 	movi	r6,10
    74ec:	00072080 	call	7208 <__multadd>
    74f0:	84000044 	addi	r16,r16,1
    74f4:	1011883a 	mov	r8,r2
    74f8:	8c3ff61e 	bne	r17,r16,74d4 <__s2b+0x80>
    74fc:	ac45883a 	add	r2,r21,r17
    7500:	117ffe04 	addi	r5,r2,-8
    7504:	880d883a 	mov	r6,r17
    7508:	35000c0e 	bge	r6,r20,753c <__s2b+0xe8>
    750c:	a185c83a 	sub	r2,r20,r6
    7510:	2821883a 	mov	r16,r5
    7514:	28a3883a 	add	r17,r5,r2
    7518:	81c00007 	ldb	r7,0(r16)
    751c:	400b883a 	mov	r5,r8
    7520:	9009883a 	mov	r4,r18
    7524:	39fff404 	addi	r7,r7,-48
    7528:	01800284 	movi	r6,10
    752c:	00072080 	call	7208 <__multadd>
    7530:	84000044 	addi	r16,r16,1
    7534:	1011883a 	mov	r8,r2
    7538:	847ff71e 	bne	r16,r17,7518 <__s2b+0xc4>
    753c:	4005883a 	mov	r2,r8
    7540:	dfc00617 	ldw	ra,24(sp)
    7544:	dd400517 	ldw	r21,20(sp)
    7548:	dd000417 	ldw	r20,16(sp)
    754c:	dcc00317 	ldw	r19,12(sp)
    7550:	dc800217 	ldw	r18,8(sp)
    7554:	dc400117 	ldw	r17,4(sp)
    7558:	dc000017 	ldw	r16,0(sp)
    755c:	dec00704 	addi	sp,sp,28
    7560:	f800283a 	ret
    7564:	99400284 	addi	r5,r19,10
    7568:	003fe706 	br	7508 <__s2b+0xb4>
    756c:	000b883a 	mov	r5,zero
    7570:	003fcd06 	br	74a8 <__s2b+0x54>

00007574 <putc>:
    7574:	defffc04 	addi	sp,sp,-16
    7578:	dc800215 	stw	r18,8(sp)
    757c:	04800074 	movhi	r18,1
    7580:	94bd0504 	addi	r18,r18,-3052
    7584:	90c00017 	ldw	r3,0(r18)
    7588:	dc400115 	stw	r17,4(sp)
    758c:	dc000015 	stw	r16,0(sp)
    7590:	dfc00315 	stw	ra,12(sp)
    7594:	2023883a 	mov	r17,r4
    7598:	2821883a 	mov	r16,r5
    759c:	18000226 	beq	r3,zero,75a8 <putc+0x34>
    75a0:	18800e17 	ldw	r2,56(r3)
    75a4:	10001126 	beq	r2,zero,75ec <putc+0x78>
    75a8:	80800217 	ldw	r2,8(r16)
    75ac:	10ffffc4 	addi	r3,r2,-1
    75b0:	80c00215 	stw	r3,8(r16)
    75b4:	18001316 	blt	r3,zero,7604 <putc+0x90>
    75b8:	80800017 	ldw	r2,0(r16)
    75bc:	14400005 	stb	r17,0(r2)
    75c0:	80c00017 	ldw	r3,0(r16)
    75c4:	18800044 	addi	r2,r3,1
    75c8:	18c00003 	ldbu	r3,0(r3)
    75cc:	80800015 	stw	r2,0(r16)
    75d0:	1805883a 	mov	r2,r3
    75d4:	dfc00317 	ldw	ra,12(sp)
    75d8:	dc800217 	ldw	r18,8(sp)
    75dc:	dc400117 	ldw	r17,4(sp)
    75e0:	dc000017 	ldw	r16,0(sp)
    75e4:	dec00404 	addi	sp,sp,16
    75e8:	f800283a 	ret
    75ec:	1809883a 	mov	r4,r3
    75f0:	00052ac0 	call	52ac <__sinit>
    75f4:	80800217 	ldw	r2,8(r16)
    75f8:	10ffffc4 	addi	r3,r2,-1
    75fc:	80c00215 	stw	r3,8(r16)
    7600:	183fed0e 	bge	r3,zero,75b8 <putc+0x44>
    7604:	80800617 	ldw	r2,24(r16)
    7608:	18800f16 	blt	r3,r2,7648 <putc+0xd4>
    760c:	80800017 	ldw	r2,0(r16)
    7610:	14400005 	stb	r17,0(r2)
    7614:	81000017 	ldw	r4,0(r16)
    7618:	00800284 	movi	r2,10
    761c:	20c00003 	ldbu	r3,0(r4)
    7620:	18801226 	beq	r3,r2,766c <putc+0xf8>
    7624:	20800044 	addi	r2,r4,1
    7628:	80800015 	stw	r2,0(r16)
    762c:	1805883a 	mov	r2,r3
    7630:	dfc00317 	ldw	ra,12(sp)
    7634:	dc800217 	ldw	r18,8(sp)
    7638:	dc400117 	ldw	r17,4(sp)
    763c:	dc000017 	ldw	r16,0(sp)
    7640:	dec00404 	addi	sp,sp,16
    7644:	f800283a 	ret
    7648:	91000017 	ldw	r4,0(r18)
    764c:	880b883a 	mov	r5,r17
    7650:	800d883a 	mov	r6,r16
    7654:	dfc00317 	ldw	ra,12(sp)
    7658:	dc800217 	ldw	r18,8(sp)
    765c:	dc400117 	ldw	r17,4(sp)
    7660:	dc000017 	ldw	r16,0(sp)
    7664:	dec00404 	addi	sp,sp,16
    7668:	0007fcc1 	jmpi	7fcc <__swbuf_r>
    766c:	91000017 	ldw	r4,0(r18)
    7670:	180b883a 	mov	r5,r3
    7674:	003ff606 	br	7650 <putc+0xdc>

00007678 <_putc_r>:
    7678:	defffc04 	addi	sp,sp,-16
    767c:	dc400215 	stw	r17,8(sp)
    7680:	dc000115 	stw	r16,4(sp)
    7684:	dfc00315 	stw	ra,12(sp)
    7688:	2021883a 	mov	r16,r4
    768c:	2823883a 	mov	r17,r5
    7690:	20000226 	beq	r4,zero,769c <_putc_r+0x24>
    7694:	20800e17 	ldw	r2,56(r4)
    7698:	10001026 	beq	r2,zero,76dc <_putc_r+0x64>
    769c:	30800217 	ldw	r2,8(r6)
    76a0:	10ffffc4 	addi	r3,r2,-1
    76a4:	30c00215 	stw	r3,8(r6)
    76a8:	18001316 	blt	r3,zero,76f8 <_putc_r+0x80>
    76ac:	30800017 	ldw	r2,0(r6)
    76b0:	14400005 	stb	r17,0(r2)
    76b4:	30c00017 	ldw	r3,0(r6)
    76b8:	18800044 	addi	r2,r3,1
    76bc:	18c00003 	ldbu	r3,0(r3)
    76c0:	30800015 	stw	r2,0(r6)
    76c4:	1805883a 	mov	r2,r3
    76c8:	dfc00317 	ldw	ra,12(sp)
    76cc:	dc400217 	ldw	r17,8(sp)
    76d0:	dc000117 	ldw	r16,4(sp)
    76d4:	dec00404 	addi	sp,sp,16
    76d8:	f800283a 	ret
    76dc:	d9800015 	stw	r6,0(sp)
    76e0:	00052ac0 	call	52ac <__sinit>
    76e4:	d9800017 	ldw	r6,0(sp)
    76e8:	30800217 	ldw	r2,8(r6)
    76ec:	10ffffc4 	addi	r3,r2,-1
    76f0:	30c00215 	stw	r3,8(r6)
    76f4:	183fed0e 	bge	r3,zero,76ac <_putc_r+0x34>
    76f8:	30800617 	ldw	r2,24(r6)
    76fc:	18800e16 	blt	r3,r2,7738 <_putc_r+0xc0>
    7700:	30800017 	ldw	r2,0(r6)
    7704:	14400005 	stb	r17,0(r2)
    7708:	31000017 	ldw	r4,0(r6)
    770c:	00800284 	movi	r2,10
    7710:	20c00003 	ldbu	r3,0(r4)
    7714:	18800f26 	beq	r3,r2,7754 <_putc_r+0xdc>
    7718:	20800044 	addi	r2,r4,1
    771c:	30800015 	stw	r2,0(r6)
    7720:	1805883a 	mov	r2,r3
    7724:	dfc00317 	ldw	ra,12(sp)
    7728:	dc400217 	ldw	r17,8(sp)
    772c:	dc000117 	ldw	r16,4(sp)
    7730:	dec00404 	addi	sp,sp,16
    7734:	f800283a 	ret
    7738:	8009883a 	mov	r4,r16
    773c:	880b883a 	mov	r5,r17
    7740:	dfc00317 	ldw	ra,12(sp)
    7744:	dc400217 	ldw	r17,8(sp)
    7748:	dc000117 	ldw	r16,4(sp)
    774c:	dec00404 	addi	sp,sp,16
    7750:	0007fcc1 	jmpi	7fcc <__swbuf_r>
    7754:	8009883a 	mov	r4,r16
    7758:	180b883a 	mov	r5,r3
    775c:	003ff806 	br	7740 <_putc_r+0xc8>

00007760 <_realloc_r>:
    7760:	defff404 	addi	sp,sp,-48
    7764:	dd800815 	stw	r22,32(sp)
    7768:	dc800415 	stw	r18,16(sp)
    776c:	dc400315 	stw	r17,12(sp)
    7770:	dfc00b15 	stw	ra,44(sp)
    7774:	df000a15 	stw	fp,40(sp)
    7778:	ddc00915 	stw	r23,36(sp)
    777c:	dd400715 	stw	r21,28(sp)
    7780:	dd000615 	stw	r20,24(sp)
    7784:	dcc00515 	stw	r19,20(sp)
    7788:	dc000215 	stw	r16,8(sp)
    778c:	2825883a 	mov	r18,r5
    7790:	3023883a 	mov	r17,r6
    7794:	202d883a 	mov	r22,r4
    7798:	2800c926 	beq	r5,zero,7ac0 <_realloc_r+0x360>
    779c:	000b2b80 	call	b2b8 <__malloc_lock>
    77a0:	943ffe04 	addi	r16,r18,-8
    77a4:	88c002c4 	addi	r3,r17,11
    77a8:	00800584 	movi	r2,22
    77ac:	82000117 	ldw	r8,4(r16)
    77b0:	10c01b2e 	bgeu	r2,r3,7820 <_realloc_r+0xc0>
    77b4:	00bffe04 	movi	r2,-8
    77b8:	188e703a 	and	r7,r3,r2
    77bc:	3839883a 	mov	fp,r7
    77c0:	38001a16 	blt	r7,zero,782c <_realloc_r+0xcc>
    77c4:	e4401936 	bltu	fp,r17,782c <_realloc_r+0xcc>
    77c8:	013fff04 	movi	r4,-4
    77cc:	4126703a 	and	r19,r8,r4
    77d0:	99c02616 	blt	r19,r7,786c <_realloc_r+0x10c>
    77d4:	802b883a 	mov	r21,r16
    77d8:	9829883a 	mov	r20,r19
    77dc:	84000204 	addi	r16,r16,8
    77e0:	a80f883a 	mov	r7,r21
    77e4:	a70dc83a 	sub	r6,r20,fp
    77e8:	008003c4 	movi	r2,15
    77ec:	1180c136 	bltu	r2,r6,7af4 <_realloc_r+0x394>
    77f0:	38800117 	ldw	r2,4(r7)
    77f4:	a549883a 	add	r4,r20,r21
    77f8:	1080004c 	andi	r2,r2,1
    77fc:	a084b03a 	or	r2,r20,r2
    7800:	38800115 	stw	r2,4(r7)
    7804:	20c00117 	ldw	r3,4(r4)
    7808:	18c00054 	ori	r3,r3,1
    780c:	20c00115 	stw	r3,4(r4)
    7810:	b009883a 	mov	r4,r22
    7814:	000b2d80 	call	b2d8 <__malloc_unlock>
    7818:	8023883a 	mov	r17,r16
    781c:	00000606 	br	7838 <_realloc_r+0xd8>
    7820:	01c00404 	movi	r7,16
    7824:	3839883a 	mov	fp,r7
    7828:	e47fe72e 	bgeu	fp,r17,77c8 <_realloc_r+0x68>
    782c:	00800304 	movi	r2,12
    7830:	0023883a 	mov	r17,zero
    7834:	b0800015 	stw	r2,0(r22)
    7838:	8805883a 	mov	r2,r17
    783c:	dfc00b17 	ldw	ra,44(sp)
    7840:	df000a17 	ldw	fp,40(sp)
    7844:	ddc00917 	ldw	r23,36(sp)
    7848:	dd800817 	ldw	r22,32(sp)
    784c:	dd400717 	ldw	r21,28(sp)
    7850:	dd000617 	ldw	r20,24(sp)
    7854:	dcc00517 	ldw	r19,20(sp)
    7858:	dc800417 	ldw	r18,16(sp)
    785c:	dc400317 	ldw	r17,12(sp)
    7860:	dc000217 	ldw	r16,8(sp)
    7864:	dec00c04 	addi	sp,sp,48
    7868:	f800283a 	ret
    786c:	00800074 	movhi	r2,1
    7870:	10b77e04 	addi	r2,r2,-8712
    7874:	12400217 	ldw	r9,8(r2)
    7878:	84cd883a 	add	r6,r16,r19
    787c:	802b883a 	mov	r21,r16
    7880:	3240b926 	beq	r6,r9,7b68 <_realloc_r+0x408>
    7884:	31400117 	ldw	r5,4(r6)
    7888:	00bfff84 	movi	r2,-2
    788c:	2884703a 	and	r2,r5,r2
    7890:	1185883a 	add	r2,r2,r6
    7894:	10c00117 	ldw	r3,4(r2)
    7898:	18c0004c 	andi	r3,r3,1
    789c:	1807003a 	cmpeq	r3,r3,zero
    78a0:	1800a326 	beq	r3,zero,7b30 <_realloc_r+0x3d0>
    78a4:	2908703a 	and	r4,r5,r4
    78a8:	9929883a 	add	r20,r19,r4
    78ac:	a1c0a30e 	bge	r20,r7,7b3c <_realloc_r+0x3dc>
    78b0:	4080004c 	andi	r2,r8,1
    78b4:	1000551e 	bne	r2,zero,7a0c <_realloc_r+0x2ac>
    78b8:	80800017 	ldw	r2,0(r16)
    78bc:	80afc83a 	sub	r23,r16,r2
    78c0:	b8c00117 	ldw	r3,4(r23)
    78c4:	00bfff04 	movi	r2,-4
    78c8:	1884703a 	and	r2,r3,r2
    78cc:	30002e26 	beq	r6,zero,7988 <_realloc_r+0x228>
    78d0:	3240b926 	beq	r6,r9,7bb8 <_realloc_r+0x458>
    78d4:	98a9883a 	add	r20,r19,r2
    78d8:	2509883a 	add	r4,r4,r20
    78dc:	d9000015 	stw	r4,0(sp)
    78e0:	21c02a16 	blt	r4,r7,798c <_realloc_r+0x22c>
    78e4:	30800317 	ldw	r2,12(r6)
    78e8:	30c00217 	ldw	r3,8(r6)
    78ec:	01400904 	movi	r5,36
    78f0:	99bfff04 	addi	r6,r19,-4
    78f4:	18800315 	stw	r2,12(r3)
    78f8:	10c00215 	stw	r3,8(r2)
    78fc:	b9000317 	ldw	r4,12(r23)
    7900:	b8800217 	ldw	r2,8(r23)
    7904:	b82b883a 	mov	r21,r23
    7908:	bc000204 	addi	r16,r23,8
    790c:	20800215 	stw	r2,8(r4)
    7910:	11000315 	stw	r4,12(r2)
    7914:	2980e436 	bltu	r5,r6,7ca8 <_realloc_r+0x548>
    7918:	008004c4 	movi	r2,19
    791c:	9009883a 	mov	r4,r18
    7920:	8011883a 	mov	r8,r16
    7924:	11800f2e 	bgeu	r2,r6,7964 <_realloc_r+0x204>
    7928:	90800017 	ldw	r2,0(r18)
    792c:	ba000404 	addi	r8,r23,16
    7930:	91000204 	addi	r4,r18,8
    7934:	b8800215 	stw	r2,8(r23)
    7938:	90c00117 	ldw	r3,4(r18)
    793c:	008006c4 	movi	r2,27
    7940:	b8c00315 	stw	r3,12(r23)
    7944:	1180072e 	bgeu	r2,r6,7964 <_realloc_r+0x204>
    7948:	90c00217 	ldw	r3,8(r18)
    794c:	ba000604 	addi	r8,r23,24
    7950:	91000404 	addi	r4,r18,16
    7954:	b8c00415 	stw	r3,16(r23)
    7958:	90800317 	ldw	r2,12(r18)
    795c:	b8800515 	stw	r2,20(r23)
    7960:	3140e726 	beq	r6,r5,7d00 <_realloc_r+0x5a0>
    7964:	20800017 	ldw	r2,0(r4)
    7968:	dd000017 	ldw	r20,0(sp)
    796c:	b80f883a 	mov	r7,r23
    7970:	40800015 	stw	r2,0(r8)
    7974:	20c00117 	ldw	r3,4(r4)
    7978:	40c00115 	stw	r3,4(r8)
    797c:	20800217 	ldw	r2,8(r4)
    7980:	40800215 	stw	r2,8(r8)
    7984:	003f9706 	br	77e4 <_realloc_r+0x84>
    7988:	98a9883a 	add	r20,r19,r2
    798c:	a1c01f16 	blt	r20,r7,7a0c <_realloc_r+0x2ac>
    7990:	b8c00317 	ldw	r3,12(r23)
    7994:	b8800217 	ldw	r2,8(r23)
    7998:	99bfff04 	addi	r6,r19,-4
    799c:	01400904 	movi	r5,36
    79a0:	b82b883a 	mov	r21,r23
    79a4:	18800215 	stw	r2,8(r3)
    79a8:	10c00315 	stw	r3,12(r2)
    79ac:	bc000204 	addi	r16,r23,8
    79b0:	2980c336 	bltu	r5,r6,7cc0 <_realloc_r+0x560>
    79b4:	008004c4 	movi	r2,19
    79b8:	9009883a 	mov	r4,r18
    79bc:	8011883a 	mov	r8,r16
    79c0:	11800f2e 	bgeu	r2,r6,7a00 <_realloc_r+0x2a0>
    79c4:	90800017 	ldw	r2,0(r18)
    79c8:	ba000404 	addi	r8,r23,16
    79cc:	91000204 	addi	r4,r18,8
    79d0:	b8800215 	stw	r2,8(r23)
    79d4:	90c00117 	ldw	r3,4(r18)
    79d8:	008006c4 	movi	r2,27
    79dc:	b8c00315 	stw	r3,12(r23)
    79e0:	1180072e 	bgeu	r2,r6,7a00 <_realloc_r+0x2a0>
    79e4:	90c00217 	ldw	r3,8(r18)
    79e8:	ba000604 	addi	r8,r23,24
    79ec:	91000404 	addi	r4,r18,16
    79f0:	b8c00415 	stw	r3,16(r23)
    79f4:	90800317 	ldw	r2,12(r18)
    79f8:	b8800515 	stw	r2,20(r23)
    79fc:	3140c726 	beq	r6,r5,7d1c <_realloc_r+0x5bc>
    7a00:	20800017 	ldw	r2,0(r4)
    7a04:	b80f883a 	mov	r7,r23
    7a08:	003fd906 	br	7970 <_realloc_r+0x210>
    7a0c:	880b883a 	mov	r5,r17
    7a10:	b009883a 	mov	r4,r22
    7a14:	0000c780 	call	c78 <_malloc_r>
    7a18:	1023883a 	mov	r17,r2
    7a1c:	10002526 	beq	r2,zero,7ab4 <_realloc_r+0x354>
    7a20:	80800117 	ldw	r2,4(r16)
    7a24:	00ffff84 	movi	r3,-2
    7a28:	893ffe04 	addi	r4,r17,-8
    7a2c:	10c4703a 	and	r2,r2,r3
    7a30:	8085883a 	add	r2,r16,r2
    7a34:	20809526 	beq	r4,r2,7c8c <_realloc_r+0x52c>
    7a38:	99bfff04 	addi	r6,r19,-4
    7a3c:	01c00904 	movi	r7,36
    7a40:	39804536 	bltu	r7,r6,7b58 <_realloc_r+0x3f8>
    7a44:	008004c4 	movi	r2,19
    7a48:	9009883a 	mov	r4,r18
    7a4c:	880b883a 	mov	r5,r17
    7a50:	11800f2e 	bgeu	r2,r6,7a90 <_realloc_r+0x330>
    7a54:	90800017 	ldw	r2,0(r18)
    7a58:	89400204 	addi	r5,r17,8
    7a5c:	91000204 	addi	r4,r18,8
    7a60:	88800015 	stw	r2,0(r17)
    7a64:	90c00117 	ldw	r3,4(r18)
    7a68:	008006c4 	movi	r2,27
    7a6c:	88c00115 	stw	r3,4(r17)
    7a70:	1180072e 	bgeu	r2,r6,7a90 <_realloc_r+0x330>
    7a74:	90c00217 	ldw	r3,8(r18)
    7a78:	89400404 	addi	r5,r17,16
    7a7c:	91000404 	addi	r4,r18,16
    7a80:	88c00215 	stw	r3,8(r17)
    7a84:	90800317 	ldw	r2,12(r18)
    7a88:	88800315 	stw	r2,12(r17)
    7a8c:	31c09126 	beq	r6,r7,7cd4 <_realloc_r+0x574>
    7a90:	20800017 	ldw	r2,0(r4)
    7a94:	28800015 	stw	r2,0(r5)
    7a98:	20c00117 	ldw	r3,4(r4)
    7a9c:	28c00115 	stw	r3,4(r5)
    7aa0:	20800217 	ldw	r2,8(r4)
    7aa4:	28800215 	stw	r2,8(r5)
    7aa8:	900b883a 	mov	r5,r18
    7aac:	b009883a 	mov	r4,r22
    7ab0:	00056640 	call	5664 <_free_r>
    7ab4:	b009883a 	mov	r4,r22
    7ab8:	000b2d80 	call	b2d8 <__malloc_unlock>
    7abc:	003f5e06 	br	7838 <_realloc_r+0xd8>
    7ac0:	300b883a 	mov	r5,r6
    7ac4:	dfc00b17 	ldw	ra,44(sp)
    7ac8:	df000a17 	ldw	fp,40(sp)
    7acc:	ddc00917 	ldw	r23,36(sp)
    7ad0:	dd800817 	ldw	r22,32(sp)
    7ad4:	dd400717 	ldw	r21,28(sp)
    7ad8:	dd000617 	ldw	r20,24(sp)
    7adc:	dcc00517 	ldw	r19,20(sp)
    7ae0:	dc800417 	ldw	r18,16(sp)
    7ae4:	dc400317 	ldw	r17,12(sp)
    7ae8:	dc000217 	ldw	r16,8(sp)
    7aec:	dec00c04 	addi	sp,sp,48
    7af0:	0000c781 	jmpi	c78 <_malloc_r>
    7af4:	38800117 	ldw	r2,4(r7)
    7af8:	e54b883a 	add	r5,fp,r21
    7afc:	31000054 	ori	r4,r6,1
    7b00:	1080004c 	andi	r2,r2,1
    7b04:	1704b03a 	or	r2,r2,fp
    7b08:	38800115 	stw	r2,4(r7)
    7b0c:	29000115 	stw	r4,4(r5)
    7b10:	2987883a 	add	r3,r5,r6
    7b14:	18800117 	ldw	r2,4(r3)
    7b18:	29400204 	addi	r5,r5,8
    7b1c:	b009883a 	mov	r4,r22
    7b20:	10800054 	ori	r2,r2,1
    7b24:	18800115 	stw	r2,4(r3)
    7b28:	00056640 	call	5664 <_free_r>
    7b2c:	003f3806 	br	7810 <_realloc_r+0xb0>
    7b30:	000d883a 	mov	r6,zero
    7b34:	0009883a 	mov	r4,zero
    7b38:	003f5d06 	br	78b0 <_realloc_r+0x150>
    7b3c:	30c00217 	ldw	r3,8(r6)
    7b40:	30800317 	ldw	r2,12(r6)
    7b44:	800f883a 	mov	r7,r16
    7b48:	84000204 	addi	r16,r16,8
    7b4c:	10c00215 	stw	r3,8(r2)
    7b50:	18800315 	stw	r2,12(r3)
    7b54:	003f2306 	br	77e4 <_realloc_r+0x84>
    7b58:	8809883a 	mov	r4,r17
    7b5c:	900b883a 	mov	r5,r18
    7b60:	00063700 	call	6370 <memmove>
    7b64:	003fd006 	br	7aa8 <_realloc_r+0x348>
    7b68:	30800117 	ldw	r2,4(r6)
    7b6c:	e0c00404 	addi	r3,fp,16
    7b70:	1108703a 	and	r4,r2,r4
    7b74:	9905883a 	add	r2,r19,r4
    7b78:	10ff4d16 	blt	r2,r3,78b0 <_realloc_r+0x150>
    7b7c:	1705c83a 	sub	r2,r2,fp
    7b80:	870b883a 	add	r5,r16,fp
    7b84:	10800054 	ori	r2,r2,1
    7b88:	28800115 	stw	r2,4(r5)
    7b8c:	80c00117 	ldw	r3,4(r16)
    7b90:	00800074 	movhi	r2,1
    7b94:	10b77e04 	addi	r2,r2,-8712
    7b98:	b009883a 	mov	r4,r22
    7b9c:	18c0004c 	andi	r3,r3,1
    7ba0:	e0c6b03a 	or	r3,fp,r3
    7ba4:	11400215 	stw	r5,8(r2)
    7ba8:	80c00115 	stw	r3,4(r16)
    7bac:	000b2d80 	call	b2d8 <__malloc_unlock>
    7bb0:	84400204 	addi	r17,r16,8
    7bb4:	003f2006 	br	7838 <_realloc_r+0xd8>
    7bb8:	98a9883a 	add	r20,r19,r2
    7bbc:	2509883a 	add	r4,r4,r20
    7bc0:	e0800404 	addi	r2,fp,16
    7bc4:	d9000115 	stw	r4,4(sp)
    7bc8:	20bf7016 	blt	r4,r2,798c <_realloc_r+0x22c>
    7bcc:	b8c00317 	ldw	r3,12(r23)
    7bd0:	b8800217 	ldw	r2,8(r23)
    7bd4:	99bfff04 	addi	r6,r19,-4
    7bd8:	01400904 	movi	r5,36
    7bdc:	18800215 	stw	r2,8(r3)
    7be0:	10c00315 	stw	r3,12(r2)
    7be4:	bc400204 	addi	r17,r23,8
    7be8:	29804136 	bltu	r5,r6,7cf0 <_realloc_r+0x590>
    7bec:	008004c4 	movi	r2,19
    7bf0:	9009883a 	mov	r4,r18
    7bf4:	880f883a 	mov	r7,r17
    7bf8:	11800f2e 	bgeu	r2,r6,7c38 <_realloc_r+0x4d8>
    7bfc:	90800017 	ldw	r2,0(r18)
    7c00:	b9c00404 	addi	r7,r23,16
    7c04:	91000204 	addi	r4,r18,8
    7c08:	b8800215 	stw	r2,8(r23)
    7c0c:	90c00117 	ldw	r3,4(r18)
    7c10:	008006c4 	movi	r2,27
    7c14:	b8c00315 	stw	r3,12(r23)
    7c18:	1180072e 	bgeu	r2,r6,7c38 <_realloc_r+0x4d8>
    7c1c:	90c00217 	ldw	r3,8(r18)
    7c20:	b9c00604 	addi	r7,r23,24
    7c24:	91000404 	addi	r4,r18,16
    7c28:	b8c00415 	stw	r3,16(r23)
    7c2c:	90800317 	ldw	r2,12(r18)
    7c30:	b8800515 	stw	r2,20(r23)
    7c34:	31404026 	beq	r6,r5,7d38 <_realloc_r+0x5d8>
    7c38:	20800017 	ldw	r2,0(r4)
    7c3c:	38800015 	stw	r2,0(r7)
    7c40:	20c00117 	ldw	r3,4(r4)
    7c44:	38c00115 	stw	r3,4(r7)
    7c48:	20800217 	ldw	r2,8(r4)
    7c4c:	38800215 	stw	r2,8(r7)
    7c50:	d8c00117 	ldw	r3,4(sp)
    7c54:	bf0b883a 	add	r5,r23,fp
    7c58:	b009883a 	mov	r4,r22
    7c5c:	1f05c83a 	sub	r2,r3,fp
    7c60:	10800054 	ori	r2,r2,1
    7c64:	28800115 	stw	r2,4(r5)
    7c68:	b8c00117 	ldw	r3,4(r23)
    7c6c:	00800074 	movhi	r2,1
    7c70:	10b77e04 	addi	r2,r2,-8712
    7c74:	11400215 	stw	r5,8(r2)
    7c78:	18c0004c 	andi	r3,r3,1
    7c7c:	e0c6b03a 	or	r3,fp,r3
    7c80:	b8c00115 	stw	r3,4(r23)
    7c84:	000b2d80 	call	b2d8 <__malloc_unlock>
    7c88:	003eeb06 	br	7838 <_realloc_r+0xd8>
    7c8c:	20800117 	ldw	r2,4(r4)
    7c90:	00ffff04 	movi	r3,-4
    7c94:	800f883a 	mov	r7,r16
    7c98:	10c4703a 	and	r2,r2,r3
    7c9c:	98a9883a 	add	r20,r19,r2
    7ca0:	84000204 	addi	r16,r16,8
    7ca4:	003ecf06 	br	77e4 <_realloc_r+0x84>
    7ca8:	900b883a 	mov	r5,r18
    7cac:	8009883a 	mov	r4,r16
    7cb0:	00063700 	call	6370 <memmove>
    7cb4:	dd000017 	ldw	r20,0(sp)
    7cb8:	b80f883a 	mov	r7,r23
    7cbc:	003ec906 	br	77e4 <_realloc_r+0x84>
    7cc0:	900b883a 	mov	r5,r18
    7cc4:	8009883a 	mov	r4,r16
    7cc8:	00063700 	call	6370 <memmove>
    7ccc:	b80f883a 	mov	r7,r23
    7cd0:	003ec406 	br	77e4 <_realloc_r+0x84>
    7cd4:	90c00417 	ldw	r3,16(r18)
    7cd8:	89400604 	addi	r5,r17,24
    7cdc:	91000604 	addi	r4,r18,24
    7ce0:	88c00415 	stw	r3,16(r17)
    7ce4:	90800517 	ldw	r2,20(r18)
    7ce8:	88800515 	stw	r2,20(r17)
    7cec:	003f6806 	br	7a90 <_realloc_r+0x330>
    7cf0:	900b883a 	mov	r5,r18
    7cf4:	8809883a 	mov	r4,r17
    7cf8:	00063700 	call	6370 <memmove>
    7cfc:	003fd406 	br	7c50 <_realloc_r+0x4f0>
    7d00:	90c00417 	ldw	r3,16(r18)
    7d04:	91000604 	addi	r4,r18,24
    7d08:	ba000804 	addi	r8,r23,32
    7d0c:	b8c00615 	stw	r3,24(r23)
    7d10:	90800517 	ldw	r2,20(r18)
    7d14:	b8800715 	stw	r2,28(r23)
    7d18:	003f1206 	br	7964 <_realloc_r+0x204>
    7d1c:	90c00417 	ldw	r3,16(r18)
    7d20:	91000604 	addi	r4,r18,24
    7d24:	ba000804 	addi	r8,r23,32
    7d28:	b8c00615 	stw	r3,24(r23)
    7d2c:	90800517 	ldw	r2,20(r18)
    7d30:	b8800715 	stw	r2,28(r23)
    7d34:	003f3206 	br	7a00 <_realloc_r+0x2a0>
    7d38:	90c00417 	ldw	r3,16(r18)
    7d3c:	91000604 	addi	r4,r18,24
    7d40:	b9c00804 	addi	r7,r23,32
    7d44:	b8c00615 	stw	r3,24(r23)
    7d48:	90800517 	ldw	r2,20(r18)
    7d4c:	b8800715 	stw	r2,28(r23)
    7d50:	003fb906 	br	7c38 <_realloc_r+0x4d8>

00007d54 <__isinfd>:
    7d54:	200d883a 	mov	r6,r4
    7d58:	0109c83a 	sub	r4,zero,r4
    7d5c:	2188b03a 	or	r4,r4,r6
    7d60:	2008d7fa 	srli	r4,r4,31
    7d64:	00a00034 	movhi	r2,32768
    7d68:	10bfffc4 	addi	r2,r2,-1
    7d6c:	1144703a 	and	r2,r2,r5
    7d70:	2088b03a 	or	r4,r4,r2
    7d74:	009ffc34 	movhi	r2,32752
    7d78:	1105c83a 	sub	r2,r2,r4
    7d7c:	0087c83a 	sub	r3,zero,r2
    7d80:	10c4b03a 	or	r2,r2,r3
    7d84:	1004d7fa 	srli	r2,r2,31
    7d88:	00c00044 	movi	r3,1
    7d8c:	1885c83a 	sub	r2,r3,r2
    7d90:	f800283a 	ret

00007d94 <__isnand>:
    7d94:	200d883a 	mov	r6,r4
    7d98:	0109c83a 	sub	r4,zero,r4
    7d9c:	2188b03a 	or	r4,r4,r6
    7da0:	2008d7fa 	srli	r4,r4,31
    7da4:	00a00034 	movhi	r2,32768
    7da8:	10bfffc4 	addi	r2,r2,-1
    7dac:	1144703a 	and	r2,r2,r5
    7db0:	2088b03a 	or	r4,r4,r2
    7db4:	009ffc34 	movhi	r2,32752
    7db8:	1105c83a 	sub	r2,r2,r4
    7dbc:	1004d7fa 	srli	r2,r2,31
    7dc0:	f800283a 	ret

00007dc4 <__sclose>:
    7dc4:	2940038f 	ldh	r5,14(r5)
    7dc8:	00082581 	jmpi	8258 <_close_r>

00007dcc <__sseek>:
    7dcc:	defffe04 	addi	sp,sp,-8
    7dd0:	dc000015 	stw	r16,0(sp)
    7dd4:	2821883a 	mov	r16,r5
    7dd8:	2940038f 	ldh	r5,14(r5)
    7ddc:	dfc00115 	stw	ra,4(sp)
    7de0:	00084d00 	call	84d0 <_lseek_r>
    7de4:	1007883a 	mov	r3,r2
    7de8:	00bfffc4 	movi	r2,-1
    7dec:	18800926 	beq	r3,r2,7e14 <__sseek+0x48>
    7df0:	8080030b 	ldhu	r2,12(r16)
    7df4:	80c01415 	stw	r3,80(r16)
    7df8:	10840014 	ori	r2,r2,4096
    7dfc:	8080030d 	sth	r2,12(r16)
    7e00:	1805883a 	mov	r2,r3
    7e04:	dfc00117 	ldw	ra,4(sp)
    7e08:	dc000017 	ldw	r16,0(sp)
    7e0c:	dec00204 	addi	sp,sp,8
    7e10:	f800283a 	ret
    7e14:	8080030b 	ldhu	r2,12(r16)
    7e18:	10bbffcc 	andi	r2,r2,61439
    7e1c:	8080030d 	sth	r2,12(r16)
    7e20:	1805883a 	mov	r2,r3
    7e24:	dfc00117 	ldw	ra,4(sp)
    7e28:	dc000017 	ldw	r16,0(sp)
    7e2c:	dec00204 	addi	sp,sp,8
    7e30:	f800283a 	ret

00007e34 <__swrite>:
    7e34:	2880030b 	ldhu	r2,12(r5)
    7e38:	defffb04 	addi	sp,sp,-20
    7e3c:	dcc00315 	stw	r19,12(sp)
    7e40:	1080400c 	andi	r2,r2,256
    7e44:	dc800215 	stw	r18,8(sp)
    7e48:	dc400115 	stw	r17,4(sp)
    7e4c:	dc000015 	stw	r16,0(sp)
    7e50:	3027883a 	mov	r19,r6
    7e54:	3825883a 	mov	r18,r7
    7e58:	dfc00415 	stw	ra,16(sp)
    7e5c:	2821883a 	mov	r16,r5
    7e60:	000d883a 	mov	r6,zero
    7e64:	01c00084 	movi	r7,2
    7e68:	2023883a 	mov	r17,r4
    7e6c:	10000226 	beq	r2,zero,7e78 <__swrite+0x44>
    7e70:	2940038f 	ldh	r5,14(r5)
    7e74:	00084d00 	call	84d0 <_lseek_r>
    7e78:	8080030b 	ldhu	r2,12(r16)
    7e7c:	8140038f 	ldh	r5,14(r16)
    7e80:	8809883a 	mov	r4,r17
    7e84:	10bbffcc 	andi	r2,r2,61439
    7e88:	980d883a 	mov	r6,r19
    7e8c:	900f883a 	mov	r7,r18
    7e90:	8080030d 	sth	r2,12(r16)
    7e94:	dfc00417 	ldw	ra,16(sp)
    7e98:	dcc00317 	ldw	r19,12(sp)
    7e9c:	dc800217 	ldw	r18,8(sp)
    7ea0:	dc400117 	ldw	r17,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00504 	addi	sp,sp,20
    7eac:	00081181 	jmpi	8118 <_write_r>

00007eb0 <__sread>:
    7eb0:	defffe04 	addi	sp,sp,-8
    7eb4:	dc000015 	stw	r16,0(sp)
    7eb8:	2821883a 	mov	r16,r5
    7ebc:	2940038f 	ldh	r5,14(r5)
    7ec0:	dfc00115 	stw	ra,4(sp)
    7ec4:	00085480 	call	8548 <_read_r>
    7ec8:	1007883a 	mov	r3,r2
    7ecc:	10000816 	blt	r2,zero,7ef0 <__sread+0x40>
    7ed0:	80801417 	ldw	r2,80(r16)
    7ed4:	10c5883a 	add	r2,r2,r3
    7ed8:	80801415 	stw	r2,80(r16)
    7edc:	1805883a 	mov	r2,r3
    7ee0:	dfc00117 	ldw	ra,4(sp)
    7ee4:	dc000017 	ldw	r16,0(sp)
    7ee8:	dec00204 	addi	sp,sp,8
    7eec:	f800283a 	ret
    7ef0:	8080030b 	ldhu	r2,12(r16)
    7ef4:	10bbffcc 	andi	r2,r2,61439
    7ef8:	8080030d 	sth	r2,12(r16)
    7efc:	1805883a 	mov	r2,r3
    7f00:	dfc00117 	ldw	ra,4(sp)
    7f04:	dc000017 	ldw	r16,0(sp)
    7f08:	dec00204 	addi	sp,sp,8
    7f0c:	f800283a 	ret

00007f10 <strcmp>:
    7f10:	2144b03a 	or	r2,r4,r5
    7f14:	108000cc 	andi	r2,r2,3
    7f18:	10001d1e 	bne	r2,zero,7f90 <strcmp+0x80>
    7f1c:	200f883a 	mov	r7,r4
    7f20:	28800017 	ldw	r2,0(r5)
    7f24:	21000017 	ldw	r4,0(r4)
    7f28:	280d883a 	mov	r6,r5
    7f2c:	2080161e 	bne	r4,r2,7f88 <strcmp+0x78>
    7f30:	023fbff4 	movhi	r8,65279
    7f34:	423fbfc4 	addi	r8,r8,-257
    7f38:	2207883a 	add	r3,r4,r8
    7f3c:	01602074 	movhi	r5,32897
    7f40:	29602004 	addi	r5,r5,-32640
    7f44:	1946703a 	and	r3,r3,r5
    7f48:	0104303a 	nor	r2,zero,r4
    7f4c:	10c4703a 	and	r2,r2,r3
    7f50:	10001c1e 	bne	r2,zero,7fc4 <strcmp+0xb4>
    7f54:	4013883a 	mov	r9,r8
    7f58:	2811883a 	mov	r8,r5
    7f5c:	00000106 	br	7f64 <strcmp+0x54>
    7f60:	1800181e 	bne	r3,zero,7fc4 <strcmp+0xb4>
    7f64:	39c00104 	addi	r7,r7,4
    7f68:	39000017 	ldw	r4,0(r7)
    7f6c:	31800104 	addi	r6,r6,4
    7f70:	31400017 	ldw	r5,0(r6)
    7f74:	2245883a 	add	r2,r4,r9
    7f78:	1204703a 	and	r2,r2,r8
    7f7c:	0106303a 	nor	r3,zero,r4
    7f80:	1886703a 	and	r3,r3,r2
    7f84:	217ff626 	beq	r4,r5,7f60 <strcmp+0x50>
    7f88:	3809883a 	mov	r4,r7
    7f8c:	300b883a 	mov	r5,r6
    7f90:	20c00007 	ldb	r3,0(r4)
    7f94:	1800051e 	bne	r3,zero,7fac <strcmp+0x9c>
    7f98:	00000606 	br	7fb4 <strcmp+0xa4>
    7f9c:	21000044 	addi	r4,r4,1
    7fa0:	20c00007 	ldb	r3,0(r4)
    7fa4:	29400044 	addi	r5,r5,1
    7fa8:	18000226 	beq	r3,zero,7fb4 <strcmp+0xa4>
    7fac:	28800007 	ldb	r2,0(r5)
    7fb0:	18bffa26 	beq	r3,r2,7f9c <strcmp+0x8c>
    7fb4:	20c00003 	ldbu	r3,0(r4)
    7fb8:	28800003 	ldbu	r2,0(r5)
    7fbc:	1885c83a 	sub	r2,r3,r2
    7fc0:	f800283a 	ret
    7fc4:	0005883a 	mov	r2,zero
    7fc8:	f800283a 	ret

00007fcc <__swbuf_r>:
    7fcc:	defffc04 	addi	sp,sp,-16
    7fd0:	dc400215 	stw	r17,8(sp)
    7fd4:	dc000115 	stw	r16,4(sp)
    7fd8:	dfc00315 	stw	ra,12(sp)
    7fdc:	2023883a 	mov	r17,r4
    7fe0:	2821883a 	mov	r16,r5
    7fe4:	20000226 	beq	r4,zero,7ff0 <__swbuf_r+0x24>
    7fe8:	20800e17 	ldw	r2,56(r4)
    7fec:	10002f26 	beq	r2,zero,80ac <__swbuf_r+0xe0>
    7ff0:	3080030b 	ldhu	r2,12(r6)
    7ff4:	30c00617 	ldw	r3,24(r6)
    7ff8:	1080020c 	andi	r2,r2,8
    7ffc:	30c00215 	stw	r3,8(r6)
    8000:	10002226 	beq	r2,zero,808c <__swbuf_r+0xc0>
    8004:	30c00417 	ldw	r3,16(r6)
    8008:	18002026 	beq	r3,zero,808c <__swbuf_r+0xc0>
    800c:	31000017 	ldw	r4,0(r6)
    8010:	30800517 	ldw	r2,20(r6)
    8014:	20c7c83a 	sub	r3,r4,r3
    8018:	18802f0e 	bge	r3,r2,80d8 <__swbuf_r+0x10c>
    801c:	19400044 	addi	r5,r3,1
    8020:	30800217 	ldw	r2,8(r6)
    8024:	84003fcc 	andi	r16,r16,255
    8028:	20c00044 	addi	r3,r4,1
    802c:	10bfffc4 	addi	r2,r2,-1
    8030:	30800215 	stw	r2,8(r6)
    8034:	24000005 	stb	r16,0(r4)
    8038:	30800517 	ldw	r2,20(r6)
    803c:	30c00015 	stw	r3,0(r6)
    8040:	11400c26 	beq	r2,r5,8074 <__swbuf_r+0xa8>
    8044:	3080030b 	ldhu	r2,12(r6)
    8048:	1080004c 	andi	r2,r2,1
    804c:	1005003a 	cmpeq	r2,r2,zero
    8050:	10000626 	beq	r2,zero,806c <__swbuf_r+0xa0>
    8054:	8005883a 	mov	r2,r16
    8058:	dfc00317 	ldw	ra,12(sp)
    805c:	dc400217 	ldw	r17,8(sp)
    8060:	dc000117 	ldw	r16,4(sp)
    8064:	dec00404 	addi	sp,sp,16
    8068:	f800283a 	ret
    806c:	00800284 	movi	r2,10
    8070:	80bff81e 	bne	r16,r2,8054 <__swbuf_r+0x88>
    8074:	8809883a 	mov	r4,r17
    8078:	300b883a 	mov	r5,r6
    807c:	00050140 	call	5014 <_fflush_r>
    8080:	103ff426 	beq	r2,zero,8054 <__swbuf_r+0x88>
    8084:	043fffc4 	movi	r16,-1
    8088:	003ff206 	br	8054 <__swbuf_r+0x88>
    808c:	300b883a 	mov	r5,r6
    8090:	8809883a 	mov	r4,r17
    8094:	d9800015 	stw	r6,0(sp)
    8098:	000352c0 	call	352c <__swsetup_r>
    809c:	d9800017 	ldw	r6,0(sp)
    80a0:	1000061e 	bne	r2,zero,80bc <__swbuf_r+0xf0>
    80a4:	30c00417 	ldw	r3,16(r6)
    80a8:	003fd806 	br	800c <__swbuf_r+0x40>
    80ac:	d9800015 	stw	r6,0(sp)
    80b0:	00052ac0 	call	52ac <__sinit>
    80b4:	d9800017 	ldw	r6,0(sp)
    80b8:	003fcd06 	br	7ff0 <__swbuf_r+0x24>
    80bc:	3080030b 	ldhu	r2,12(r6)
    80c0:	00c00244 	movi	r3,9
    80c4:	043fffc4 	movi	r16,-1
    80c8:	10801014 	ori	r2,r2,64
    80cc:	3080030d 	sth	r2,12(r6)
    80d0:	88c00015 	stw	r3,0(r17)
    80d4:	003fdf06 	br	8054 <__swbuf_r+0x88>
    80d8:	300b883a 	mov	r5,r6
    80dc:	8809883a 	mov	r4,r17
    80e0:	d9800015 	stw	r6,0(sp)
    80e4:	00050140 	call	5014 <_fflush_r>
    80e8:	d9800017 	ldw	r6,0(sp)
    80ec:	103fe51e 	bne	r2,zero,8084 <__swbuf_r+0xb8>
    80f0:	31000017 	ldw	r4,0(r6)
    80f4:	01400044 	movi	r5,1
    80f8:	003fc906 	br	8020 <__swbuf_r+0x54>

000080fc <__swbuf>:
    80fc:	01800074 	movhi	r6,1
    8100:	31bd0504 	addi	r6,r6,-3052
    8104:	2007883a 	mov	r3,r4
    8108:	31000017 	ldw	r4,0(r6)
    810c:	280d883a 	mov	r6,r5
    8110:	180b883a 	mov	r5,r3
    8114:	0007fcc1 	jmpi	7fcc <__swbuf_r>

00008118 <_write_r>:
    8118:	defffd04 	addi	sp,sp,-12
    811c:	dc000015 	stw	r16,0(sp)
    8120:	04000074 	movhi	r16,1
    8124:	8403b204 	addi	r16,r16,3784
    8128:	dc400115 	stw	r17,4(sp)
    812c:	80000015 	stw	zero,0(r16)
    8130:	2023883a 	mov	r17,r4
    8134:	2809883a 	mov	r4,r5
    8138:	300b883a 	mov	r5,r6
    813c:	380d883a 	mov	r6,r7
    8140:	dfc00215 	stw	ra,8(sp)
    8144:	000b9ec0 	call	b9ec <write>
    8148:	1007883a 	mov	r3,r2
    814c:	00bfffc4 	movi	r2,-1
    8150:	18800626 	beq	r3,r2,816c <_write_r+0x54>
    8154:	1805883a 	mov	r2,r3
    8158:	dfc00217 	ldw	ra,8(sp)
    815c:	dc400117 	ldw	r17,4(sp)
    8160:	dc000017 	ldw	r16,0(sp)
    8164:	dec00304 	addi	sp,sp,12
    8168:	f800283a 	ret
    816c:	80800017 	ldw	r2,0(r16)
    8170:	103ff826 	beq	r2,zero,8154 <_write_r+0x3c>
    8174:	88800015 	stw	r2,0(r17)
    8178:	1805883a 	mov	r2,r3
    817c:	dfc00217 	ldw	ra,8(sp)
    8180:	dc400117 	ldw	r17,4(sp)
    8184:	dc000017 	ldw	r16,0(sp)
    8188:	dec00304 	addi	sp,sp,12
    818c:	f800283a 	ret

00008190 <_calloc_r>:
    8190:	defffe04 	addi	sp,sp,-8
    8194:	dc400015 	stw	r17,0(sp)
    8198:	2023883a 	mov	r17,r4
    819c:	2809883a 	mov	r4,r5
    81a0:	300b883a 	mov	r5,r6
    81a4:	dfc00115 	stw	ra,4(sp)
    81a8:	0000af40 	call	af4 <__mulsi3>
    81ac:	100b883a 	mov	r5,r2
    81b0:	8809883a 	mov	r4,r17
    81b4:	0000c780 	call	c78 <_malloc_r>
    81b8:	1023883a 	mov	r17,r2
    81bc:	01c00904 	movi	r7,36
    81c0:	10000d26 	beq	r2,zero,81f8 <_calloc_r+0x68>
    81c4:	10ffff17 	ldw	r3,-4(r2)
    81c8:	1009883a 	mov	r4,r2
    81cc:	00bfff04 	movi	r2,-4
    81d0:	1886703a 	and	r3,r3,r2
    81d4:	1887883a 	add	r3,r3,r2
    81d8:	180d883a 	mov	r6,r3
    81dc:	000b883a 	mov	r5,zero
    81e0:	38c01736 	bltu	r7,r3,8240 <_calloc_r+0xb0>
    81e4:	008004c4 	movi	r2,19
    81e8:	10c00836 	bltu	r2,r3,820c <_calloc_r+0x7c>
    81ec:	20000215 	stw	zero,8(r4)
    81f0:	20000015 	stw	zero,0(r4)
    81f4:	20000115 	stw	zero,4(r4)
    81f8:	8805883a 	mov	r2,r17
    81fc:	dfc00117 	ldw	ra,4(sp)
    8200:	dc400017 	ldw	r17,0(sp)
    8204:	dec00204 	addi	sp,sp,8
    8208:	f800283a 	ret
    820c:	008006c4 	movi	r2,27
    8210:	88000015 	stw	zero,0(r17)
    8214:	88000115 	stw	zero,4(r17)
    8218:	89000204 	addi	r4,r17,8
    821c:	10fff32e 	bgeu	r2,r3,81ec <_calloc_r+0x5c>
    8220:	88000215 	stw	zero,8(r17)
    8224:	88000315 	stw	zero,12(r17)
    8228:	89000404 	addi	r4,r17,16
    822c:	19ffef1e 	bne	r3,r7,81ec <_calloc_r+0x5c>
    8230:	89000604 	addi	r4,r17,24
    8234:	88000415 	stw	zero,16(r17)
    8238:	88000515 	stw	zero,20(r17)
    823c:	003feb06 	br	81ec <_calloc_r+0x5c>
    8240:	00064500 	call	6450 <memset>
    8244:	8805883a 	mov	r2,r17
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	dc400017 	ldw	r17,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <_close_r>:
    8258:	defffd04 	addi	sp,sp,-12
    825c:	dc000015 	stw	r16,0(sp)
    8260:	04000074 	movhi	r16,1
    8264:	8403b204 	addi	r16,r16,3784
    8268:	dc400115 	stw	r17,4(sp)
    826c:	80000015 	stw	zero,0(r16)
    8270:	2023883a 	mov	r17,r4
    8274:	2809883a 	mov	r4,r5
    8278:	dfc00215 	stw	ra,8(sp)
    827c:	000abc40 	call	abc4 <close>
    8280:	1007883a 	mov	r3,r2
    8284:	00bfffc4 	movi	r2,-1
    8288:	18800626 	beq	r3,r2,82a4 <_close_r+0x4c>
    828c:	1805883a 	mov	r2,r3
    8290:	dfc00217 	ldw	ra,8(sp)
    8294:	dc400117 	ldw	r17,4(sp)
    8298:	dc000017 	ldw	r16,0(sp)
    829c:	dec00304 	addi	sp,sp,12
    82a0:	f800283a 	ret
    82a4:	80800017 	ldw	r2,0(r16)
    82a8:	103ff826 	beq	r2,zero,828c <_close_r+0x34>
    82ac:	88800015 	stw	r2,0(r17)
    82b0:	1805883a 	mov	r2,r3
    82b4:	dfc00217 	ldw	ra,8(sp)
    82b8:	dc400117 	ldw	r17,4(sp)
    82bc:	dc000017 	ldw	r16,0(sp)
    82c0:	dec00304 	addi	sp,sp,12
    82c4:	f800283a 	ret

000082c8 <_fclose_r>:
    82c8:	defffc04 	addi	sp,sp,-16
    82cc:	dc400115 	stw	r17,4(sp)
    82d0:	dc000015 	stw	r16,0(sp)
    82d4:	dfc00315 	stw	ra,12(sp)
    82d8:	dc800215 	stw	r18,8(sp)
    82dc:	2821883a 	mov	r16,r5
    82e0:	2023883a 	mov	r17,r4
    82e4:	28002926 	beq	r5,zero,838c <_fclose_r+0xc4>
    82e8:	000529c0 	call	529c <__sfp_lock_acquire>
    82ec:	88000226 	beq	r17,zero,82f8 <_fclose_r+0x30>
    82f0:	88800e17 	ldw	r2,56(r17)
    82f4:	10002d26 	beq	r2,zero,83ac <_fclose_r+0xe4>
    82f8:	8080030f 	ldh	r2,12(r16)
    82fc:	10002226 	beq	r2,zero,8388 <_fclose_r+0xc0>
    8300:	8809883a 	mov	r4,r17
    8304:	800b883a 	mov	r5,r16
    8308:	00050140 	call	5014 <_fflush_r>
    830c:	1025883a 	mov	r18,r2
    8310:	80800b17 	ldw	r2,44(r16)
    8314:	10000426 	beq	r2,zero,8328 <_fclose_r+0x60>
    8318:	81400717 	ldw	r5,28(r16)
    831c:	8809883a 	mov	r4,r17
    8320:	103ee83a 	callr	r2
    8324:	10002a16 	blt	r2,zero,83d0 <_fclose_r+0x108>
    8328:	8080030b 	ldhu	r2,12(r16)
    832c:	1080200c 	andi	r2,r2,128
    8330:	1000231e 	bne	r2,zero,83c0 <_fclose_r+0xf8>
    8334:	81400c17 	ldw	r5,48(r16)
    8338:	28000526 	beq	r5,zero,8350 <_fclose_r+0x88>
    833c:	80801004 	addi	r2,r16,64
    8340:	28800226 	beq	r5,r2,834c <_fclose_r+0x84>
    8344:	8809883a 	mov	r4,r17
    8348:	00056640 	call	5664 <_free_r>
    834c:	80000c15 	stw	zero,48(r16)
    8350:	81401117 	ldw	r5,68(r16)
    8354:	28000326 	beq	r5,zero,8364 <_fclose_r+0x9c>
    8358:	8809883a 	mov	r4,r17
    835c:	00056640 	call	5664 <_free_r>
    8360:	80001115 	stw	zero,68(r16)
    8364:	8000030d 	sth	zero,12(r16)
    8368:	00052a00 	call	52a0 <__sfp_lock_release>
    836c:	9005883a 	mov	r2,r18
    8370:	dfc00317 	ldw	ra,12(sp)
    8374:	dc800217 	ldw	r18,8(sp)
    8378:	dc400117 	ldw	r17,4(sp)
    837c:	dc000017 	ldw	r16,0(sp)
    8380:	dec00404 	addi	sp,sp,16
    8384:	f800283a 	ret
    8388:	00052a00 	call	52a0 <__sfp_lock_release>
    838c:	0025883a 	mov	r18,zero
    8390:	9005883a 	mov	r2,r18
    8394:	dfc00317 	ldw	ra,12(sp)
    8398:	dc800217 	ldw	r18,8(sp)
    839c:	dc400117 	ldw	r17,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00404 	addi	sp,sp,16
    83a8:	f800283a 	ret
    83ac:	8809883a 	mov	r4,r17
    83b0:	00052ac0 	call	52ac <__sinit>
    83b4:	8080030f 	ldh	r2,12(r16)
    83b8:	103fd11e 	bne	r2,zero,8300 <_fclose_r+0x38>
    83bc:	003ff206 	br	8388 <_fclose_r+0xc0>
    83c0:	81400417 	ldw	r5,16(r16)
    83c4:	8809883a 	mov	r4,r17
    83c8:	00056640 	call	5664 <_free_r>
    83cc:	003fd906 	br	8334 <_fclose_r+0x6c>
    83d0:	04bfffc4 	movi	r18,-1
    83d4:	003fd406 	br	8328 <_fclose_r+0x60>

000083d8 <fclose>:
    83d8:	00800074 	movhi	r2,1
    83dc:	10bd0504 	addi	r2,r2,-3052
    83e0:	200b883a 	mov	r5,r4
    83e4:	11000017 	ldw	r4,0(r2)
    83e8:	00082c81 	jmpi	82c8 <_fclose_r>

000083ec <_fstat_r>:
    83ec:	defffd04 	addi	sp,sp,-12
    83f0:	dc000015 	stw	r16,0(sp)
    83f4:	04000074 	movhi	r16,1
    83f8:	8403b204 	addi	r16,r16,3784
    83fc:	dc400115 	stw	r17,4(sp)
    8400:	80000015 	stw	zero,0(r16)
    8404:	2023883a 	mov	r17,r4
    8408:	2809883a 	mov	r4,r5
    840c:	300b883a 	mov	r5,r6
    8410:	dfc00215 	stw	ra,8(sp)
    8414:	000adb00 	call	adb0 <fstat>
    8418:	1007883a 	mov	r3,r2
    841c:	00bfffc4 	movi	r2,-1
    8420:	18800626 	beq	r3,r2,843c <_fstat_r+0x50>
    8424:	1805883a 	mov	r2,r3
    8428:	dfc00217 	ldw	ra,8(sp)
    842c:	dc400117 	ldw	r17,4(sp)
    8430:	dc000017 	ldw	r16,0(sp)
    8434:	dec00304 	addi	sp,sp,12
    8438:	f800283a 	ret
    843c:	80800017 	ldw	r2,0(r16)
    8440:	103ff826 	beq	r2,zero,8424 <_fstat_r+0x38>
    8444:	88800015 	stw	r2,0(r17)
    8448:	1805883a 	mov	r2,r3
    844c:	dfc00217 	ldw	ra,8(sp)
    8450:	dc400117 	ldw	r17,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00304 	addi	sp,sp,12
    845c:	f800283a 	ret

00008460 <_isatty_r>:
    8460:	defffd04 	addi	sp,sp,-12
    8464:	dc000015 	stw	r16,0(sp)
    8468:	04000074 	movhi	r16,1
    846c:	8403b204 	addi	r16,r16,3784
    8470:	dc400115 	stw	r17,4(sp)
    8474:	80000015 	stw	zero,0(r16)
    8478:	2023883a 	mov	r17,r4
    847c:	2809883a 	mov	r4,r5
    8480:	dfc00215 	stw	ra,8(sp)
    8484:	000aee80 	call	aee8 <isatty>
    8488:	1007883a 	mov	r3,r2
    848c:	00bfffc4 	movi	r2,-1
    8490:	18800626 	beq	r3,r2,84ac <_isatty_r+0x4c>
    8494:	1805883a 	mov	r2,r3
    8498:	dfc00217 	ldw	ra,8(sp)
    849c:	dc400117 	ldw	r17,4(sp)
    84a0:	dc000017 	ldw	r16,0(sp)
    84a4:	dec00304 	addi	sp,sp,12
    84a8:	f800283a 	ret
    84ac:	80800017 	ldw	r2,0(r16)
    84b0:	103ff826 	beq	r2,zero,8494 <_isatty_r+0x34>
    84b4:	88800015 	stw	r2,0(r17)
    84b8:	1805883a 	mov	r2,r3
    84bc:	dfc00217 	ldw	ra,8(sp)
    84c0:	dc400117 	ldw	r17,4(sp)
    84c4:	dc000017 	ldw	r16,0(sp)
    84c8:	dec00304 	addi	sp,sp,12
    84cc:	f800283a 	ret

000084d0 <_lseek_r>:
    84d0:	defffd04 	addi	sp,sp,-12
    84d4:	dc000015 	stw	r16,0(sp)
    84d8:	04000074 	movhi	r16,1
    84dc:	8403b204 	addi	r16,r16,3784
    84e0:	dc400115 	stw	r17,4(sp)
    84e4:	80000015 	stw	zero,0(r16)
    84e8:	2023883a 	mov	r17,r4
    84ec:	2809883a 	mov	r4,r5
    84f0:	300b883a 	mov	r5,r6
    84f4:	380d883a 	mov	r6,r7
    84f8:	dfc00215 	stw	ra,8(sp)
    84fc:	000b0f80 	call	b0f8 <lseek>
    8500:	1007883a 	mov	r3,r2
    8504:	00bfffc4 	movi	r2,-1
    8508:	18800626 	beq	r3,r2,8524 <_lseek_r+0x54>
    850c:	1805883a 	mov	r2,r3
    8510:	dfc00217 	ldw	ra,8(sp)
    8514:	dc400117 	ldw	r17,4(sp)
    8518:	dc000017 	ldw	r16,0(sp)
    851c:	dec00304 	addi	sp,sp,12
    8520:	f800283a 	ret
    8524:	80800017 	ldw	r2,0(r16)
    8528:	103ff826 	beq	r2,zero,850c <_lseek_r+0x3c>
    852c:	88800015 	stw	r2,0(r17)
    8530:	1805883a 	mov	r2,r3
    8534:	dfc00217 	ldw	ra,8(sp)
    8538:	dc400117 	ldw	r17,4(sp)
    853c:	dc000017 	ldw	r16,0(sp)
    8540:	dec00304 	addi	sp,sp,12
    8544:	f800283a 	ret

00008548 <_read_r>:
    8548:	defffd04 	addi	sp,sp,-12
    854c:	dc000015 	stw	r16,0(sp)
    8550:	04000074 	movhi	r16,1
    8554:	8403b204 	addi	r16,r16,3784
    8558:	dc400115 	stw	r17,4(sp)
    855c:	80000015 	stw	zero,0(r16)
    8560:	2023883a 	mov	r17,r4
    8564:	2809883a 	mov	r4,r5
    8568:	300b883a 	mov	r5,r6
    856c:	380d883a 	mov	r6,r7
    8570:	dfc00215 	stw	ra,8(sp)
    8574:	000b5900 	call	b590 <read>
    8578:	1007883a 	mov	r3,r2
    857c:	00bfffc4 	movi	r2,-1
    8580:	18800626 	beq	r3,r2,859c <_read_r+0x54>
    8584:	1805883a 	mov	r2,r3
    8588:	dfc00217 	ldw	ra,8(sp)
    858c:	dc400117 	ldw	r17,4(sp)
    8590:	dc000017 	ldw	r16,0(sp)
    8594:	dec00304 	addi	sp,sp,12
    8598:	f800283a 	ret
    859c:	80800017 	ldw	r2,0(r16)
    85a0:	103ff826 	beq	r2,zero,8584 <_read_r+0x3c>
    85a4:	88800015 	stw	r2,0(r17)
    85a8:	1805883a 	mov	r2,r3
    85ac:	dfc00217 	ldw	ra,8(sp)
    85b0:	dc400117 	ldw	r17,4(sp)
    85b4:	dc000017 	ldw	r16,0(sp)
    85b8:	dec00304 	addi	sp,sp,12
    85bc:	f800283a 	ret

000085c0 <__udivdi3>:
    85c0:	defff104 	addi	sp,sp,-60
    85c4:	0015883a 	mov	r10,zero
    85c8:	2005883a 	mov	r2,r4
    85cc:	3011883a 	mov	r8,r6
    85d0:	df000d15 	stw	fp,52(sp)
    85d4:	dd400a15 	stw	r21,40(sp)
    85d8:	dcc00815 	stw	r19,32(sp)
    85dc:	dfc00e15 	stw	ra,56(sp)
    85e0:	ddc00c15 	stw	r23,48(sp)
    85e4:	dd800b15 	stw	r22,44(sp)
    85e8:	dd000915 	stw	r20,36(sp)
    85ec:	dc800715 	stw	r18,28(sp)
    85f0:	dc400615 	stw	r17,24(sp)
    85f4:	dc000515 	stw	r16,20(sp)
    85f8:	da800315 	stw	r10,12(sp)
    85fc:	4027883a 	mov	r19,r8
    8600:	1039883a 	mov	fp,r2
    8604:	282b883a 	mov	r21,r5
    8608:	da800415 	stw	r10,16(sp)
    860c:	3800401e 	bne	r7,zero,8710 <__udivdi3+0x150>
    8610:	2a006536 	bltu	r5,r8,87a8 <__udivdi3+0x1e8>
    8614:	4000b526 	beq	r8,zero,88ec <__udivdi3+0x32c>
    8618:	00bfffd4 	movui	r2,65535
    861c:	14c0ad36 	bltu	r2,r19,88d4 <__udivdi3+0x314>
    8620:	00803fc4 	movi	r2,255
    8624:	14c15e36 	bltu	r2,r19,8ba0 <__udivdi3+0x5e0>
    8628:	000b883a 	mov	r5,zero
    862c:	0005883a 	mov	r2,zero
    8630:	9884d83a 	srl	r2,r19,r2
    8634:	01000074 	movhi	r4,1
    8638:	21363304 	addi	r4,r4,-10036
    863c:	01800804 	movi	r6,32
    8640:	1105883a 	add	r2,r2,r4
    8644:	10c00003 	ldbu	r3,0(r2)
    8648:	28c7883a 	add	r3,r5,r3
    864c:	30e9c83a 	sub	r20,r6,r3
    8650:	a0010a1e 	bne	r20,zero,8a7c <__udivdi3+0x4bc>
    8654:	982ed43a 	srli	r23,r19,16
    8658:	acebc83a 	sub	r21,r21,r19
    865c:	9dbfffcc 	andi	r22,r19,65535
    8660:	05000044 	movi	r20,1
    8664:	a809883a 	mov	r4,r21
    8668:	b80b883a 	mov	r5,r23
    866c:	0000ae40 	call	ae4 <__udivsi3>
    8670:	100b883a 	mov	r5,r2
    8674:	b009883a 	mov	r4,r22
    8678:	1021883a 	mov	r16,r2
    867c:	0000af40 	call	af4 <__mulsi3>
    8680:	a809883a 	mov	r4,r21
    8684:	b80b883a 	mov	r5,r23
    8688:	1023883a 	mov	r17,r2
    868c:	0000aec0 	call	aec <__umodsi3>
    8690:	1004943a 	slli	r2,r2,16
    8694:	e006d43a 	srli	r3,fp,16
    8698:	10c4b03a 	or	r2,r2,r3
    869c:	1440042e 	bgeu	r2,r17,86b0 <__udivdi3+0xf0>
    86a0:	14c5883a 	add	r2,r2,r19
    86a4:	843fffc4 	addi	r16,r16,-1
    86a8:	14c00136 	bltu	r2,r19,86b0 <__udivdi3+0xf0>
    86ac:	14415c36 	bltu	r2,r17,8c20 <__udivdi3+0x660>
    86b0:	1463c83a 	sub	r17,r2,r17
    86b4:	8809883a 	mov	r4,r17
    86b8:	b80b883a 	mov	r5,r23
    86bc:	0000ae40 	call	ae4 <__udivsi3>
    86c0:	100b883a 	mov	r5,r2
    86c4:	b009883a 	mov	r4,r22
    86c8:	102b883a 	mov	r21,r2
    86cc:	0000af40 	call	af4 <__mulsi3>
    86d0:	8809883a 	mov	r4,r17
    86d4:	b80b883a 	mov	r5,r23
    86d8:	1025883a 	mov	r18,r2
    86dc:	0000aec0 	call	aec <__umodsi3>
    86e0:	1004943a 	slli	r2,r2,16
    86e4:	e0ffffcc 	andi	r3,fp,65535
    86e8:	10c4b03a 	or	r2,r2,r3
    86ec:	1480042e 	bgeu	r2,r18,8700 <__udivdi3+0x140>
    86f0:	9885883a 	add	r2,r19,r2
    86f4:	ad7fffc4 	addi	r21,r21,-1
    86f8:	14c00136 	bltu	r2,r19,8700 <__udivdi3+0x140>
    86fc:	14813c36 	bltu	r2,r18,8bf0 <__udivdi3+0x630>
    8700:	8004943a 	slli	r2,r16,16
    8704:	a009883a 	mov	r4,r20
    8708:	a884b03a 	or	r2,r21,r2
    870c:	00001506 	br	8764 <__udivdi3+0x1a4>
    8710:	380d883a 	mov	r6,r7
    8714:	29c06c36 	bltu	r5,r7,88c8 <__udivdi3+0x308>
    8718:	00bfffd4 	movui	r2,65535
    871c:	11c06436 	bltu	r2,r7,88b0 <__udivdi3+0x2f0>
    8720:	00803fc4 	movi	r2,255
    8724:	11c11836 	bltu	r2,r7,8b88 <__udivdi3+0x5c8>
    8728:	000b883a 	mov	r5,zero
    872c:	0005883a 	mov	r2,zero
    8730:	3084d83a 	srl	r2,r6,r2
    8734:	01000074 	movhi	r4,1
    8738:	21363304 	addi	r4,r4,-10036
    873c:	01c00804 	movi	r7,32
    8740:	1105883a 	add	r2,r2,r4
    8744:	10c00003 	ldbu	r3,0(r2)
    8748:	28c7883a 	add	r3,r5,r3
    874c:	38edc83a 	sub	r22,r7,r3
    8750:	b000731e 	bne	r22,zero,8920 <__udivdi3+0x360>
    8754:	35400136 	bltu	r6,r21,875c <__udivdi3+0x19c>
    8758:	e4c05b36 	bltu	fp,r19,88c8 <__udivdi3+0x308>
    875c:	00800044 	movi	r2,1
    8760:	0009883a 	mov	r4,zero
    8764:	d8800315 	stw	r2,12(sp)
    8768:	d9400317 	ldw	r5,12(sp)
    876c:	2007883a 	mov	r3,r4
    8770:	d9000415 	stw	r4,16(sp)
    8774:	2805883a 	mov	r2,r5
    8778:	dfc00e17 	ldw	ra,56(sp)
    877c:	df000d17 	ldw	fp,52(sp)
    8780:	ddc00c17 	ldw	r23,48(sp)
    8784:	dd800b17 	ldw	r22,44(sp)
    8788:	dd400a17 	ldw	r21,40(sp)
    878c:	dd000917 	ldw	r20,36(sp)
    8790:	dcc00817 	ldw	r19,32(sp)
    8794:	dc800717 	ldw	r18,28(sp)
    8798:	dc400617 	ldw	r17,24(sp)
    879c:	dc000517 	ldw	r16,20(sp)
    87a0:	dec00f04 	addi	sp,sp,60
    87a4:	f800283a 	ret
    87a8:	00bfffd4 	movui	r2,65535
    87ac:	12005636 	bltu	r2,r8,8908 <__udivdi3+0x348>
    87b0:	00803fc4 	movi	r2,255
    87b4:	12010036 	bltu	r2,r8,8bb8 <__udivdi3+0x5f8>
    87b8:	000b883a 	mov	r5,zero
    87bc:	0005883a 	mov	r2,zero
    87c0:	9884d83a 	srl	r2,r19,r2
    87c4:	01000074 	movhi	r4,1
    87c8:	21363304 	addi	r4,r4,-10036
    87cc:	01800804 	movi	r6,32
    87d0:	1105883a 	add	r2,r2,r4
    87d4:	10c00003 	ldbu	r3,0(r2)
    87d8:	28c7883a 	add	r3,r5,r3
    87dc:	30cbc83a 	sub	r5,r6,r3
    87e0:	28000626 	beq	r5,zero,87fc <__udivdi3+0x23c>
    87e4:	3145c83a 	sub	r2,r6,r5
    87e8:	e084d83a 	srl	r2,fp,r2
    87ec:	a946983a 	sll	r3,r21,r5
    87f0:	e178983a 	sll	fp,fp,r5
    87f4:	9966983a 	sll	r19,r19,r5
    87f8:	18aab03a 	or	r21,r3,r2
    87fc:	982ed43a 	srli	r23,r19,16
    8800:	a809883a 	mov	r4,r21
    8804:	9cbfffcc 	andi	r18,r19,65535
    8808:	b80b883a 	mov	r5,r23
    880c:	0000ae40 	call	ae4 <__udivsi3>
    8810:	100b883a 	mov	r5,r2
    8814:	9009883a 	mov	r4,r18
    8818:	1021883a 	mov	r16,r2
    881c:	0000af40 	call	af4 <__mulsi3>
    8820:	a809883a 	mov	r4,r21
    8824:	b80b883a 	mov	r5,r23
    8828:	1023883a 	mov	r17,r2
    882c:	0000aec0 	call	aec <__umodsi3>
    8830:	1004943a 	slli	r2,r2,16
    8834:	e006d43a 	srli	r3,fp,16
    8838:	10c4b03a 	or	r2,r2,r3
    883c:	1440042e 	bgeu	r2,r17,8850 <__udivdi3+0x290>
    8840:	14c5883a 	add	r2,r2,r19
    8844:	843fffc4 	addi	r16,r16,-1
    8848:	14c00136 	bltu	r2,r19,8850 <__udivdi3+0x290>
    884c:	1440ea36 	bltu	r2,r17,8bf8 <__udivdi3+0x638>
    8850:	1463c83a 	sub	r17,r2,r17
    8854:	8809883a 	mov	r4,r17
    8858:	b80b883a 	mov	r5,r23
    885c:	0000ae40 	call	ae4 <__udivsi3>
    8860:	100b883a 	mov	r5,r2
    8864:	9009883a 	mov	r4,r18
    8868:	102b883a 	mov	r21,r2
    886c:	0000af40 	call	af4 <__mulsi3>
    8870:	8809883a 	mov	r4,r17
    8874:	b80b883a 	mov	r5,r23
    8878:	1025883a 	mov	r18,r2
    887c:	0000aec0 	call	aec <__umodsi3>
    8880:	1004943a 	slli	r2,r2,16
    8884:	e0ffffcc 	andi	r3,fp,65535
    8888:	10c4b03a 	or	r2,r2,r3
    888c:	1480042e 	bgeu	r2,r18,88a0 <__udivdi3+0x2e0>
    8890:	9885883a 	add	r2,r19,r2
    8894:	ad7fffc4 	addi	r21,r21,-1
    8898:	14c00136 	bltu	r2,r19,88a0 <__udivdi3+0x2e0>
    889c:	1480d936 	bltu	r2,r18,8c04 <__udivdi3+0x644>
    88a0:	8004943a 	slli	r2,r16,16
    88a4:	0009883a 	mov	r4,zero
    88a8:	a884b03a 	or	r2,r21,r2
    88ac:	003fad06 	br	8764 <__udivdi3+0x1a4>
    88b0:	00804034 	movhi	r2,256
    88b4:	10bfffc4 	addi	r2,r2,-1
    88b8:	11c0b636 	bltu	r2,r7,8b94 <__udivdi3+0x5d4>
    88bc:	01400404 	movi	r5,16
    88c0:	2805883a 	mov	r2,r5
    88c4:	003f9a06 	br	8730 <__udivdi3+0x170>
    88c8:	0005883a 	mov	r2,zero
    88cc:	0009883a 	mov	r4,zero
    88d0:	003fa406 	br	8764 <__udivdi3+0x1a4>
    88d4:	00804034 	movhi	r2,256
    88d8:	10bfffc4 	addi	r2,r2,-1
    88dc:	14c0b336 	bltu	r2,r19,8bac <__udivdi3+0x5ec>
    88e0:	01400404 	movi	r5,16
    88e4:	2805883a 	mov	r2,r5
    88e8:	003f5106 	br	8630 <__udivdi3+0x70>
    88ec:	01000044 	movi	r4,1
    88f0:	000b883a 	mov	r5,zero
    88f4:	0000ae40 	call	ae4 <__udivsi3>
    88f8:	1027883a 	mov	r19,r2
    88fc:	00bfffd4 	movui	r2,65535
    8900:	14fff436 	bltu	r2,r19,88d4 <__udivdi3+0x314>
    8904:	003f4606 	br	8620 <__udivdi3+0x60>
    8908:	00804034 	movhi	r2,256
    890c:	10bfffc4 	addi	r2,r2,-1
    8910:	1200ac36 	bltu	r2,r8,8bc4 <__udivdi3+0x604>
    8914:	01400404 	movi	r5,16
    8918:	2805883a 	mov	r2,r5
    891c:	003fa806 	br	87c0 <__udivdi3+0x200>
    8920:	3d85c83a 	sub	r2,r7,r22
    8924:	3588983a 	sll	r4,r6,r22
    8928:	9886d83a 	srl	r3,r19,r2
    892c:	a8a2d83a 	srl	r17,r21,r2
    8930:	e084d83a 	srl	r2,fp,r2
    8934:	20eeb03a 	or	r23,r4,r3
    8938:	b824d43a 	srli	r18,r23,16
    893c:	ad86983a 	sll	r3,r21,r22
    8940:	8809883a 	mov	r4,r17
    8944:	900b883a 	mov	r5,r18
    8948:	1886b03a 	or	r3,r3,r2
    894c:	d8c00115 	stw	r3,4(sp)
    8950:	bc3fffcc 	andi	r16,r23,65535
    8954:	0000ae40 	call	ae4 <__udivsi3>
    8958:	100b883a 	mov	r5,r2
    895c:	8009883a 	mov	r4,r16
    8960:	1029883a 	mov	r20,r2
    8964:	0000af40 	call	af4 <__mulsi3>
    8968:	900b883a 	mov	r5,r18
    896c:	8809883a 	mov	r4,r17
    8970:	102b883a 	mov	r21,r2
    8974:	0000aec0 	call	aec <__umodsi3>
    8978:	d9400117 	ldw	r5,4(sp)
    897c:	1004943a 	slli	r2,r2,16
    8980:	9da6983a 	sll	r19,r19,r22
    8984:	2806d43a 	srli	r3,r5,16
    8988:	10c4b03a 	or	r2,r2,r3
    898c:	1540032e 	bgeu	r2,r21,899c <__udivdi3+0x3dc>
    8990:	15c5883a 	add	r2,r2,r23
    8994:	a53fffc4 	addi	r20,r20,-1
    8998:	15c0912e 	bgeu	r2,r23,8be0 <__udivdi3+0x620>
    899c:	1563c83a 	sub	r17,r2,r21
    89a0:	8809883a 	mov	r4,r17
    89a4:	900b883a 	mov	r5,r18
    89a8:	0000ae40 	call	ae4 <__udivsi3>
    89ac:	100b883a 	mov	r5,r2
    89b0:	8009883a 	mov	r4,r16
    89b4:	102b883a 	mov	r21,r2
    89b8:	0000af40 	call	af4 <__mulsi3>
    89bc:	8809883a 	mov	r4,r17
    89c0:	900b883a 	mov	r5,r18
    89c4:	1021883a 	mov	r16,r2
    89c8:	0000aec0 	call	aec <__umodsi3>
    89cc:	da800117 	ldw	r10,4(sp)
    89d0:	1004943a 	slli	r2,r2,16
    89d4:	50ffffcc 	andi	r3,r10,65535
    89d8:	10c6b03a 	or	r3,r2,r3
    89dc:	1c00032e 	bgeu	r3,r16,89ec <__udivdi3+0x42c>
    89e0:	1dc7883a 	add	r3,r3,r23
    89e4:	ad7fffc4 	addi	r21,r21,-1
    89e8:	1dc0792e 	bgeu	r3,r23,8bd0 <__udivdi3+0x610>
    89ec:	a004943a 	slli	r2,r20,16
    89f0:	982ed43a 	srli	r23,r19,16
    89f4:	9cffffcc 	andi	r19,r19,65535
    89f8:	a8a4b03a 	or	r18,r21,r2
    89fc:	947fffcc 	andi	r17,r18,65535
    8a00:	902ad43a 	srli	r21,r18,16
    8a04:	8809883a 	mov	r4,r17
    8a08:	980b883a 	mov	r5,r19
    8a0c:	1c21c83a 	sub	r16,r3,r16
    8a10:	0000af40 	call	af4 <__mulsi3>
    8a14:	8809883a 	mov	r4,r17
    8a18:	b80b883a 	mov	r5,r23
    8a1c:	1029883a 	mov	r20,r2
    8a20:	0000af40 	call	af4 <__mulsi3>
    8a24:	980b883a 	mov	r5,r19
    8a28:	a809883a 	mov	r4,r21
    8a2c:	1023883a 	mov	r17,r2
    8a30:	0000af40 	call	af4 <__mulsi3>
    8a34:	a809883a 	mov	r4,r21
    8a38:	b80b883a 	mov	r5,r23
    8a3c:	1027883a 	mov	r19,r2
    8a40:	0000af40 	call	af4 <__mulsi3>
    8a44:	1009883a 	mov	r4,r2
    8a48:	a004d43a 	srli	r2,r20,16
    8a4c:	8ce3883a 	add	r17,r17,r19
    8a50:	1447883a 	add	r3,r2,r17
    8a54:	1cc0022e 	bgeu	r3,r19,8a60 <__udivdi3+0x4a0>
    8a58:	00800074 	movhi	r2,1
    8a5c:	2089883a 	add	r4,r4,r2
    8a60:	1804d43a 	srli	r2,r3,16
    8a64:	2085883a 	add	r2,r4,r2
    8a68:	80804436 	bltu	r16,r2,8b7c <__udivdi3+0x5bc>
    8a6c:	80803e26 	beq	r16,r2,8b68 <__udivdi3+0x5a8>
    8a70:	9005883a 	mov	r2,r18
    8a74:	0009883a 	mov	r4,zero
    8a78:	003f3a06 	br	8764 <__udivdi3+0x1a4>
    8a7c:	9d26983a 	sll	r19,r19,r20
    8a80:	3505c83a 	sub	r2,r6,r20
    8a84:	a8a2d83a 	srl	r17,r21,r2
    8a88:	982ed43a 	srli	r23,r19,16
    8a8c:	e084d83a 	srl	r2,fp,r2
    8a90:	ad06983a 	sll	r3,r21,r20
    8a94:	8809883a 	mov	r4,r17
    8a98:	b80b883a 	mov	r5,r23
    8a9c:	1886b03a 	or	r3,r3,r2
    8aa0:	d8c00015 	stw	r3,0(sp)
    8aa4:	9dbfffcc 	andi	r22,r19,65535
    8aa8:	0000ae40 	call	ae4 <__udivsi3>
    8aac:	100b883a 	mov	r5,r2
    8ab0:	b009883a 	mov	r4,r22
    8ab4:	d8800215 	stw	r2,8(sp)
    8ab8:	0000af40 	call	af4 <__mulsi3>
    8abc:	8809883a 	mov	r4,r17
    8ac0:	b80b883a 	mov	r5,r23
    8ac4:	102b883a 	mov	r21,r2
    8ac8:	0000aec0 	call	aec <__umodsi3>
    8acc:	d9000017 	ldw	r4,0(sp)
    8ad0:	1004943a 	slli	r2,r2,16
    8ad4:	2006d43a 	srli	r3,r4,16
    8ad8:	10c4b03a 	or	r2,r2,r3
    8adc:	1540052e 	bgeu	r2,r21,8af4 <__udivdi3+0x534>
    8ae0:	d9400217 	ldw	r5,8(sp)
    8ae4:	14c5883a 	add	r2,r2,r19
    8ae8:	297fffc4 	addi	r5,r5,-1
    8aec:	d9400215 	stw	r5,8(sp)
    8af0:	14c0462e 	bgeu	r2,r19,8c0c <__udivdi3+0x64c>
    8af4:	1563c83a 	sub	r17,r2,r21
    8af8:	8809883a 	mov	r4,r17
    8afc:	b80b883a 	mov	r5,r23
    8b00:	0000ae40 	call	ae4 <__udivsi3>
    8b04:	100b883a 	mov	r5,r2
    8b08:	b009883a 	mov	r4,r22
    8b0c:	1025883a 	mov	r18,r2
    8b10:	0000af40 	call	af4 <__mulsi3>
    8b14:	8809883a 	mov	r4,r17
    8b18:	b80b883a 	mov	r5,r23
    8b1c:	1021883a 	mov	r16,r2
    8b20:	0000aec0 	call	aec <__umodsi3>
    8b24:	da800017 	ldw	r10,0(sp)
    8b28:	1004943a 	slli	r2,r2,16
    8b2c:	50ffffcc 	andi	r3,r10,65535
    8b30:	10c6b03a 	or	r3,r2,r3
    8b34:	1c00062e 	bgeu	r3,r16,8b50 <__udivdi3+0x590>
    8b38:	1cc7883a 	add	r3,r3,r19
    8b3c:	94bfffc4 	addi	r18,r18,-1
    8b40:	1cc00336 	bltu	r3,r19,8b50 <__udivdi3+0x590>
    8b44:	1c00022e 	bgeu	r3,r16,8b50 <__udivdi3+0x590>
    8b48:	94bfffc4 	addi	r18,r18,-1
    8b4c:	1cc7883a 	add	r3,r3,r19
    8b50:	d9000217 	ldw	r4,8(sp)
    8b54:	e538983a 	sll	fp,fp,r20
    8b58:	1c2bc83a 	sub	r21,r3,r16
    8b5c:	2004943a 	slli	r2,r4,16
    8b60:	90a8b03a 	or	r20,r18,r2
    8b64:	003ebf06 	br	8664 <__udivdi3+0xa4>
    8b68:	1804943a 	slli	r2,r3,16
    8b6c:	e588983a 	sll	r4,fp,r22
    8b70:	a0ffffcc 	andi	r3,r20,65535
    8b74:	10c5883a 	add	r2,r2,r3
    8b78:	20bfbd2e 	bgeu	r4,r2,8a70 <__udivdi3+0x4b0>
    8b7c:	90bfffc4 	addi	r2,r18,-1
    8b80:	0009883a 	mov	r4,zero
    8b84:	003ef706 	br	8764 <__udivdi3+0x1a4>
    8b88:	01400204 	movi	r5,8
    8b8c:	2805883a 	mov	r2,r5
    8b90:	003ee706 	br	8730 <__udivdi3+0x170>
    8b94:	01400604 	movi	r5,24
    8b98:	2805883a 	mov	r2,r5
    8b9c:	003ee406 	br	8730 <__udivdi3+0x170>
    8ba0:	01400204 	movi	r5,8
    8ba4:	2805883a 	mov	r2,r5
    8ba8:	003ea106 	br	8630 <__udivdi3+0x70>
    8bac:	01400604 	movi	r5,24
    8bb0:	2805883a 	mov	r2,r5
    8bb4:	003e9e06 	br	8630 <__udivdi3+0x70>
    8bb8:	01400204 	movi	r5,8
    8bbc:	2805883a 	mov	r2,r5
    8bc0:	003eff06 	br	87c0 <__udivdi3+0x200>
    8bc4:	01400604 	movi	r5,24
    8bc8:	2805883a 	mov	r2,r5
    8bcc:	003efc06 	br	87c0 <__udivdi3+0x200>
    8bd0:	1c3f862e 	bgeu	r3,r16,89ec <__udivdi3+0x42c>
    8bd4:	1dc7883a 	add	r3,r3,r23
    8bd8:	ad7fffc4 	addi	r21,r21,-1
    8bdc:	003f8306 	br	89ec <__udivdi3+0x42c>
    8be0:	157f6e2e 	bgeu	r2,r21,899c <__udivdi3+0x3dc>
    8be4:	a53fffc4 	addi	r20,r20,-1
    8be8:	15c5883a 	add	r2,r2,r23
    8bec:	003f6b06 	br	899c <__udivdi3+0x3dc>
    8bf0:	ad7fffc4 	addi	r21,r21,-1
    8bf4:	003ec206 	br	8700 <__udivdi3+0x140>
    8bf8:	843fffc4 	addi	r16,r16,-1
    8bfc:	14c5883a 	add	r2,r2,r19
    8c00:	003f1306 	br	8850 <__udivdi3+0x290>
    8c04:	ad7fffc4 	addi	r21,r21,-1
    8c08:	003f2506 	br	88a0 <__udivdi3+0x2e0>
    8c0c:	157fb92e 	bgeu	r2,r21,8af4 <__udivdi3+0x534>
    8c10:	297fffc4 	addi	r5,r5,-1
    8c14:	14c5883a 	add	r2,r2,r19
    8c18:	d9400215 	stw	r5,8(sp)
    8c1c:	003fb506 	br	8af4 <__udivdi3+0x534>
    8c20:	843fffc4 	addi	r16,r16,-1
    8c24:	14c5883a 	add	r2,r2,r19
    8c28:	003ea106 	br	86b0 <__udivdi3+0xf0>

00008c2c <__umoddi3>:
    8c2c:	defff004 	addi	sp,sp,-64
    8c30:	3011883a 	mov	r8,r6
    8c34:	000d883a 	mov	r6,zero
    8c38:	dd400b15 	stw	r21,44(sp)
    8c3c:	dcc00915 	stw	r19,36(sp)
    8c40:	dc000615 	stw	r16,24(sp)
    8c44:	dfc00f15 	stw	ra,60(sp)
    8c48:	df000e15 	stw	fp,56(sp)
    8c4c:	ddc00d15 	stw	r23,52(sp)
    8c50:	dd800c15 	stw	r22,48(sp)
    8c54:	dd000a15 	stw	r20,40(sp)
    8c58:	dc800815 	stw	r18,32(sp)
    8c5c:	dc400715 	stw	r17,28(sp)
    8c60:	2817883a 	mov	r11,r5
    8c64:	d9800415 	stw	r6,16(sp)
    8c68:	4027883a 	mov	r19,r8
    8c6c:	d9800515 	stw	r6,20(sp)
    8c70:	2021883a 	mov	r16,r4
    8c74:	282b883a 	mov	r21,r5
    8c78:	38002c1e 	bne	r7,zero,8d2c <__umoddi3+0x100>
    8c7c:	2a005636 	bltu	r5,r8,8dd8 <__umoddi3+0x1ac>
    8c80:	40009a26 	beq	r8,zero,8eec <__umoddi3+0x2c0>
    8c84:	00bfffd4 	movui	r2,65535
    8c88:	14c09236 	bltu	r2,r19,8ed4 <__umoddi3+0x2a8>
    8c8c:	00803fc4 	movi	r2,255
    8c90:	14c15c36 	bltu	r2,r19,9204 <__umoddi3+0x5d8>
    8c94:	000b883a 	mov	r5,zero
    8c98:	0005883a 	mov	r2,zero
    8c9c:	9884d83a 	srl	r2,r19,r2
    8ca0:	01000074 	movhi	r4,1
    8ca4:	21363304 	addi	r4,r4,-10036
    8ca8:	01800804 	movi	r6,32
    8cac:	1105883a 	add	r2,r2,r4
    8cb0:	10c00003 	ldbu	r3,0(r2)
    8cb4:	28c7883a 	add	r3,r5,r3
    8cb8:	30e5c83a 	sub	r18,r6,r3
    8cbc:	9000a41e 	bne	r18,zero,8f50 <__umoddi3+0x324>
    8cc0:	982ed43a 	srli	r23,r19,16
    8cc4:	acebc83a 	sub	r21,r21,r19
    8cc8:	9d3fffcc 	andi	r20,r19,65535
    8ccc:	002d883a 	mov	r22,zero
    8cd0:	a809883a 	mov	r4,r21
    8cd4:	b80b883a 	mov	r5,r23
    8cd8:	0000ae40 	call	ae4 <__udivsi3>
    8cdc:	100b883a 	mov	r5,r2
    8ce0:	a009883a 	mov	r4,r20
    8ce4:	0000af40 	call	af4 <__mulsi3>
    8ce8:	a809883a 	mov	r4,r21
    8cec:	b80b883a 	mov	r5,r23
    8cf0:	1023883a 	mov	r17,r2
    8cf4:	0000aec0 	call	aec <__umodsi3>
    8cf8:	1004943a 	slli	r2,r2,16
    8cfc:	8006d43a 	srli	r3,r16,16
    8d00:	10c4b03a 	or	r2,r2,r3
    8d04:	1440032e 	bgeu	r2,r17,8d14 <__umoddi3+0xe8>
    8d08:	14c5883a 	add	r2,r2,r19
    8d0c:	14c00136 	bltu	r2,r19,8d14 <__umoddi3+0xe8>
    8d10:	14415836 	bltu	r2,r17,9274 <__umoddi3+0x648>
    8d14:	1463c83a 	sub	r17,r2,r17
    8d18:	8809883a 	mov	r4,r17
    8d1c:	b80b883a 	mov	r5,r23
    8d20:	0000ae40 	call	ae4 <__udivsi3>
    8d24:	a009883a 	mov	r4,r20
    8d28:	00005306 	br	8e78 <__umoddi3+0x24c>
    8d2c:	380d883a 	mov	r6,r7
    8d30:	29c0132e 	bgeu	r5,r7,8d80 <__umoddi3+0x154>
    8d34:	d9000415 	stw	r4,16(sp)
    8d38:	d9400515 	stw	r5,20(sp)
    8d3c:	d9400417 	ldw	r5,16(sp)
    8d40:	5813883a 	mov	r9,r11
    8d44:	2811883a 	mov	r8,r5
    8d48:	4005883a 	mov	r2,r8
    8d4c:	4807883a 	mov	r3,r9
    8d50:	dfc00f17 	ldw	ra,60(sp)
    8d54:	df000e17 	ldw	fp,56(sp)
    8d58:	ddc00d17 	ldw	r23,52(sp)
    8d5c:	dd800c17 	ldw	r22,48(sp)
    8d60:	dd400b17 	ldw	r21,44(sp)
    8d64:	dd000a17 	ldw	r20,40(sp)
    8d68:	dcc00917 	ldw	r19,36(sp)
    8d6c:	dc800817 	ldw	r18,32(sp)
    8d70:	dc400717 	ldw	r17,28(sp)
    8d74:	dc000617 	ldw	r16,24(sp)
    8d78:	dec01004 	addi	sp,sp,64
    8d7c:	f800283a 	ret
    8d80:	00bfffd4 	movui	r2,65535
    8d84:	11c06636 	bltu	r2,r7,8f20 <__umoddi3+0x2f4>
    8d88:	00803fc4 	movi	r2,255
    8d8c:	11c12036 	bltu	r2,r7,9210 <__umoddi3+0x5e4>
    8d90:	000b883a 	mov	r5,zero
    8d94:	0005883a 	mov	r2,zero
    8d98:	3084d83a 	srl	r2,r6,r2
    8d9c:	01000074 	movhi	r4,1
    8da0:	21363304 	addi	r4,r4,-10036
    8da4:	01c00804 	movi	r7,32
    8da8:	1105883a 	add	r2,r2,r4
    8dac:	10c00003 	ldbu	r3,0(r2)
    8db0:	28c7883a 	add	r3,r5,r3
    8db4:	38e5c83a 	sub	r18,r7,r3
    8db8:	9000941e 	bne	r18,zero,900c <__umoddi3+0x3e0>
    8dbc:	35405e36 	bltu	r6,r21,8f38 <__umoddi3+0x30c>
    8dc0:	84c05d2e 	bgeu	r16,r19,8f38 <__umoddi3+0x30c>
    8dc4:	8011883a 	mov	r8,r16
    8dc8:	a813883a 	mov	r9,r21
    8dcc:	dc000415 	stw	r16,16(sp)
    8dd0:	dd400515 	stw	r21,20(sp)
    8dd4:	003fdc06 	br	8d48 <__umoddi3+0x11c>
    8dd8:	00bfffd4 	movui	r2,65535
    8ddc:	12004a36 	bltu	r2,r8,8f08 <__umoddi3+0x2dc>
    8de0:	00803fc4 	movi	r2,255
    8de4:	12010d36 	bltu	r2,r8,921c <__umoddi3+0x5f0>
    8de8:	000b883a 	mov	r5,zero
    8dec:	0005883a 	mov	r2,zero
    8df0:	9884d83a 	srl	r2,r19,r2
    8df4:	01000074 	movhi	r4,1
    8df8:	21363304 	addi	r4,r4,-10036
    8dfc:	01800804 	movi	r6,32
    8e00:	1105883a 	add	r2,r2,r4
    8e04:	10c00003 	ldbu	r3,0(r2)
    8e08:	28c7883a 	add	r3,r5,r3
    8e0c:	30c7c83a 	sub	r3,r6,r3
    8e10:	1800dc1e 	bne	r3,zero,9184 <__umoddi3+0x558>
    8e14:	002d883a 	mov	r22,zero
    8e18:	982ed43a 	srli	r23,r19,16
    8e1c:	a809883a 	mov	r4,r21
    8e20:	9cbfffcc 	andi	r18,r19,65535
    8e24:	b80b883a 	mov	r5,r23
    8e28:	0000ae40 	call	ae4 <__udivsi3>
    8e2c:	100b883a 	mov	r5,r2
    8e30:	9009883a 	mov	r4,r18
    8e34:	0000af40 	call	af4 <__mulsi3>
    8e38:	a809883a 	mov	r4,r21
    8e3c:	b80b883a 	mov	r5,r23
    8e40:	1023883a 	mov	r17,r2
    8e44:	0000aec0 	call	aec <__umodsi3>
    8e48:	1004943a 	slli	r2,r2,16
    8e4c:	8006d43a 	srli	r3,r16,16
    8e50:	10c4b03a 	or	r2,r2,r3
    8e54:	1440032e 	bgeu	r2,r17,8e64 <__umoddi3+0x238>
    8e58:	14c5883a 	add	r2,r2,r19
    8e5c:	14c00136 	bltu	r2,r19,8e64 <__umoddi3+0x238>
    8e60:	14410236 	bltu	r2,r17,926c <__umoddi3+0x640>
    8e64:	1463c83a 	sub	r17,r2,r17
    8e68:	8809883a 	mov	r4,r17
    8e6c:	b80b883a 	mov	r5,r23
    8e70:	0000ae40 	call	ae4 <__udivsi3>
    8e74:	9009883a 	mov	r4,r18
    8e78:	100b883a 	mov	r5,r2
    8e7c:	0000af40 	call	af4 <__mulsi3>
    8e80:	8809883a 	mov	r4,r17
    8e84:	b80b883a 	mov	r5,r23
    8e88:	102b883a 	mov	r21,r2
    8e8c:	0000aec0 	call	aec <__umodsi3>
    8e90:	1004943a 	slli	r2,r2,16
    8e94:	80ffffcc 	andi	r3,r16,65535
    8e98:	10c4b03a 	or	r2,r2,r3
    8e9c:	1540042e 	bgeu	r2,r21,8eb0 <__umoddi3+0x284>
    8ea0:	14c5883a 	add	r2,r2,r19
    8ea4:	14c00236 	bltu	r2,r19,8eb0 <__umoddi3+0x284>
    8ea8:	1540012e 	bgeu	r2,r21,8eb0 <__umoddi3+0x284>
    8eac:	14c5883a 	add	r2,r2,r19
    8eb0:	1545c83a 	sub	r2,r2,r21
    8eb4:	1584d83a 	srl	r2,r2,r22
    8eb8:	0013883a 	mov	r9,zero
    8ebc:	d8800415 	stw	r2,16(sp)
    8ec0:	d8c00417 	ldw	r3,16(sp)
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	d8800515 	stw	r2,20(sp)
    8ecc:	1811883a 	mov	r8,r3
    8ed0:	003f9d06 	br	8d48 <__umoddi3+0x11c>
    8ed4:	00804034 	movhi	r2,256
    8ed8:	10bfffc4 	addi	r2,r2,-1
    8edc:	14c0c636 	bltu	r2,r19,91f8 <__umoddi3+0x5cc>
    8ee0:	01400404 	movi	r5,16
    8ee4:	2805883a 	mov	r2,r5
    8ee8:	003f6c06 	br	8c9c <__umoddi3+0x70>
    8eec:	01000044 	movi	r4,1
    8ef0:	000b883a 	mov	r5,zero
    8ef4:	0000ae40 	call	ae4 <__udivsi3>
    8ef8:	1027883a 	mov	r19,r2
    8efc:	00bfffd4 	movui	r2,65535
    8f00:	14fff436 	bltu	r2,r19,8ed4 <__umoddi3+0x2a8>
    8f04:	003f6106 	br	8c8c <__umoddi3+0x60>
    8f08:	00804034 	movhi	r2,256
    8f0c:	10bfffc4 	addi	r2,r2,-1
    8f10:	1200c536 	bltu	r2,r8,9228 <__umoddi3+0x5fc>
    8f14:	01400404 	movi	r5,16
    8f18:	2805883a 	mov	r2,r5
    8f1c:	003fb406 	br	8df0 <__umoddi3+0x1c4>
    8f20:	00804034 	movhi	r2,256
    8f24:	10bfffc4 	addi	r2,r2,-1
    8f28:	11c0c236 	bltu	r2,r7,9234 <__umoddi3+0x608>
    8f2c:	01400404 	movi	r5,16
    8f30:	2805883a 	mov	r2,r5
    8f34:	003f9806 	br	8d98 <__umoddi3+0x16c>
    8f38:	84c9c83a 	sub	r4,r16,r19
    8f3c:	8105803a 	cmpltu	r2,r16,r4
    8f40:	a987c83a 	sub	r3,r21,r6
    8f44:	18abc83a 	sub	r21,r3,r2
    8f48:	2021883a 	mov	r16,r4
    8f4c:	003f9d06 	br	8dc4 <__umoddi3+0x198>
    8f50:	9ca6983a 	sll	r19,r19,r18
    8f54:	3485c83a 	sub	r2,r6,r18
    8f58:	a8a2d83a 	srl	r17,r21,r2
    8f5c:	982ed43a 	srli	r23,r19,16
    8f60:	ac86983a 	sll	r3,r21,r18
    8f64:	8084d83a 	srl	r2,r16,r2
    8f68:	8809883a 	mov	r4,r17
    8f6c:	b80b883a 	mov	r5,r23
    8f70:	18b8b03a 	or	fp,r3,r2
    8f74:	9d3fffcc 	andi	r20,r19,65535
    8f78:	0000ae40 	call	ae4 <__udivsi3>
    8f7c:	100b883a 	mov	r5,r2
    8f80:	a009883a 	mov	r4,r20
    8f84:	0000af40 	call	af4 <__mulsi3>
    8f88:	8809883a 	mov	r4,r17
    8f8c:	b80b883a 	mov	r5,r23
    8f90:	102b883a 	mov	r21,r2
    8f94:	0000aec0 	call	aec <__umodsi3>
    8f98:	1004943a 	slli	r2,r2,16
    8f9c:	e006d43a 	srli	r3,fp,16
    8fa0:	902d883a 	mov	r22,r18
    8fa4:	10c4b03a 	or	r2,r2,r3
    8fa8:	1540022e 	bgeu	r2,r21,8fb4 <__umoddi3+0x388>
    8fac:	14c5883a 	add	r2,r2,r19
    8fb0:	14c0ab2e 	bgeu	r2,r19,9260 <__umoddi3+0x634>
    8fb4:	1563c83a 	sub	r17,r2,r21
    8fb8:	8809883a 	mov	r4,r17
    8fbc:	b80b883a 	mov	r5,r23
    8fc0:	0000ae40 	call	ae4 <__udivsi3>
    8fc4:	100b883a 	mov	r5,r2
    8fc8:	a009883a 	mov	r4,r20
    8fcc:	0000af40 	call	af4 <__mulsi3>
    8fd0:	8809883a 	mov	r4,r17
    8fd4:	b80b883a 	mov	r5,r23
    8fd8:	102b883a 	mov	r21,r2
    8fdc:	0000aec0 	call	aec <__umodsi3>
    8fe0:	1004943a 	slli	r2,r2,16
    8fe4:	e0ffffcc 	andi	r3,fp,65535
    8fe8:	10c4b03a 	or	r2,r2,r3
    8fec:	1540042e 	bgeu	r2,r21,9000 <__umoddi3+0x3d4>
    8ff0:	14c5883a 	add	r2,r2,r19
    8ff4:	14c00236 	bltu	r2,r19,9000 <__umoddi3+0x3d4>
    8ff8:	1540012e 	bgeu	r2,r21,9000 <__umoddi3+0x3d4>
    8ffc:	14c5883a 	add	r2,r2,r19
    9000:	84a0983a 	sll	r16,r16,r18
    9004:	156bc83a 	sub	r21,r2,r21
    9008:	003f3106 	br	8cd0 <__umoddi3+0xa4>
    900c:	3c8fc83a 	sub	r7,r7,r18
    9010:	3486983a 	sll	r3,r6,r18
    9014:	99c4d83a 	srl	r2,r19,r7
    9018:	a9e2d83a 	srl	r17,r21,r7
    901c:	ac8c983a 	sll	r6,r21,r18
    9020:	18acb03a 	or	r22,r3,r2
    9024:	b02ed43a 	srli	r23,r22,16
    9028:	81c4d83a 	srl	r2,r16,r7
    902c:	8809883a 	mov	r4,r17
    9030:	b80b883a 	mov	r5,r23
    9034:	308cb03a 	or	r6,r6,r2
    9038:	d9c00315 	stw	r7,12(sp)
    903c:	d9800215 	stw	r6,8(sp)
    9040:	b53fffcc 	andi	r20,r22,65535
    9044:	0000ae40 	call	ae4 <__udivsi3>
    9048:	100b883a 	mov	r5,r2
    904c:	a009883a 	mov	r4,r20
    9050:	1039883a 	mov	fp,r2
    9054:	0000af40 	call	af4 <__mulsi3>
    9058:	8809883a 	mov	r4,r17
    905c:	b80b883a 	mov	r5,r23
    9060:	102b883a 	mov	r21,r2
    9064:	0000aec0 	call	aec <__umodsi3>
    9068:	d9000217 	ldw	r4,8(sp)
    906c:	1004943a 	slli	r2,r2,16
    9070:	9ca6983a 	sll	r19,r19,r18
    9074:	2006d43a 	srli	r3,r4,16
    9078:	84a0983a 	sll	r16,r16,r18
    907c:	dcc00015 	stw	r19,0(sp)
    9080:	10c4b03a 	or	r2,r2,r3
    9084:	dc000115 	stw	r16,4(sp)
    9088:	1540032e 	bgeu	r2,r21,9098 <__umoddi3+0x46c>
    908c:	1585883a 	add	r2,r2,r22
    9090:	e73fffc4 	addi	fp,fp,-1
    9094:	15806e2e 	bgeu	r2,r22,9250 <__umoddi3+0x624>
    9098:	1563c83a 	sub	r17,r2,r21
    909c:	8809883a 	mov	r4,r17
    90a0:	b80b883a 	mov	r5,r23
    90a4:	0000ae40 	call	ae4 <__udivsi3>
    90a8:	100b883a 	mov	r5,r2
    90ac:	a009883a 	mov	r4,r20
    90b0:	1021883a 	mov	r16,r2
    90b4:	0000af40 	call	af4 <__mulsi3>
    90b8:	b80b883a 	mov	r5,r23
    90bc:	8809883a 	mov	r4,r17
    90c0:	1029883a 	mov	r20,r2
    90c4:	0000aec0 	call	aec <__umodsi3>
    90c8:	d9400217 	ldw	r5,8(sp)
    90cc:	1004943a 	slli	r2,r2,16
    90d0:	28ffffcc 	andi	r3,r5,65535
    90d4:	10c4b03a 	or	r2,r2,r3
    90d8:	1500032e 	bgeu	r2,r20,90e8 <__umoddi3+0x4bc>
    90dc:	1585883a 	add	r2,r2,r22
    90e0:	843fffc4 	addi	r16,r16,-1
    90e4:	1580562e 	bgeu	r2,r22,9240 <__umoddi3+0x614>
    90e8:	d9800017 	ldw	r6,0(sp)
    90ec:	e022943a 	slli	r17,fp,16
    90f0:	302ed43a 	srli	r23,r6,16
    90f4:	8462b03a 	or	r17,r16,r17
    90f8:	34ffffcc 	andi	r19,r6,65535
    90fc:	882ad43a 	srli	r21,r17,16
    9100:	8c7fffcc 	andi	r17,r17,65535
    9104:	8809883a 	mov	r4,r17
    9108:	980b883a 	mov	r5,r19
    910c:	1521c83a 	sub	r16,r2,r20
    9110:	0000af40 	call	af4 <__mulsi3>
    9114:	8809883a 	mov	r4,r17
    9118:	b80b883a 	mov	r5,r23
    911c:	1029883a 	mov	r20,r2
    9120:	0000af40 	call	af4 <__mulsi3>
    9124:	980b883a 	mov	r5,r19
    9128:	a809883a 	mov	r4,r21
    912c:	1023883a 	mov	r17,r2
    9130:	0000af40 	call	af4 <__mulsi3>
    9134:	a809883a 	mov	r4,r21
    9138:	b80b883a 	mov	r5,r23
    913c:	1027883a 	mov	r19,r2
    9140:	0000af40 	call	af4 <__mulsi3>
    9144:	100b883a 	mov	r5,r2
    9148:	a004d43a 	srli	r2,r20,16
    914c:	8ce3883a 	add	r17,r17,r19
    9150:	1449883a 	add	r4,r2,r17
    9154:	24c0022e 	bgeu	r4,r19,9160 <__umoddi3+0x534>
    9158:	00800074 	movhi	r2,1
    915c:	288b883a 	add	r5,r5,r2
    9160:	2004d43a 	srli	r2,r4,16
    9164:	2008943a 	slli	r4,r4,16
    9168:	a0ffffcc 	andi	r3,r20,65535
    916c:	288d883a 	add	r6,r5,r2
    9170:	20c9883a 	add	r4,r4,r3
    9174:	81800b36 	bltu	r16,r6,91a4 <__umoddi3+0x578>
    9178:	81804026 	beq	r16,r6,927c <__umoddi3+0x650>
    917c:	818dc83a 	sub	r6,r16,r6
    9180:	00000f06 	br	91c0 <__umoddi3+0x594>
    9184:	30c5c83a 	sub	r2,r6,r3
    9188:	182d883a 	mov	r22,r3
    918c:	8084d83a 	srl	r2,r16,r2
    9190:	a8c6983a 	sll	r3,r21,r3
    9194:	9da6983a 	sll	r19,r19,r22
    9198:	85a0983a 	sll	r16,r16,r22
    919c:	18aab03a 	or	r21,r3,r2
    91a0:	003f1d06 	br	8e18 <__umoddi3+0x1ec>
    91a4:	d8c00017 	ldw	r3,0(sp)
    91a8:	20c5c83a 	sub	r2,r4,r3
    91ac:	2089803a 	cmpltu	r4,r4,r2
    91b0:	3587c83a 	sub	r3,r6,r22
    91b4:	1907c83a 	sub	r3,r3,r4
    91b8:	80cdc83a 	sub	r6,r16,r3
    91bc:	1009883a 	mov	r4,r2
    91c0:	d9400117 	ldw	r5,4(sp)
    91c4:	2905c83a 	sub	r2,r5,r4
    91c8:	2887803a 	cmpltu	r3,r5,r2
    91cc:	30c7c83a 	sub	r3,r6,r3
    91d0:	d9800317 	ldw	r6,12(sp)
    91d4:	1484d83a 	srl	r2,r2,r18
    91d8:	1988983a 	sll	r4,r3,r6
    91dc:	1c86d83a 	srl	r3,r3,r18
    91e0:	2088b03a 	or	r4,r4,r2
    91e4:	2011883a 	mov	r8,r4
    91e8:	1813883a 	mov	r9,r3
    91ec:	d9000415 	stw	r4,16(sp)
    91f0:	d8c00515 	stw	r3,20(sp)
    91f4:	003ed406 	br	8d48 <__umoddi3+0x11c>
    91f8:	01400604 	movi	r5,24
    91fc:	2805883a 	mov	r2,r5
    9200:	003ea606 	br	8c9c <__umoddi3+0x70>
    9204:	01400204 	movi	r5,8
    9208:	2805883a 	mov	r2,r5
    920c:	003ea306 	br	8c9c <__umoddi3+0x70>
    9210:	01400204 	movi	r5,8
    9214:	2805883a 	mov	r2,r5
    9218:	003edf06 	br	8d98 <__umoddi3+0x16c>
    921c:	01400204 	movi	r5,8
    9220:	2805883a 	mov	r2,r5
    9224:	003ef206 	br	8df0 <__umoddi3+0x1c4>
    9228:	01400604 	movi	r5,24
    922c:	2805883a 	mov	r2,r5
    9230:	003eef06 	br	8df0 <__umoddi3+0x1c4>
    9234:	01400604 	movi	r5,24
    9238:	2805883a 	mov	r2,r5
    923c:	003ed606 	br	8d98 <__umoddi3+0x16c>
    9240:	153fa92e 	bgeu	r2,r20,90e8 <__umoddi3+0x4bc>
    9244:	843fffc4 	addi	r16,r16,-1
    9248:	1585883a 	add	r2,r2,r22
    924c:	003fa606 	br	90e8 <__umoddi3+0x4bc>
    9250:	157f912e 	bgeu	r2,r21,9098 <__umoddi3+0x46c>
    9254:	e73fffc4 	addi	fp,fp,-1
    9258:	1585883a 	add	r2,r2,r22
    925c:	003f8e06 	br	9098 <__umoddi3+0x46c>
    9260:	157f542e 	bgeu	r2,r21,8fb4 <__umoddi3+0x388>
    9264:	14c5883a 	add	r2,r2,r19
    9268:	003f5206 	br	8fb4 <__umoddi3+0x388>
    926c:	14c5883a 	add	r2,r2,r19
    9270:	003efc06 	br	8e64 <__umoddi3+0x238>
    9274:	14c5883a 	add	r2,r2,r19
    9278:	003ea606 	br	8d14 <__umoddi3+0xe8>
    927c:	d8800117 	ldw	r2,4(sp)
    9280:	113fc836 	bltu	r2,r4,91a4 <__umoddi3+0x578>
    9284:	000d883a 	mov	r6,zero
    9288:	003fcd06 	br	91c0 <__umoddi3+0x594>

0000928c <_fpadd_parts>:
    928c:	defff804 	addi	sp,sp,-32
    9290:	dcc00315 	stw	r19,12(sp)
    9294:	2027883a 	mov	r19,r4
    9298:	21000017 	ldw	r4,0(r4)
    929c:	00c00044 	movi	r3,1
    92a0:	dd400515 	stw	r21,20(sp)
    92a4:	dd000415 	stw	r20,16(sp)
    92a8:	ddc00715 	stw	r23,28(sp)
    92ac:	dd800615 	stw	r22,24(sp)
    92b0:	dc800215 	stw	r18,8(sp)
    92b4:	dc400115 	stw	r17,4(sp)
    92b8:	dc000015 	stw	r16,0(sp)
    92bc:	282b883a 	mov	r21,r5
    92c0:	3029883a 	mov	r20,r6
    92c4:	1900632e 	bgeu	r3,r4,9454 <_fpadd_parts+0x1c8>
    92c8:	28800017 	ldw	r2,0(r5)
    92cc:	1880812e 	bgeu	r3,r2,94d4 <_fpadd_parts+0x248>
    92d0:	00c00104 	movi	r3,4
    92d4:	20c0dc26 	beq	r4,r3,9648 <_fpadd_parts+0x3bc>
    92d8:	10c07e26 	beq	r2,r3,94d4 <_fpadd_parts+0x248>
    92dc:	00c00084 	movi	r3,2
    92e0:	10c06726 	beq	r2,r3,9480 <_fpadd_parts+0x1f4>
    92e4:	20c07b26 	beq	r4,r3,94d4 <_fpadd_parts+0x248>
    92e8:	9dc00217 	ldw	r23,8(r19)
    92ec:	28c00217 	ldw	r3,8(r5)
    92f0:	9c400317 	ldw	r17,12(r19)
    92f4:	2bc00317 	ldw	r15,12(r5)
    92f8:	b8cdc83a 	sub	r6,r23,r3
    92fc:	9c800417 	ldw	r18,16(r19)
    9300:	2c000417 	ldw	r16,16(r5)
    9304:	3009883a 	mov	r4,r6
    9308:	30009716 	blt	r6,zero,9568 <_fpadd_parts+0x2dc>
    930c:	00800fc4 	movi	r2,63
    9310:	11806b16 	blt	r2,r6,94c0 <_fpadd_parts+0x234>
    9314:	0100a40e 	bge	zero,r4,95a8 <_fpadd_parts+0x31c>
    9318:	35bff804 	addi	r22,r6,-32
    931c:	b000bc16 	blt	r22,zero,9610 <_fpadd_parts+0x384>
    9320:	8596d83a 	srl	r11,r16,r22
    9324:	0019883a 	mov	r12,zero
    9328:	0013883a 	mov	r9,zero
    932c:	01000044 	movi	r4,1
    9330:	0015883a 	mov	r10,zero
    9334:	b000be16 	blt	r22,zero,9630 <_fpadd_parts+0x3a4>
    9338:	2590983a 	sll	r8,r4,r22
    933c:	000f883a 	mov	r7,zero
    9340:	00bfffc4 	movi	r2,-1
    9344:	3889883a 	add	r4,r7,r2
    9348:	408b883a 	add	r5,r8,r2
    934c:	21cd803a 	cmpltu	r6,r4,r7
    9350:	314b883a 	add	r5,r6,r5
    9354:	7904703a 	and	r2,r15,r4
    9358:	8146703a 	and	r3,r16,r5
    935c:	10c4b03a 	or	r2,r2,r3
    9360:	10000226 	beq	r2,zero,936c <_fpadd_parts+0xe0>
    9364:	02400044 	movi	r9,1
    9368:	0015883a 	mov	r10,zero
    936c:	5a5eb03a 	or	r15,r11,r9
    9370:	62a0b03a 	or	r16,r12,r10
    9374:	99400117 	ldw	r5,4(r19)
    9378:	a8800117 	ldw	r2,4(r21)
    937c:	28806e26 	beq	r5,r2,9538 <_fpadd_parts+0x2ac>
    9380:	28006626 	beq	r5,zero,951c <_fpadd_parts+0x290>
    9384:	7c45c83a 	sub	r2,r15,r17
    9388:	7889803a 	cmpltu	r4,r15,r2
    938c:	8487c83a 	sub	r3,r16,r18
    9390:	1909c83a 	sub	r4,r3,r4
    9394:	100d883a 	mov	r6,r2
    9398:	200f883a 	mov	r7,r4
    939c:	38007716 	blt	r7,zero,957c <_fpadd_parts+0x2f0>
    93a0:	a5c00215 	stw	r23,8(r20)
    93a4:	a1c00415 	stw	r7,16(r20)
    93a8:	a0000115 	stw	zero,4(r20)
    93ac:	a1800315 	stw	r6,12(r20)
    93b0:	a2000317 	ldw	r8,12(r20)
    93b4:	a2400417 	ldw	r9,16(r20)
    93b8:	00bfffc4 	movi	r2,-1
    93bc:	408b883a 	add	r5,r8,r2
    93c0:	2a09803a 	cmpltu	r4,r5,r8
    93c4:	488d883a 	add	r6,r9,r2
    93c8:	01c40034 	movhi	r7,4096
    93cc:	39ffffc4 	addi	r7,r7,-1
    93d0:	218d883a 	add	r6,r4,r6
    93d4:	39801736 	bltu	r7,r6,9434 <_fpadd_parts+0x1a8>
    93d8:	31c06526 	beq	r6,r7,9570 <_fpadd_parts+0x2e4>
    93dc:	a3000217 	ldw	r12,8(r20)
    93e0:	4209883a 	add	r4,r8,r8
    93e4:	00bfffc4 	movi	r2,-1
    93e8:	220f803a 	cmpltu	r7,r4,r8
    93ec:	4a4b883a 	add	r5,r9,r9
    93f0:	394f883a 	add	r7,r7,r5
    93f4:	2095883a 	add	r10,r4,r2
    93f8:	3897883a 	add	r11,r7,r2
    93fc:	510d803a 	cmpltu	r6,r10,r4
    9400:	6099883a 	add	r12,r12,r2
    9404:	32d7883a 	add	r11,r6,r11
    9408:	00840034 	movhi	r2,4096
    940c:	10bfffc4 	addi	r2,r2,-1
    9410:	2011883a 	mov	r8,r4
    9414:	3813883a 	mov	r9,r7
    9418:	a1000315 	stw	r4,12(r20)
    941c:	a1c00415 	stw	r7,16(r20)
    9420:	a3000215 	stw	r12,8(r20)
    9424:	12c00336 	bltu	r2,r11,9434 <_fpadd_parts+0x1a8>
    9428:	58bfed1e 	bne	r11,r2,93e0 <_fpadd_parts+0x154>
    942c:	00bfff84 	movi	r2,-2
    9430:	12bfeb2e 	bgeu	r2,r10,93e0 <_fpadd_parts+0x154>
    9434:	a2800417 	ldw	r10,16(r20)
    9438:	008000c4 	movi	r2,3
    943c:	00c80034 	movhi	r3,8192
    9440:	18ffffc4 	addi	r3,r3,-1
    9444:	a2400317 	ldw	r9,12(r20)
    9448:	a0800015 	stw	r2,0(r20)
    944c:	1a802336 	bltu	r3,r10,94dc <_fpadd_parts+0x250>
    9450:	a027883a 	mov	r19,r20
    9454:	9805883a 	mov	r2,r19
    9458:	ddc00717 	ldw	r23,28(sp)
    945c:	dd800617 	ldw	r22,24(sp)
    9460:	dd400517 	ldw	r21,20(sp)
    9464:	dd000417 	ldw	r20,16(sp)
    9468:	dcc00317 	ldw	r19,12(sp)
    946c:	dc800217 	ldw	r18,8(sp)
    9470:	dc400117 	ldw	r17,4(sp)
    9474:	dc000017 	ldw	r16,0(sp)
    9478:	dec00804 	addi	sp,sp,32
    947c:	f800283a 	ret
    9480:	20fff41e 	bne	r4,r3,9454 <_fpadd_parts+0x1c8>
    9484:	31000015 	stw	r4,0(r6)
    9488:	98800117 	ldw	r2,4(r19)
    948c:	30800115 	stw	r2,4(r6)
    9490:	98c00217 	ldw	r3,8(r19)
    9494:	30c00215 	stw	r3,8(r6)
    9498:	98800317 	ldw	r2,12(r19)
    949c:	30800315 	stw	r2,12(r6)
    94a0:	98c00417 	ldw	r3,16(r19)
    94a4:	30c00415 	stw	r3,16(r6)
    94a8:	98800117 	ldw	r2,4(r19)
    94ac:	28c00117 	ldw	r3,4(r5)
    94b0:	3027883a 	mov	r19,r6
    94b4:	10c4703a 	and	r2,r2,r3
    94b8:	30800115 	stw	r2,4(r6)
    94bc:	003fe506 	br	9454 <_fpadd_parts+0x1c8>
    94c0:	1dc02616 	blt	r3,r23,955c <_fpadd_parts+0x2d0>
    94c4:	0023883a 	mov	r17,zero
    94c8:	182f883a 	mov	r23,r3
    94cc:	0025883a 	mov	r18,zero
    94d0:	003fa806 	br	9374 <_fpadd_parts+0xe8>
    94d4:	a827883a 	mov	r19,r21
    94d8:	003fde06 	br	9454 <_fpadd_parts+0x1c8>
    94dc:	01800044 	movi	r6,1
    94e0:	500497fa 	slli	r2,r10,31
    94e4:	4808d07a 	srli	r4,r9,1
    94e8:	518ad83a 	srl	r5,r10,r6
    94ec:	a2000217 	ldw	r8,8(r20)
    94f0:	1108b03a 	or	r4,r2,r4
    94f4:	0007883a 	mov	r3,zero
    94f8:	4984703a 	and	r2,r9,r6
    94fc:	208cb03a 	or	r6,r4,r2
    9500:	28ceb03a 	or	r7,r5,r3
    9504:	42000044 	addi	r8,r8,1
    9508:	a027883a 	mov	r19,r20
    950c:	a1c00415 	stw	r7,16(r20)
    9510:	a2000215 	stw	r8,8(r20)
    9514:	a1800315 	stw	r6,12(r20)
    9518:	003fce06 	br	9454 <_fpadd_parts+0x1c8>
    951c:	8bc5c83a 	sub	r2,r17,r15
    9520:	8889803a 	cmpltu	r4,r17,r2
    9524:	9407c83a 	sub	r3,r18,r16
    9528:	1909c83a 	sub	r4,r3,r4
    952c:	100d883a 	mov	r6,r2
    9530:	200f883a 	mov	r7,r4
    9534:	003f9906 	br	939c <_fpadd_parts+0x110>
    9538:	7c45883a 	add	r2,r15,r17
    953c:	13c9803a 	cmpltu	r4,r2,r15
    9540:	8487883a 	add	r3,r16,r18
    9544:	20c9883a 	add	r4,r4,r3
    9548:	a1400115 	stw	r5,4(r20)
    954c:	a5c00215 	stw	r23,8(r20)
    9550:	a0800315 	stw	r2,12(r20)
    9554:	a1000415 	stw	r4,16(r20)
    9558:	003fb606 	br	9434 <_fpadd_parts+0x1a8>
    955c:	001f883a 	mov	r15,zero
    9560:	0021883a 	mov	r16,zero
    9564:	003f8306 	br	9374 <_fpadd_parts+0xe8>
    9568:	018dc83a 	sub	r6,zero,r6
    956c:	003f6706 	br	930c <_fpadd_parts+0x80>
    9570:	00bfff84 	movi	r2,-2
    9574:	117faf36 	bltu	r2,r5,9434 <_fpadd_parts+0x1a8>
    9578:	003f9806 	br	93dc <_fpadd_parts+0x150>
    957c:	0005883a 	mov	r2,zero
    9580:	1189c83a 	sub	r4,r2,r6
    9584:	1105803a 	cmpltu	r2,r2,r4
    9588:	01cbc83a 	sub	r5,zero,r7
    958c:	2885c83a 	sub	r2,r5,r2
    9590:	01800044 	movi	r6,1
    9594:	a1800115 	stw	r6,4(r20)
    9598:	a5c00215 	stw	r23,8(r20)
    959c:	a1000315 	stw	r4,12(r20)
    95a0:	a0800415 	stw	r2,16(r20)
    95a4:	003f8206 	br	93b0 <_fpadd_parts+0x124>
    95a8:	203f7226 	beq	r4,zero,9374 <_fpadd_parts+0xe8>
    95ac:	35bff804 	addi	r22,r6,-32
    95b0:	b9af883a 	add	r23,r23,r6
    95b4:	b0003116 	blt	r22,zero,967c <_fpadd_parts+0x3f0>
    95b8:	959ad83a 	srl	r13,r18,r22
    95bc:	001d883a 	mov	r14,zero
    95c0:	000f883a 	mov	r7,zero
    95c4:	01000044 	movi	r4,1
    95c8:	0011883a 	mov	r8,zero
    95cc:	b0002516 	blt	r22,zero,9664 <_fpadd_parts+0x3d8>
    95d0:	2594983a 	sll	r10,r4,r22
    95d4:	0013883a 	mov	r9,zero
    95d8:	00bfffc4 	movi	r2,-1
    95dc:	4889883a 	add	r4,r9,r2
    95e0:	508b883a 	add	r5,r10,r2
    95e4:	224d803a 	cmpltu	r6,r4,r9
    95e8:	314b883a 	add	r5,r6,r5
    95ec:	8904703a 	and	r2,r17,r4
    95f0:	9146703a 	and	r3,r18,r5
    95f4:	10c4b03a 	or	r2,r2,r3
    95f8:	10000226 	beq	r2,zero,9604 <_fpadd_parts+0x378>
    95fc:	01c00044 	movi	r7,1
    9600:	0011883a 	mov	r8,zero
    9604:	69e2b03a 	or	r17,r13,r7
    9608:	7224b03a 	or	r18,r14,r8
    960c:	003f5906 	br	9374 <_fpadd_parts+0xe8>
    9610:	8407883a 	add	r3,r16,r16
    9614:	008007c4 	movi	r2,31
    9618:	1185c83a 	sub	r2,r2,r6
    961c:	1886983a 	sll	r3,r3,r2
    9620:	7996d83a 	srl	r11,r15,r6
    9624:	8198d83a 	srl	r12,r16,r6
    9628:	1ad6b03a 	or	r11,r3,r11
    962c:	003f3e06 	br	9328 <_fpadd_parts+0x9c>
    9630:	2006d07a 	srli	r3,r4,1
    9634:	008007c4 	movi	r2,31
    9638:	1185c83a 	sub	r2,r2,r6
    963c:	1890d83a 	srl	r8,r3,r2
    9640:	218e983a 	sll	r7,r4,r6
    9644:	003f3e06 	br	9340 <_fpadd_parts+0xb4>
    9648:	113f821e 	bne	r2,r4,9454 <_fpadd_parts+0x1c8>
    964c:	28c00117 	ldw	r3,4(r5)
    9650:	98800117 	ldw	r2,4(r19)
    9654:	10ff7f26 	beq	r2,r3,9454 <_fpadd_parts+0x1c8>
    9658:	04c00074 	movhi	r19,1
    965c:	9cf62e04 	addi	r19,r19,-10056
    9660:	003f7c06 	br	9454 <_fpadd_parts+0x1c8>
    9664:	2006d07a 	srli	r3,r4,1
    9668:	008007c4 	movi	r2,31
    966c:	1185c83a 	sub	r2,r2,r6
    9670:	1894d83a 	srl	r10,r3,r2
    9674:	2192983a 	sll	r9,r4,r6
    9678:	003fd706 	br	95d8 <_fpadd_parts+0x34c>
    967c:	9487883a 	add	r3,r18,r18
    9680:	008007c4 	movi	r2,31
    9684:	1185c83a 	sub	r2,r2,r6
    9688:	1886983a 	sll	r3,r3,r2
    968c:	899ad83a 	srl	r13,r17,r6
    9690:	919cd83a 	srl	r14,r18,r6
    9694:	1b5ab03a 	or	r13,r3,r13
    9698:	003fc906 	br	95c0 <_fpadd_parts+0x334>

0000969c <__subdf3>:
    969c:	deffea04 	addi	sp,sp,-88
    96a0:	dcc01415 	stw	r19,80(sp)
    96a4:	dcc00404 	addi	r19,sp,16
    96a8:	2011883a 	mov	r8,r4
    96ac:	2813883a 	mov	r9,r5
    96b0:	dc401315 	stw	r17,76(sp)
    96b4:	d809883a 	mov	r4,sp
    96b8:	980b883a 	mov	r5,r19
    96bc:	dc400904 	addi	r17,sp,36
    96c0:	dfc01515 	stw	ra,84(sp)
    96c4:	da400115 	stw	r9,4(sp)
    96c8:	d9c00315 	stw	r7,12(sp)
    96cc:	da000015 	stw	r8,0(sp)
    96d0:	d9800215 	stw	r6,8(sp)
    96d4:	000a8700 	call	a870 <__unpack_d>
    96d8:	d9000204 	addi	r4,sp,8
    96dc:	880b883a 	mov	r5,r17
    96e0:	000a8700 	call	a870 <__unpack_d>
    96e4:	d8800a17 	ldw	r2,40(sp)
    96e8:	880b883a 	mov	r5,r17
    96ec:	9809883a 	mov	r4,r19
    96f0:	d9800e04 	addi	r6,sp,56
    96f4:	1080005c 	xori	r2,r2,1
    96f8:	d8800a15 	stw	r2,40(sp)
    96fc:	000928c0 	call	928c <_fpadd_parts>
    9700:	1009883a 	mov	r4,r2
    9704:	000a55c0 	call	a55c <__pack_d>
    9708:	dfc01517 	ldw	ra,84(sp)
    970c:	dcc01417 	ldw	r19,80(sp)
    9710:	dc401317 	ldw	r17,76(sp)
    9714:	dec01604 	addi	sp,sp,88
    9718:	f800283a 	ret

0000971c <__adddf3>:
    971c:	deffea04 	addi	sp,sp,-88
    9720:	dcc01415 	stw	r19,80(sp)
    9724:	dcc00404 	addi	r19,sp,16
    9728:	2011883a 	mov	r8,r4
    972c:	2813883a 	mov	r9,r5
    9730:	dc401315 	stw	r17,76(sp)
    9734:	d809883a 	mov	r4,sp
    9738:	980b883a 	mov	r5,r19
    973c:	dc400904 	addi	r17,sp,36
    9740:	dfc01515 	stw	ra,84(sp)
    9744:	da400115 	stw	r9,4(sp)
    9748:	d9c00315 	stw	r7,12(sp)
    974c:	da000015 	stw	r8,0(sp)
    9750:	d9800215 	stw	r6,8(sp)
    9754:	000a8700 	call	a870 <__unpack_d>
    9758:	d9000204 	addi	r4,sp,8
    975c:	880b883a 	mov	r5,r17
    9760:	000a8700 	call	a870 <__unpack_d>
    9764:	d9800e04 	addi	r6,sp,56
    9768:	9809883a 	mov	r4,r19
    976c:	880b883a 	mov	r5,r17
    9770:	000928c0 	call	928c <_fpadd_parts>
    9774:	1009883a 	mov	r4,r2
    9778:	000a55c0 	call	a55c <__pack_d>
    977c:	dfc01517 	ldw	ra,84(sp)
    9780:	dcc01417 	ldw	r19,80(sp)
    9784:	dc401317 	ldw	r17,76(sp)
    9788:	dec01604 	addi	sp,sp,88
    978c:	f800283a 	ret

00009790 <__muldf3>:
    9790:	deffe004 	addi	sp,sp,-128
    9794:	dc401815 	stw	r17,96(sp)
    9798:	dc400404 	addi	r17,sp,16
    979c:	2011883a 	mov	r8,r4
    97a0:	2813883a 	mov	r9,r5
    97a4:	dc001715 	stw	r16,92(sp)
    97a8:	d809883a 	mov	r4,sp
    97ac:	880b883a 	mov	r5,r17
    97b0:	dc000904 	addi	r16,sp,36
    97b4:	dfc01f15 	stw	ra,124(sp)
    97b8:	da400115 	stw	r9,4(sp)
    97bc:	d9c00315 	stw	r7,12(sp)
    97c0:	da000015 	stw	r8,0(sp)
    97c4:	d9800215 	stw	r6,8(sp)
    97c8:	ddc01e15 	stw	r23,120(sp)
    97cc:	dd801d15 	stw	r22,116(sp)
    97d0:	dd401c15 	stw	r21,112(sp)
    97d4:	dd001b15 	stw	r20,108(sp)
    97d8:	dcc01a15 	stw	r19,104(sp)
    97dc:	dc801915 	stw	r18,100(sp)
    97e0:	000a8700 	call	a870 <__unpack_d>
    97e4:	d9000204 	addi	r4,sp,8
    97e8:	800b883a 	mov	r5,r16
    97ec:	000a8700 	call	a870 <__unpack_d>
    97f0:	d9000417 	ldw	r4,16(sp)
    97f4:	00800044 	movi	r2,1
    97f8:	1100102e 	bgeu	r2,r4,983c <__muldf3+0xac>
    97fc:	d8c00917 	ldw	r3,36(sp)
    9800:	10c0062e 	bgeu	r2,r3,981c <__muldf3+0x8c>
    9804:	00800104 	movi	r2,4
    9808:	20800a26 	beq	r4,r2,9834 <__muldf3+0xa4>
    980c:	1880cc26 	beq	r3,r2,9b40 <__muldf3+0x3b0>
    9810:	00800084 	movi	r2,2
    9814:	20800926 	beq	r4,r2,983c <__muldf3+0xac>
    9818:	1880191e 	bne	r3,r2,9880 <__muldf3+0xf0>
    981c:	d8c00a17 	ldw	r3,40(sp)
    9820:	d8800517 	ldw	r2,20(sp)
    9824:	8009883a 	mov	r4,r16
    9828:	10c4c03a 	cmpne	r2,r2,r3
    982c:	d8800a15 	stw	r2,40(sp)
    9830:	00000706 	br	9850 <__muldf3+0xc0>
    9834:	00800084 	movi	r2,2
    9838:	1880c326 	beq	r3,r2,9b48 <__muldf3+0x3b8>
    983c:	d8800517 	ldw	r2,20(sp)
    9840:	d8c00a17 	ldw	r3,40(sp)
    9844:	8809883a 	mov	r4,r17
    9848:	10c4c03a 	cmpne	r2,r2,r3
    984c:	d8800515 	stw	r2,20(sp)
    9850:	000a55c0 	call	a55c <__pack_d>
    9854:	dfc01f17 	ldw	ra,124(sp)
    9858:	ddc01e17 	ldw	r23,120(sp)
    985c:	dd801d17 	ldw	r22,116(sp)
    9860:	dd401c17 	ldw	r21,112(sp)
    9864:	dd001b17 	ldw	r20,108(sp)
    9868:	dcc01a17 	ldw	r19,104(sp)
    986c:	dc801917 	ldw	r18,100(sp)
    9870:	dc401817 	ldw	r17,96(sp)
    9874:	dc001717 	ldw	r16,92(sp)
    9878:	dec02004 	addi	sp,sp,128
    987c:	f800283a 	ret
    9880:	dd800717 	ldw	r22,28(sp)
    9884:	dc800c17 	ldw	r18,48(sp)
    9888:	002b883a 	mov	r21,zero
    988c:	0023883a 	mov	r17,zero
    9890:	a80b883a 	mov	r5,r21
    9894:	b00d883a 	mov	r6,r22
    9898:	880f883a 	mov	r7,r17
    989c:	ddc00817 	ldw	r23,32(sp)
    98a0:	dcc00d17 	ldw	r19,52(sp)
    98a4:	9009883a 	mov	r4,r18
    98a8:	000a3b80 	call	a3b8 <__muldi3>
    98ac:	001b883a 	mov	r13,zero
    98b0:	680f883a 	mov	r7,r13
    98b4:	b009883a 	mov	r4,r22
    98b8:	000b883a 	mov	r5,zero
    98bc:	980d883a 	mov	r6,r19
    98c0:	b82d883a 	mov	r22,r23
    98c4:	002f883a 	mov	r23,zero
    98c8:	db401615 	stw	r13,88(sp)
    98cc:	d8801315 	stw	r2,76(sp)
    98d0:	d8c01415 	stw	r3,80(sp)
    98d4:	dcc01515 	stw	r19,84(sp)
    98d8:	000a3b80 	call	a3b8 <__muldi3>
    98dc:	b00d883a 	mov	r6,r22
    98e0:	000b883a 	mov	r5,zero
    98e4:	9009883a 	mov	r4,r18
    98e8:	b80f883a 	mov	r7,r23
    98ec:	1021883a 	mov	r16,r2
    98f0:	1823883a 	mov	r17,r3
    98f4:	000a3b80 	call	a3b8 <__muldi3>
    98f8:	8085883a 	add	r2,r16,r2
    98fc:	140d803a 	cmpltu	r6,r2,r16
    9900:	88c7883a 	add	r3,r17,r3
    9904:	30cd883a 	add	r6,r6,r3
    9908:	1029883a 	mov	r20,r2
    990c:	302b883a 	mov	r21,r6
    9910:	da801317 	ldw	r10,76(sp)
    9914:	dac01417 	ldw	r11,80(sp)
    9918:	db001517 	ldw	r12,84(sp)
    991c:	db401617 	ldw	r13,88(sp)
    9920:	3440612e 	bgeu	r6,r17,9aa8 <__muldf3+0x318>
    9924:	0009883a 	mov	r4,zero
    9928:	5105883a 	add	r2,r10,r4
    992c:	128d803a 	cmpltu	r6,r2,r10
    9930:	5d07883a 	add	r3,r11,r20
    9934:	30cd883a 	add	r6,r6,r3
    9938:	0021883a 	mov	r16,zero
    993c:	04400044 	movi	r17,1
    9940:	1025883a 	mov	r18,r2
    9944:	3027883a 	mov	r19,r6
    9948:	32c06236 	bltu	r6,r11,9ad4 <__muldf3+0x344>
    994c:	59807a26 	beq	r11,r6,9b38 <__muldf3+0x3a8>
    9950:	680b883a 	mov	r5,r13
    9954:	b80f883a 	mov	r7,r23
    9958:	6009883a 	mov	r4,r12
    995c:	b00d883a 	mov	r6,r22
    9960:	000a3b80 	call	a3b8 <__muldi3>
    9964:	1009883a 	mov	r4,r2
    9968:	000f883a 	mov	r7,zero
    996c:	1545883a 	add	r2,r2,r21
    9970:	1111803a 	cmpltu	r8,r2,r4
    9974:	19c7883a 	add	r3,r3,r7
    9978:	40c7883a 	add	r3,r8,r3
    997c:	88cb883a 	add	r5,r17,r3
    9980:	d8c00617 	ldw	r3,24(sp)
    9984:	8089883a 	add	r4,r16,r2
    9988:	d8800b17 	ldw	r2,44(sp)
    998c:	18c00104 	addi	r3,r3,4
    9990:	240d803a 	cmpltu	r6,r4,r16
    9994:	10c7883a 	add	r3,r2,r3
    9998:	2013883a 	mov	r9,r4
    999c:	d8800a17 	ldw	r2,40(sp)
    99a0:	d9000517 	ldw	r4,20(sp)
    99a4:	314d883a 	add	r6,r6,r5
    99a8:	3015883a 	mov	r10,r6
    99ac:	2088c03a 	cmpne	r4,r4,r2
    99b0:	00880034 	movhi	r2,8192
    99b4:	10bfffc4 	addi	r2,r2,-1
    99b8:	d9000f15 	stw	r4,60(sp)
    99bc:	d8c01015 	stw	r3,64(sp)
    99c0:	1180162e 	bgeu	r2,r6,9a1c <__muldf3+0x28c>
    99c4:	1811883a 	mov	r8,r3
    99c8:	101f883a 	mov	r15,r2
    99cc:	980497fa 	slli	r2,r19,31
    99d0:	9016d07a 	srli	r11,r18,1
    99d4:	500697fa 	slli	r3,r10,31
    99d8:	480cd07a 	srli	r6,r9,1
    99dc:	500ed07a 	srli	r7,r10,1
    99e0:	12d6b03a 	or	r11,r2,r11
    99e4:	00800044 	movi	r2,1
    99e8:	198cb03a 	or	r6,r3,r6
    99ec:	4888703a 	and	r4,r9,r2
    99f0:	9818d07a 	srli	r12,r19,1
    99f4:	001b883a 	mov	r13,zero
    99f8:	03a00034 	movhi	r14,32768
    99fc:	3013883a 	mov	r9,r6
    9a00:	3815883a 	mov	r10,r7
    9a04:	4091883a 	add	r8,r8,r2
    9a08:	20000226 	beq	r4,zero,9a14 <__muldf3+0x284>
    9a0c:	5b64b03a 	or	r18,r11,r13
    9a10:	63a6b03a 	or	r19,r12,r14
    9a14:	7abfed36 	bltu	r15,r10,99cc <__muldf3+0x23c>
    9a18:	da001015 	stw	r8,64(sp)
    9a1c:	00840034 	movhi	r2,4096
    9a20:	10bfffc4 	addi	r2,r2,-1
    9a24:	12801436 	bltu	r2,r10,9a78 <__muldf3+0x2e8>
    9a28:	da001017 	ldw	r8,64(sp)
    9a2c:	101f883a 	mov	r15,r2
    9a30:	4a45883a 	add	r2,r9,r9
    9a34:	124d803a 	cmpltu	r6,r2,r9
    9a38:	5287883a 	add	r3,r10,r10
    9a3c:	9497883a 	add	r11,r18,r18
    9a40:	5c8f803a 	cmpltu	r7,r11,r18
    9a44:	9cd9883a 	add	r12,r19,r19
    9a48:	01000044 	movi	r4,1
    9a4c:	30cd883a 	add	r6,r6,r3
    9a50:	3b0f883a 	add	r7,r7,r12
    9a54:	423fffc4 	addi	r8,r8,-1
    9a58:	1013883a 	mov	r9,r2
    9a5c:	3015883a 	mov	r10,r6
    9a60:	111ab03a 	or	r13,r2,r4
    9a64:	98003016 	blt	r19,zero,9b28 <__muldf3+0x398>
    9a68:	5825883a 	mov	r18,r11
    9a6c:	3827883a 	mov	r19,r7
    9a70:	7abfef2e 	bgeu	r15,r10,9a30 <__muldf3+0x2a0>
    9a74:	da001015 	stw	r8,64(sp)
    9a78:	00803fc4 	movi	r2,255
    9a7c:	488e703a 	and	r7,r9,r2
    9a80:	00802004 	movi	r2,128
    9a84:	0007883a 	mov	r3,zero
    9a88:	0011883a 	mov	r8,zero
    9a8c:	38801826 	beq	r7,r2,9af0 <__muldf3+0x360>
    9a90:	008000c4 	movi	r2,3
    9a94:	d9000e04 	addi	r4,sp,56
    9a98:	da801215 	stw	r10,72(sp)
    9a9c:	d8800e15 	stw	r2,56(sp)
    9aa0:	da401115 	stw	r9,68(sp)
    9aa4:	003f6a06 	br	9850 <__muldf3+0xc0>
    9aa8:	89802126 	beq	r17,r6,9b30 <__muldf3+0x3a0>
    9aac:	0009883a 	mov	r4,zero
    9ab0:	5105883a 	add	r2,r10,r4
    9ab4:	128d803a 	cmpltu	r6,r2,r10
    9ab8:	5d07883a 	add	r3,r11,r20
    9abc:	30cd883a 	add	r6,r6,r3
    9ac0:	0021883a 	mov	r16,zero
    9ac4:	0023883a 	mov	r17,zero
    9ac8:	1025883a 	mov	r18,r2
    9acc:	3027883a 	mov	r19,r6
    9ad0:	32ff9e2e 	bgeu	r6,r11,994c <__muldf3+0x1bc>
    9ad4:	00800044 	movi	r2,1
    9ad8:	8089883a 	add	r4,r16,r2
    9adc:	240d803a 	cmpltu	r6,r4,r16
    9ae0:	344d883a 	add	r6,r6,r17
    9ae4:	2021883a 	mov	r16,r4
    9ae8:	3023883a 	mov	r17,r6
    9aec:	003f9806 	br	9950 <__muldf3+0x1c0>
    9af0:	403fe71e 	bne	r8,zero,9a90 <__muldf3+0x300>
    9af4:	01004004 	movi	r4,256
    9af8:	4904703a 	and	r2,r9,r4
    9afc:	10c4b03a 	or	r2,r2,r3
    9b00:	103fe31e 	bne	r2,zero,9a90 <__muldf3+0x300>
    9b04:	94c4b03a 	or	r2,r18,r19
    9b08:	103fe126 	beq	r2,zero,9a90 <__muldf3+0x300>
    9b0c:	49c5883a 	add	r2,r9,r7
    9b10:	1251803a 	cmpltu	r8,r2,r9
    9b14:	4291883a 	add	r8,r8,r10
    9b18:	013fc004 	movi	r4,-256
    9b1c:	1112703a 	and	r9,r2,r4
    9b20:	4015883a 	mov	r10,r8
    9b24:	003fda06 	br	9a90 <__muldf3+0x300>
    9b28:	6813883a 	mov	r9,r13
    9b2c:	003fce06 	br	9a68 <__muldf3+0x2d8>
    9b30:	143f7c36 	bltu	r2,r16,9924 <__muldf3+0x194>
    9b34:	003fdd06 	br	9aac <__muldf3+0x31c>
    9b38:	12bf852e 	bgeu	r2,r10,9950 <__muldf3+0x1c0>
    9b3c:	003fe506 	br	9ad4 <__muldf3+0x344>
    9b40:	00800084 	movi	r2,2
    9b44:	20bf351e 	bne	r4,r2,981c <__muldf3+0x8c>
    9b48:	01000074 	movhi	r4,1
    9b4c:	21362e04 	addi	r4,r4,-10056
    9b50:	003f3f06 	br	9850 <__muldf3+0xc0>

00009b54 <__divdf3>:
    9b54:	deffed04 	addi	sp,sp,-76
    9b58:	dcc01115 	stw	r19,68(sp)
    9b5c:	dcc00404 	addi	r19,sp,16
    9b60:	2011883a 	mov	r8,r4
    9b64:	2813883a 	mov	r9,r5
    9b68:	dc000e15 	stw	r16,56(sp)
    9b6c:	d809883a 	mov	r4,sp
    9b70:	980b883a 	mov	r5,r19
    9b74:	dc000904 	addi	r16,sp,36
    9b78:	dfc01215 	stw	ra,72(sp)
    9b7c:	da400115 	stw	r9,4(sp)
    9b80:	d9c00315 	stw	r7,12(sp)
    9b84:	da000015 	stw	r8,0(sp)
    9b88:	d9800215 	stw	r6,8(sp)
    9b8c:	dc801015 	stw	r18,64(sp)
    9b90:	dc400f15 	stw	r17,60(sp)
    9b94:	000a8700 	call	a870 <__unpack_d>
    9b98:	d9000204 	addi	r4,sp,8
    9b9c:	800b883a 	mov	r5,r16
    9ba0:	000a8700 	call	a870 <__unpack_d>
    9ba4:	d9000417 	ldw	r4,16(sp)
    9ba8:	00800044 	movi	r2,1
    9bac:	11000b2e 	bgeu	r2,r4,9bdc <__divdf3+0x88>
    9bb0:	d9400917 	ldw	r5,36(sp)
    9bb4:	1140762e 	bgeu	r2,r5,9d90 <__divdf3+0x23c>
    9bb8:	d8800517 	ldw	r2,20(sp)
    9bbc:	d8c00a17 	ldw	r3,40(sp)
    9bc0:	01800104 	movi	r6,4
    9bc4:	10c4f03a 	xor	r2,r2,r3
    9bc8:	d8800515 	stw	r2,20(sp)
    9bcc:	21800226 	beq	r4,r6,9bd8 <__divdf3+0x84>
    9bd0:	00800084 	movi	r2,2
    9bd4:	2080141e 	bne	r4,r2,9c28 <__divdf3+0xd4>
    9bd8:	29000926 	beq	r5,r4,9c00 <__divdf3+0xac>
    9bdc:	9809883a 	mov	r4,r19
    9be0:	000a55c0 	call	a55c <__pack_d>
    9be4:	dfc01217 	ldw	ra,72(sp)
    9be8:	dcc01117 	ldw	r19,68(sp)
    9bec:	dc801017 	ldw	r18,64(sp)
    9bf0:	dc400f17 	ldw	r17,60(sp)
    9bf4:	dc000e17 	ldw	r16,56(sp)
    9bf8:	dec01304 	addi	sp,sp,76
    9bfc:	f800283a 	ret
    9c00:	01000074 	movhi	r4,1
    9c04:	21362e04 	addi	r4,r4,-10056
    9c08:	000a55c0 	call	a55c <__pack_d>
    9c0c:	dfc01217 	ldw	ra,72(sp)
    9c10:	dcc01117 	ldw	r19,68(sp)
    9c14:	dc801017 	ldw	r18,64(sp)
    9c18:	dc400f17 	ldw	r17,60(sp)
    9c1c:	dc000e17 	ldw	r16,56(sp)
    9c20:	dec01304 	addi	sp,sp,76
    9c24:	f800283a 	ret
    9c28:	29805b26 	beq	r5,r6,9d98 <__divdf3+0x244>
    9c2c:	28802d26 	beq	r5,r2,9ce4 <__divdf3+0x190>
    9c30:	d8c00617 	ldw	r3,24(sp)
    9c34:	d8800b17 	ldw	r2,44(sp)
    9c38:	d9c00817 	ldw	r7,32(sp)
    9c3c:	dc400d17 	ldw	r17,52(sp)
    9c40:	188bc83a 	sub	r5,r3,r2
    9c44:	d9800717 	ldw	r6,28(sp)
    9c48:	dc000c17 	ldw	r16,48(sp)
    9c4c:	d9400615 	stw	r5,24(sp)
    9c50:	3c403836 	bltu	r7,r17,9d34 <__divdf3+0x1e0>
    9c54:	89c03626 	beq	r17,r7,9d30 <__divdf3+0x1dc>
    9c58:	0015883a 	mov	r10,zero
    9c5c:	001d883a 	mov	r14,zero
    9c60:	02c40034 	movhi	r11,4096
    9c64:	001f883a 	mov	r15,zero
    9c68:	003f883a 	mov	ra,zero
    9c6c:	04800f44 	movi	r18,61
    9c70:	00000f06 	br	9cb0 <__divdf3+0x15c>
    9c74:	601d883a 	mov	r14,r12
    9c78:	681f883a 	mov	r15,r13
    9c7c:	400d883a 	mov	r6,r8
    9c80:	100f883a 	mov	r7,r2
    9c84:	3191883a 	add	r8,r6,r6
    9c88:	5808d07a 	srli	r4,r11,1
    9c8c:	4185803a 	cmpltu	r2,r8,r6
    9c90:	39d3883a 	add	r9,r7,r7
    9c94:	28c6b03a 	or	r3,r5,r3
    9c98:	1245883a 	add	r2,r2,r9
    9c9c:	1815883a 	mov	r10,r3
    9ca0:	2017883a 	mov	r11,r4
    9ca4:	400d883a 	mov	r6,r8
    9ca8:	100f883a 	mov	r7,r2
    9cac:	fc801726 	beq	ra,r18,9d0c <__divdf3+0x1b8>
    9cb0:	580a97fa 	slli	r5,r11,31
    9cb4:	5006d07a 	srli	r3,r10,1
    9cb8:	ffc00044 	addi	ra,ra,1
    9cbc:	3c7ff136 	bltu	r7,r17,9c84 <__divdf3+0x130>
    9cc0:	3411c83a 	sub	r8,r6,r16
    9cc4:	3205803a 	cmpltu	r2,r6,r8
    9cc8:	3c53c83a 	sub	r9,r7,r17
    9ccc:	7298b03a 	or	r12,r14,r10
    9cd0:	7adab03a 	or	r13,r15,r11
    9cd4:	4885c83a 	sub	r2,r9,r2
    9cd8:	89ffe61e 	bne	r17,r7,9c74 <__divdf3+0x120>
    9cdc:	343fe936 	bltu	r6,r16,9c84 <__divdf3+0x130>
    9ce0:	003fe406 	br	9c74 <__divdf3+0x120>
    9ce4:	9809883a 	mov	r4,r19
    9ce8:	d9800415 	stw	r6,16(sp)
    9cec:	000a55c0 	call	a55c <__pack_d>
    9cf0:	dfc01217 	ldw	ra,72(sp)
    9cf4:	dcc01117 	ldw	r19,68(sp)
    9cf8:	dc801017 	ldw	r18,64(sp)
    9cfc:	dc400f17 	ldw	r17,60(sp)
    9d00:	dc000e17 	ldw	r16,56(sp)
    9d04:	dec01304 	addi	sp,sp,76
    9d08:	f800283a 	ret
    9d0c:	00803fc4 	movi	r2,255
    9d10:	7090703a 	and	r8,r14,r2
    9d14:	00802004 	movi	r2,128
    9d18:	0007883a 	mov	r3,zero
    9d1c:	0013883a 	mov	r9,zero
    9d20:	40800d26 	beq	r8,r2,9d58 <__divdf3+0x204>
    9d24:	dbc00815 	stw	r15,32(sp)
    9d28:	db800715 	stw	r14,28(sp)
    9d2c:	003fab06 	br	9bdc <__divdf3+0x88>
    9d30:	343fc92e 	bgeu	r6,r16,9c58 <__divdf3+0x104>
    9d34:	3185883a 	add	r2,r6,r6
    9d38:	1189803a 	cmpltu	r4,r2,r6
    9d3c:	39c7883a 	add	r3,r7,r7
    9d40:	20c9883a 	add	r4,r4,r3
    9d44:	297fffc4 	addi	r5,r5,-1
    9d48:	100d883a 	mov	r6,r2
    9d4c:	200f883a 	mov	r7,r4
    9d50:	d9400615 	stw	r5,24(sp)
    9d54:	003fc006 	br	9c58 <__divdf3+0x104>
    9d58:	483ff21e 	bne	r9,zero,9d24 <__divdf3+0x1d0>
    9d5c:	01004004 	movi	r4,256
    9d60:	7104703a 	and	r2,r14,r4
    9d64:	10c4b03a 	or	r2,r2,r3
    9d68:	103fee1e 	bne	r2,zero,9d24 <__divdf3+0x1d0>
    9d6c:	31c4b03a 	or	r2,r6,r7
    9d70:	103fec26 	beq	r2,zero,9d24 <__divdf3+0x1d0>
    9d74:	7205883a 	add	r2,r14,r8
    9d78:	1391803a 	cmpltu	r8,r2,r14
    9d7c:	43d1883a 	add	r8,r8,r15
    9d80:	013fc004 	movi	r4,-256
    9d84:	111c703a 	and	r14,r2,r4
    9d88:	401f883a 	mov	r15,r8
    9d8c:	003fe506 	br	9d24 <__divdf3+0x1d0>
    9d90:	8009883a 	mov	r4,r16
    9d94:	003f9206 	br	9be0 <__divdf3+0x8c>
    9d98:	9809883a 	mov	r4,r19
    9d9c:	d8000715 	stw	zero,28(sp)
    9da0:	d8000815 	stw	zero,32(sp)
    9da4:	d8000615 	stw	zero,24(sp)
    9da8:	003f8d06 	br	9be0 <__divdf3+0x8c>

00009dac <__eqdf2>:
    9dac:	deffef04 	addi	sp,sp,-68
    9db0:	dc400f15 	stw	r17,60(sp)
    9db4:	dc400404 	addi	r17,sp,16
    9db8:	2005883a 	mov	r2,r4
    9dbc:	2807883a 	mov	r3,r5
    9dc0:	dc000e15 	stw	r16,56(sp)
    9dc4:	d809883a 	mov	r4,sp
    9dc8:	880b883a 	mov	r5,r17
    9dcc:	dc000904 	addi	r16,sp,36
    9dd0:	d8c00115 	stw	r3,4(sp)
    9dd4:	d8800015 	stw	r2,0(sp)
    9dd8:	d9800215 	stw	r6,8(sp)
    9ddc:	dfc01015 	stw	ra,64(sp)
    9de0:	d9c00315 	stw	r7,12(sp)
    9de4:	000a8700 	call	a870 <__unpack_d>
    9de8:	d9000204 	addi	r4,sp,8
    9dec:	800b883a 	mov	r5,r16
    9df0:	000a8700 	call	a870 <__unpack_d>
    9df4:	d8800417 	ldw	r2,16(sp)
    9df8:	00c00044 	movi	r3,1
    9dfc:	180d883a 	mov	r6,r3
    9e00:	1880062e 	bgeu	r3,r2,9e1c <__eqdf2+0x70>
    9e04:	d8800917 	ldw	r2,36(sp)
    9e08:	8809883a 	mov	r4,r17
    9e0c:	800b883a 	mov	r5,r16
    9e10:	1880022e 	bgeu	r3,r2,9e1c <__eqdf2+0x70>
    9e14:	000a9a80 	call	a9a8 <__fpcmp_parts_d>
    9e18:	100d883a 	mov	r6,r2
    9e1c:	3005883a 	mov	r2,r6
    9e20:	dfc01017 	ldw	ra,64(sp)
    9e24:	dc400f17 	ldw	r17,60(sp)
    9e28:	dc000e17 	ldw	r16,56(sp)
    9e2c:	dec01104 	addi	sp,sp,68
    9e30:	f800283a 	ret

00009e34 <__nedf2>:
    9e34:	deffef04 	addi	sp,sp,-68
    9e38:	dc400f15 	stw	r17,60(sp)
    9e3c:	dc400404 	addi	r17,sp,16
    9e40:	2005883a 	mov	r2,r4
    9e44:	2807883a 	mov	r3,r5
    9e48:	dc000e15 	stw	r16,56(sp)
    9e4c:	d809883a 	mov	r4,sp
    9e50:	880b883a 	mov	r5,r17
    9e54:	dc000904 	addi	r16,sp,36
    9e58:	d8c00115 	stw	r3,4(sp)
    9e5c:	d8800015 	stw	r2,0(sp)
    9e60:	d9800215 	stw	r6,8(sp)
    9e64:	dfc01015 	stw	ra,64(sp)
    9e68:	d9c00315 	stw	r7,12(sp)
    9e6c:	000a8700 	call	a870 <__unpack_d>
    9e70:	d9000204 	addi	r4,sp,8
    9e74:	800b883a 	mov	r5,r16
    9e78:	000a8700 	call	a870 <__unpack_d>
    9e7c:	d8800417 	ldw	r2,16(sp)
    9e80:	00c00044 	movi	r3,1
    9e84:	180d883a 	mov	r6,r3
    9e88:	1880062e 	bgeu	r3,r2,9ea4 <__nedf2+0x70>
    9e8c:	d8800917 	ldw	r2,36(sp)
    9e90:	8809883a 	mov	r4,r17
    9e94:	800b883a 	mov	r5,r16
    9e98:	1880022e 	bgeu	r3,r2,9ea4 <__nedf2+0x70>
    9e9c:	000a9a80 	call	a9a8 <__fpcmp_parts_d>
    9ea0:	100d883a 	mov	r6,r2
    9ea4:	3005883a 	mov	r2,r6
    9ea8:	dfc01017 	ldw	ra,64(sp)
    9eac:	dc400f17 	ldw	r17,60(sp)
    9eb0:	dc000e17 	ldw	r16,56(sp)
    9eb4:	dec01104 	addi	sp,sp,68
    9eb8:	f800283a 	ret

00009ebc <__gtdf2>:
    9ebc:	deffef04 	addi	sp,sp,-68
    9ec0:	dc400f15 	stw	r17,60(sp)
    9ec4:	dc400404 	addi	r17,sp,16
    9ec8:	2005883a 	mov	r2,r4
    9ecc:	2807883a 	mov	r3,r5
    9ed0:	dc000e15 	stw	r16,56(sp)
    9ed4:	d809883a 	mov	r4,sp
    9ed8:	880b883a 	mov	r5,r17
    9edc:	dc000904 	addi	r16,sp,36
    9ee0:	d8c00115 	stw	r3,4(sp)
    9ee4:	d8800015 	stw	r2,0(sp)
    9ee8:	d9800215 	stw	r6,8(sp)
    9eec:	dfc01015 	stw	ra,64(sp)
    9ef0:	d9c00315 	stw	r7,12(sp)
    9ef4:	000a8700 	call	a870 <__unpack_d>
    9ef8:	d9000204 	addi	r4,sp,8
    9efc:	800b883a 	mov	r5,r16
    9f00:	000a8700 	call	a870 <__unpack_d>
    9f04:	d8800417 	ldw	r2,16(sp)
    9f08:	00c00044 	movi	r3,1
    9f0c:	01bfffc4 	movi	r6,-1
    9f10:	1880062e 	bgeu	r3,r2,9f2c <__gtdf2+0x70>
    9f14:	d8800917 	ldw	r2,36(sp)
    9f18:	8809883a 	mov	r4,r17
    9f1c:	800b883a 	mov	r5,r16
    9f20:	1880022e 	bgeu	r3,r2,9f2c <__gtdf2+0x70>
    9f24:	000a9a80 	call	a9a8 <__fpcmp_parts_d>
    9f28:	100d883a 	mov	r6,r2
    9f2c:	3005883a 	mov	r2,r6
    9f30:	dfc01017 	ldw	ra,64(sp)
    9f34:	dc400f17 	ldw	r17,60(sp)
    9f38:	dc000e17 	ldw	r16,56(sp)
    9f3c:	dec01104 	addi	sp,sp,68
    9f40:	f800283a 	ret

00009f44 <__gedf2>:
    9f44:	deffef04 	addi	sp,sp,-68
    9f48:	dc400f15 	stw	r17,60(sp)
    9f4c:	dc400404 	addi	r17,sp,16
    9f50:	2005883a 	mov	r2,r4
    9f54:	2807883a 	mov	r3,r5
    9f58:	dc000e15 	stw	r16,56(sp)
    9f5c:	d809883a 	mov	r4,sp
    9f60:	880b883a 	mov	r5,r17
    9f64:	dc000904 	addi	r16,sp,36
    9f68:	d8c00115 	stw	r3,4(sp)
    9f6c:	d8800015 	stw	r2,0(sp)
    9f70:	d9800215 	stw	r6,8(sp)
    9f74:	dfc01015 	stw	ra,64(sp)
    9f78:	d9c00315 	stw	r7,12(sp)
    9f7c:	000a8700 	call	a870 <__unpack_d>
    9f80:	d9000204 	addi	r4,sp,8
    9f84:	800b883a 	mov	r5,r16
    9f88:	000a8700 	call	a870 <__unpack_d>
    9f8c:	d8800417 	ldw	r2,16(sp)
    9f90:	00c00044 	movi	r3,1
    9f94:	01bfffc4 	movi	r6,-1
    9f98:	1880062e 	bgeu	r3,r2,9fb4 <__gedf2+0x70>
    9f9c:	d8800917 	ldw	r2,36(sp)
    9fa0:	8809883a 	mov	r4,r17
    9fa4:	800b883a 	mov	r5,r16
    9fa8:	1880022e 	bgeu	r3,r2,9fb4 <__gedf2+0x70>
    9fac:	000a9a80 	call	a9a8 <__fpcmp_parts_d>
    9fb0:	100d883a 	mov	r6,r2
    9fb4:	3005883a 	mov	r2,r6
    9fb8:	dfc01017 	ldw	ra,64(sp)
    9fbc:	dc400f17 	ldw	r17,60(sp)
    9fc0:	dc000e17 	ldw	r16,56(sp)
    9fc4:	dec01104 	addi	sp,sp,68
    9fc8:	f800283a 	ret

00009fcc <__ltdf2>:
    9fcc:	deffef04 	addi	sp,sp,-68
    9fd0:	dc400f15 	stw	r17,60(sp)
    9fd4:	dc400404 	addi	r17,sp,16
    9fd8:	2005883a 	mov	r2,r4
    9fdc:	2807883a 	mov	r3,r5
    9fe0:	dc000e15 	stw	r16,56(sp)
    9fe4:	d809883a 	mov	r4,sp
    9fe8:	880b883a 	mov	r5,r17
    9fec:	dc000904 	addi	r16,sp,36
    9ff0:	d8c00115 	stw	r3,4(sp)
    9ff4:	d8800015 	stw	r2,0(sp)
    9ff8:	d9800215 	stw	r6,8(sp)
    9ffc:	dfc01015 	stw	ra,64(sp)
    a000:	d9c00315 	stw	r7,12(sp)
    a004:	000a8700 	call	a870 <__unpack_d>
    a008:	d9000204 	addi	r4,sp,8
    a00c:	800b883a 	mov	r5,r16
    a010:	000a8700 	call	a870 <__unpack_d>
    a014:	d8800417 	ldw	r2,16(sp)
    a018:	00c00044 	movi	r3,1
    a01c:	180d883a 	mov	r6,r3
    a020:	1880062e 	bgeu	r3,r2,a03c <__ltdf2+0x70>
    a024:	d8800917 	ldw	r2,36(sp)
    a028:	8809883a 	mov	r4,r17
    a02c:	800b883a 	mov	r5,r16
    a030:	1880022e 	bgeu	r3,r2,a03c <__ltdf2+0x70>
    a034:	000a9a80 	call	a9a8 <__fpcmp_parts_d>
    a038:	100d883a 	mov	r6,r2
    a03c:	3005883a 	mov	r2,r6
    a040:	dfc01017 	ldw	ra,64(sp)
    a044:	dc400f17 	ldw	r17,60(sp)
    a048:	dc000e17 	ldw	r16,56(sp)
    a04c:	dec01104 	addi	sp,sp,68
    a050:	f800283a 	ret

0000a054 <__floatsidf>:
    a054:	2006d7fa 	srli	r3,r4,31
    a058:	defff604 	addi	sp,sp,-40
    a05c:	008000c4 	movi	r2,3
    a060:	dfc00915 	stw	ra,36(sp)
    a064:	dcc00815 	stw	r19,32(sp)
    a068:	dc800715 	stw	r18,28(sp)
    a06c:	dc400615 	stw	r17,24(sp)
    a070:	dc000515 	stw	r16,20(sp)
    a074:	d8800015 	stw	r2,0(sp)
    a078:	d8c00115 	stw	r3,4(sp)
    a07c:	20000f1e 	bne	r4,zero,a0bc <__floatsidf+0x68>
    a080:	00800084 	movi	r2,2
    a084:	d8800015 	stw	r2,0(sp)
    a088:	d809883a 	mov	r4,sp
    a08c:	000a55c0 	call	a55c <__pack_d>
    a090:	1009883a 	mov	r4,r2
    a094:	180b883a 	mov	r5,r3
    a098:	2005883a 	mov	r2,r4
    a09c:	2807883a 	mov	r3,r5
    a0a0:	dfc00917 	ldw	ra,36(sp)
    a0a4:	dcc00817 	ldw	r19,32(sp)
    a0a8:	dc800717 	ldw	r18,28(sp)
    a0ac:	dc400617 	ldw	r17,24(sp)
    a0b0:	dc000517 	ldw	r16,20(sp)
    a0b4:	dec00a04 	addi	sp,sp,40
    a0b8:	f800283a 	ret
    a0bc:	00800f04 	movi	r2,60
    a0c0:	1807003a 	cmpeq	r3,r3,zero
    a0c4:	d8800215 	stw	r2,8(sp)
    a0c8:	18001126 	beq	r3,zero,a110 <__floatsidf+0xbc>
    a0cc:	0027883a 	mov	r19,zero
    a0d0:	2025883a 	mov	r18,r4
    a0d4:	d9000315 	stw	r4,12(sp)
    a0d8:	dcc00415 	stw	r19,16(sp)
    a0dc:	000a4dc0 	call	a4dc <__clzsi2>
    a0e0:	11000744 	addi	r4,r2,29
    a0e4:	013fe80e 	bge	zero,r4,a088 <__floatsidf+0x34>
    a0e8:	10bfff44 	addi	r2,r2,-3
    a0ec:	10000c16 	blt	r2,zero,a120 <__floatsidf+0xcc>
    a0f0:	90a2983a 	sll	r17,r18,r2
    a0f4:	0021883a 	mov	r16,zero
    a0f8:	d8800217 	ldw	r2,8(sp)
    a0fc:	dc400415 	stw	r17,16(sp)
    a100:	dc000315 	stw	r16,12(sp)
    a104:	1105c83a 	sub	r2,r2,r4
    a108:	d8800215 	stw	r2,8(sp)
    a10c:	003fde06 	br	a088 <__floatsidf+0x34>
    a110:	00a00034 	movhi	r2,32768
    a114:	20800a26 	beq	r4,r2,a140 <__floatsidf+0xec>
    a118:	0109c83a 	sub	r4,zero,r4
    a11c:	003feb06 	br	a0cc <__floatsidf+0x78>
    a120:	9006d07a 	srli	r3,r18,1
    a124:	008007c4 	movi	r2,31
    a128:	1105c83a 	sub	r2,r2,r4
    a12c:	1886d83a 	srl	r3,r3,r2
    a130:	9922983a 	sll	r17,r19,r4
    a134:	9120983a 	sll	r16,r18,r4
    a138:	1c62b03a 	or	r17,r3,r17
    a13c:	003fee06 	br	a0f8 <__floatsidf+0xa4>
    a140:	0009883a 	mov	r4,zero
    a144:	01707834 	movhi	r5,49632
    a148:	003fd306 	br	a098 <__floatsidf+0x44>

0000a14c <__fixdfsi>:
    a14c:	defff804 	addi	sp,sp,-32
    a150:	2005883a 	mov	r2,r4
    a154:	2807883a 	mov	r3,r5
    a158:	d809883a 	mov	r4,sp
    a15c:	d9400204 	addi	r5,sp,8
    a160:	d8c00115 	stw	r3,4(sp)
    a164:	d8800015 	stw	r2,0(sp)
    a168:	dfc00715 	stw	ra,28(sp)
    a16c:	000a8700 	call	a870 <__unpack_d>
    a170:	d8c00217 	ldw	r3,8(sp)
    a174:	00800084 	movi	r2,2
    a178:	1880051e 	bne	r3,r2,a190 <__fixdfsi+0x44>
    a17c:	0007883a 	mov	r3,zero
    a180:	1805883a 	mov	r2,r3
    a184:	dfc00717 	ldw	ra,28(sp)
    a188:	dec00804 	addi	sp,sp,32
    a18c:	f800283a 	ret
    a190:	00800044 	movi	r2,1
    a194:	10fff92e 	bgeu	r2,r3,a17c <__fixdfsi+0x30>
    a198:	00800104 	movi	r2,4
    a19c:	18800426 	beq	r3,r2,a1b0 <__fixdfsi+0x64>
    a1a0:	d8c00417 	ldw	r3,16(sp)
    a1a4:	183ff516 	blt	r3,zero,a17c <__fixdfsi+0x30>
    a1a8:	00800784 	movi	r2,30
    a1ac:	10c0080e 	bge	r2,r3,a1d0 <__fixdfsi+0x84>
    a1b0:	d8800317 	ldw	r2,12(sp)
    a1b4:	1000121e 	bne	r2,zero,a200 <__fixdfsi+0xb4>
    a1b8:	00e00034 	movhi	r3,32768
    a1bc:	18ffffc4 	addi	r3,r3,-1
    a1c0:	1805883a 	mov	r2,r3
    a1c4:	dfc00717 	ldw	ra,28(sp)
    a1c8:	dec00804 	addi	sp,sp,32
    a1cc:	f800283a 	ret
    a1d0:	00800f04 	movi	r2,60
    a1d4:	10d1c83a 	sub	r8,r2,r3
    a1d8:	40bff804 	addi	r2,r8,-32
    a1dc:	d9800517 	ldw	r6,20(sp)
    a1e0:	d9c00617 	ldw	r7,24(sp)
    a1e4:	10000816 	blt	r2,zero,a208 <__fixdfsi+0xbc>
    a1e8:	3888d83a 	srl	r4,r7,r2
    a1ec:	d8800317 	ldw	r2,12(sp)
    a1f0:	2007883a 	mov	r3,r4
    a1f4:	103fe226 	beq	r2,zero,a180 <__fixdfsi+0x34>
    a1f8:	0107c83a 	sub	r3,zero,r4
    a1fc:	003fe006 	br	a180 <__fixdfsi+0x34>
    a200:	00e00034 	movhi	r3,32768
    a204:	003fde06 	br	a180 <__fixdfsi+0x34>
    a208:	39c7883a 	add	r3,r7,r7
    a20c:	008007c4 	movi	r2,31
    a210:	1205c83a 	sub	r2,r2,r8
    a214:	1886983a 	sll	r3,r3,r2
    a218:	3208d83a 	srl	r4,r6,r8
    a21c:	1908b03a 	or	r4,r3,r4
    a220:	003ff206 	br	a1ec <__fixdfsi+0xa0>

0000a224 <__floatunsidf>:
    a224:	defff204 	addi	sp,sp,-56
    a228:	dfc00d15 	stw	ra,52(sp)
    a22c:	ddc00c15 	stw	r23,48(sp)
    a230:	dd800b15 	stw	r22,44(sp)
    a234:	dd400a15 	stw	r21,40(sp)
    a238:	dd000915 	stw	r20,36(sp)
    a23c:	dcc00815 	stw	r19,32(sp)
    a240:	dc800715 	stw	r18,28(sp)
    a244:	dc400615 	stw	r17,24(sp)
    a248:	dc000515 	stw	r16,20(sp)
    a24c:	d8000115 	stw	zero,4(sp)
    a250:	20000f1e 	bne	r4,zero,a290 <__floatunsidf+0x6c>
    a254:	00800084 	movi	r2,2
    a258:	d8800015 	stw	r2,0(sp)
    a25c:	d809883a 	mov	r4,sp
    a260:	000a55c0 	call	a55c <__pack_d>
    a264:	dfc00d17 	ldw	ra,52(sp)
    a268:	ddc00c17 	ldw	r23,48(sp)
    a26c:	dd800b17 	ldw	r22,44(sp)
    a270:	dd400a17 	ldw	r21,40(sp)
    a274:	dd000917 	ldw	r20,36(sp)
    a278:	dcc00817 	ldw	r19,32(sp)
    a27c:	dc800717 	ldw	r18,28(sp)
    a280:	dc400617 	ldw	r17,24(sp)
    a284:	dc000517 	ldw	r16,20(sp)
    a288:	dec00e04 	addi	sp,sp,56
    a28c:	f800283a 	ret
    a290:	008000c4 	movi	r2,3
    a294:	00c00f04 	movi	r3,60
    a298:	002f883a 	mov	r23,zero
    a29c:	202d883a 	mov	r22,r4
    a2a0:	d8800015 	stw	r2,0(sp)
    a2a4:	d8c00215 	stw	r3,8(sp)
    a2a8:	d9000315 	stw	r4,12(sp)
    a2ac:	ddc00415 	stw	r23,16(sp)
    a2b0:	000a4dc0 	call	a4dc <__clzsi2>
    a2b4:	12400744 	addi	r9,r2,29
    a2b8:	48000b16 	blt	r9,zero,a2e8 <__floatunsidf+0xc4>
    a2bc:	483fe726 	beq	r9,zero,a25c <__floatunsidf+0x38>
    a2c0:	10bfff44 	addi	r2,r2,-3
    a2c4:	10002e16 	blt	r2,zero,a380 <__floatunsidf+0x15c>
    a2c8:	b0a2983a 	sll	r17,r22,r2
    a2cc:	0021883a 	mov	r16,zero
    a2d0:	d8800217 	ldw	r2,8(sp)
    a2d4:	dc400415 	stw	r17,16(sp)
    a2d8:	dc000315 	stw	r16,12(sp)
    a2dc:	1245c83a 	sub	r2,r2,r9
    a2e0:	d8800215 	stw	r2,8(sp)
    a2e4:	003fdd06 	br	a25c <__floatunsidf+0x38>
    a2e8:	0255c83a 	sub	r10,zero,r9
    a2ec:	51bff804 	addi	r6,r10,-32
    a2f0:	30001b16 	blt	r6,zero,a360 <__floatunsidf+0x13c>
    a2f4:	b9a8d83a 	srl	r20,r23,r6
    a2f8:	002b883a 	mov	r21,zero
    a2fc:	000f883a 	mov	r7,zero
    a300:	01000044 	movi	r4,1
    a304:	0011883a 	mov	r8,zero
    a308:	30002516 	blt	r6,zero,a3a0 <__floatunsidf+0x17c>
    a30c:	21a6983a 	sll	r19,r4,r6
    a310:	0025883a 	mov	r18,zero
    a314:	00bfffc4 	movi	r2,-1
    a318:	9089883a 	add	r4,r18,r2
    a31c:	988b883a 	add	r5,r19,r2
    a320:	248d803a 	cmpltu	r6,r4,r18
    a324:	314b883a 	add	r5,r6,r5
    a328:	b104703a 	and	r2,r22,r4
    a32c:	b946703a 	and	r3,r23,r5
    a330:	10c4b03a 	or	r2,r2,r3
    a334:	10000226 	beq	r2,zero,a340 <__floatunsidf+0x11c>
    a338:	01c00044 	movi	r7,1
    a33c:	0011883a 	mov	r8,zero
    a340:	d9000217 	ldw	r4,8(sp)
    a344:	a1c4b03a 	or	r2,r20,r7
    a348:	aa06b03a 	or	r3,r21,r8
    a34c:	2249c83a 	sub	r4,r4,r9
    a350:	d8c00415 	stw	r3,16(sp)
    a354:	d9000215 	stw	r4,8(sp)
    a358:	d8800315 	stw	r2,12(sp)
    a35c:	003fbf06 	br	a25c <__floatunsidf+0x38>
    a360:	bdc7883a 	add	r3,r23,r23
    a364:	008007c4 	movi	r2,31
    a368:	1285c83a 	sub	r2,r2,r10
    a36c:	1886983a 	sll	r3,r3,r2
    a370:	b2a8d83a 	srl	r20,r22,r10
    a374:	baaad83a 	srl	r21,r23,r10
    a378:	1d28b03a 	or	r20,r3,r20
    a37c:	003fdf06 	br	a2fc <__floatunsidf+0xd8>
    a380:	b006d07a 	srli	r3,r22,1
    a384:	008007c4 	movi	r2,31
    a388:	1245c83a 	sub	r2,r2,r9
    a38c:	1886d83a 	srl	r3,r3,r2
    a390:	ba62983a 	sll	r17,r23,r9
    a394:	b260983a 	sll	r16,r22,r9
    a398:	1c62b03a 	or	r17,r3,r17
    a39c:	003fcc06 	br	a2d0 <__floatunsidf+0xac>
    a3a0:	2006d07a 	srli	r3,r4,1
    a3a4:	008007c4 	movi	r2,31
    a3a8:	1285c83a 	sub	r2,r2,r10
    a3ac:	18a6d83a 	srl	r19,r3,r2
    a3b0:	22a4983a 	sll	r18,r4,r10
    a3b4:	003fd706 	br	a314 <__floatunsidf+0xf0>

0000a3b8 <__muldi3>:
    a3b8:	defff204 	addi	sp,sp,-56
    a3bc:	df000c15 	stw	fp,48(sp)
    a3c0:	3038d43a 	srli	fp,r6,16
    a3c4:	dd000815 	stw	r20,32(sp)
    a3c8:	dc400515 	stw	r17,20(sp)
    a3cc:	2028d43a 	srli	r20,r4,16
    a3d0:	247fffcc 	andi	r17,r4,65535
    a3d4:	dc000415 	stw	r16,16(sp)
    a3d8:	343fffcc 	andi	r16,r6,65535
    a3dc:	dcc00715 	stw	r19,28(sp)
    a3e0:	d9000015 	stw	r4,0(sp)
    a3e4:	2827883a 	mov	r19,r5
    a3e8:	8809883a 	mov	r4,r17
    a3ec:	d9400115 	stw	r5,4(sp)
    a3f0:	800b883a 	mov	r5,r16
    a3f4:	d9800215 	stw	r6,8(sp)
    a3f8:	dfc00d15 	stw	ra,52(sp)
    a3fc:	d9c00315 	stw	r7,12(sp)
    a400:	dd800a15 	stw	r22,40(sp)
    a404:	dd400915 	stw	r21,36(sp)
    a408:	302d883a 	mov	r22,r6
    a40c:	ddc00b15 	stw	r23,44(sp)
    a410:	dc800615 	stw	r18,24(sp)
    a414:	0000af40 	call	af4 <__mulsi3>
    a418:	8809883a 	mov	r4,r17
    a41c:	e00b883a 	mov	r5,fp
    a420:	102b883a 	mov	r21,r2
    a424:	0000af40 	call	af4 <__mulsi3>
    a428:	800b883a 	mov	r5,r16
    a42c:	a009883a 	mov	r4,r20
    a430:	1023883a 	mov	r17,r2
    a434:	0000af40 	call	af4 <__mulsi3>
    a438:	a009883a 	mov	r4,r20
    a43c:	e00b883a 	mov	r5,fp
    a440:	1021883a 	mov	r16,r2
    a444:	0000af40 	call	af4 <__mulsi3>
    a448:	a8ffffcc 	andi	r3,r21,65535
    a44c:	a82ad43a 	srli	r21,r21,16
    a450:	8c23883a 	add	r17,r17,r16
    a454:	1011883a 	mov	r8,r2
    a458:	ac6b883a 	add	r21,r21,r17
    a45c:	a804943a 	slli	r2,r21,16
    a460:	b009883a 	mov	r4,r22
    a464:	980b883a 	mov	r5,r19
    a468:	10c7883a 	add	r3,r2,r3
    a46c:	a812d43a 	srli	r9,r21,16
    a470:	180d883a 	mov	r6,r3
    a474:	ac00022e 	bgeu	r21,r16,a480 <__muldi3+0xc8>
    a478:	00800074 	movhi	r2,1
    a47c:	4091883a 	add	r8,r8,r2
    a480:	4267883a 	add	r19,r8,r9
    a484:	302d883a 	mov	r22,r6
    a488:	0000af40 	call	af4 <__mulsi3>
    a48c:	d9400317 	ldw	r5,12(sp)
    a490:	d9000017 	ldw	r4,0(sp)
    a494:	1023883a 	mov	r17,r2
    a498:	0000af40 	call	af4 <__mulsi3>
    a49c:	14cb883a 	add	r5,r2,r19
    a4a0:	894b883a 	add	r5,r17,r5
    a4a4:	b005883a 	mov	r2,r22
    a4a8:	2807883a 	mov	r3,r5
    a4ac:	dfc00d17 	ldw	ra,52(sp)
    a4b0:	df000c17 	ldw	fp,48(sp)
    a4b4:	ddc00b17 	ldw	r23,44(sp)
    a4b8:	dd800a17 	ldw	r22,40(sp)
    a4bc:	dd400917 	ldw	r21,36(sp)
    a4c0:	dd000817 	ldw	r20,32(sp)
    a4c4:	dcc00717 	ldw	r19,28(sp)
    a4c8:	dc800617 	ldw	r18,24(sp)
    a4cc:	dc400517 	ldw	r17,20(sp)
    a4d0:	dc000417 	ldw	r16,16(sp)
    a4d4:	dec00e04 	addi	sp,sp,56
    a4d8:	f800283a 	ret

0000a4dc <__clzsi2>:
    a4dc:	00bfffd4 	movui	r2,65535
    a4e0:	11000e36 	bltu	r2,r4,a51c <__clzsi2+0x40>
    a4e4:	00803fc4 	movi	r2,255
    a4e8:	01400204 	movi	r5,8
    a4ec:	0007883a 	mov	r3,zero
    a4f0:	11001036 	bltu	r2,r4,a534 <__clzsi2+0x58>
    a4f4:	000b883a 	mov	r5,zero
    a4f8:	20c6d83a 	srl	r3,r4,r3
    a4fc:	00800074 	movhi	r2,1
    a500:	10b63304 	addi	r2,r2,-10036
    a504:	1887883a 	add	r3,r3,r2
    a508:	18800003 	ldbu	r2,0(r3)
    a50c:	00c00804 	movi	r3,32
    a510:	2885883a 	add	r2,r5,r2
    a514:	1885c83a 	sub	r2,r3,r2
    a518:	f800283a 	ret
    a51c:	01400404 	movi	r5,16
    a520:	00804034 	movhi	r2,256
    a524:	10bfffc4 	addi	r2,r2,-1
    a528:	2807883a 	mov	r3,r5
    a52c:	113ff22e 	bgeu	r2,r4,a4f8 <__clzsi2+0x1c>
    a530:	01400604 	movi	r5,24
    a534:	2807883a 	mov	r3,r5
    a538:	20c6d83a 	srl	r3,r4,r3
    a53c:	00800074 	movhi	r2,1
    a540:	10b63304 	addi	r2,r2,-10036
    a544:	1887883a 	add	r3,r3,r2
    a548:	18800003 	ldbu	r2,0(r3)
    a54c:	00c00804 	movi	r3,32
    a550:	2885883a 	add	r2,r5,r2
    a554:	1885c83a 	sub	r2,r3,r2
    a558:	f800283a 	ret

0000a55c <__pack_d>:
    a55c:	20c00017 	ldw	r3,0(r4)
    a560:	defffd04 	addi	sp,sp,-12
    a564:	dc000015 	stw	r16,0(sp)
    a568:	dc800215 	stw	r18,8(sp)
    a56c:	dc400115 	stw	r17,4(sp)
    a570:	00800044 	movi	r2,1
    a574:	22000317 	ldw	r8,12(r4)
    a578:	001f883a 	mov	r15,zero
    a57c:	22400417 	ldw	r9,16(r4)
    a580:	24000117 	ldw	r16,4(r4)
    a584:	10c0552e 	bgeu	r2,r3,a6dc <__pack_d+0x180>
    a588:	00800104 	movi	r2,4
    a58c:	18804f26 	beq	r3,r2,a6cc <__pack_d+0x170>
    a590:	00800084 	movi	r2,2
    a594:	18800226 	beq	r3,r2,a5a0 <__pack_d+0x44>
    a598:	4244b03a 	or	r2,r8,r9
    a59c:	10001a1e 	bne	r2,zero,a608 <__pack_d+0xac>
    a5a0:	000d883a 	mov	r6,zero
    a5a4:	000f883a 	mov	r7,zero
    a5a8:	0011883a 	mov	r8,zero
    a5ac:	00800434 	movhi	r2,16
    a5b0:	10bfffc4 	addi	r2,r2,-1
    a5b4:	301d883a 	mov	r14,r6
    a5b8:	3884703a 	and	r2,r7,r2
    a5bc:	400a953a 	slli	r5,r8,20
    a5c0:	79bffc2c 	andhi	r6,r15,65520
    a5c4:	308cb03a 	or	r6,r6,r2
    a5c8:	00e00434 	movhi	r3,32784
    a5cc:	18ffffc4 	addi	r3,r3,-1
    a5d0:	800497fa 	slli	r2,r16,31
    a5d4:	30c6703a 	and	r3,r6,r3
    a5d8:	1946b03a 	or	r3,r3,r5
    a5dc:	01600034 	movhi	r5,32768
    a5e0:	297fffc4 	addi	r5,r5,-1
    a5e4:	194a703a 	and	r5,r3,r5
    a5e8:	288ab03a 	or	r5,r5,r2
    a5ec:	2807883a 	mov	r3,r5
    a5f0:	7005883a 	mov	r2,r14
    a5f4:	dc800217 	ldw	r18,8(sp)
    a5f8:	dc400117 	ldw	r17,4(sp)
    a5fc:	dc000017 	ldw	r16,0(sp)
    a600:	dec00304 	addi	sp,sp,12
    a604:	f800283a 	ret
    a608:	21000217 	ldw	r4,8(r4)
    a60c:	00bf0084 	movi	r2,-1022
    a610:	20803f16 	blt	r4,r2,a710 <__pack_d+0x1b4>
    a614:	0080ffc4 	movi	r2,1023
    a618:	11002c16 	blt	r2,r4,a6cc <__pack_d+0x170>
    a61c:	00803fc4 	movi	r2,255
    a620:	408c703a 	and	r6,r8,r2
    a624:	00802004 	movi	r2,128
    a628:	0007883a 	mov	r3,zero
    a62c:	000f883a 	mov	r7,zero
    a630:	2280ffc4 	addi	r10,r4,1023
    a634:	30801e26 	beq	r6,r2,a6b0 <__pack_d+0x154>
    a638:	00801fc4 	movi	r2,127
    a63c:	4089883a 	add	r4,r8,r2
    a640:	220d803a 	cmpltu	r6,r4,r8
    a644:	324d883a 	add	r6,r6,r9
    a648:	2011883a 	mov	r8,r4
    a64c:	3013883a 	mov	r9,r6
    a650:	00880034 	movhi	r2,8192
    a654:	10bfffc4 	addi	r2,r2,-1
    a658:	12400d36 	bltu	r2,r9,a690 <__pack_d+0x134>
    a65c:	4804963a 	slli	r2,r9,24
    a660:	400cd23a 	srli	r6,r8,8
    a664:	480ed23a 	srli	r7,r9,8
    a668:	013fffc4 	movi	r4,-1
    a66c:	118cb03a 	or	r6,r2,r6
    a670:	01400434 	movhi	r5,16
    a674:	297fffc4 	addi	r5,r5,-1
    a678:	3104703a 	and	r2,r6,r4
    a67c:	3946703a 	and	r3,r7,r5
    a680:	5201ffcc 	andi	r8,r10,2047
    a684:	100d883a 	mov	r6,r2
    a688:	180f883a 	mov	r7,r3
    a68c:	003fc706 	br	a5ac <__pack_d+0x50>
    a690:	480897fa 	slli	r4,r9,31
    a694:	4004d07a 	srli	r2,r8,1
    a698:	4806d07a 	srli	r3,r9,1
    a69c:	52800044 	addi	r10,r10,1
    a6a0:	2084b03a 	or	r2,r4,r2
    a6a4:	1011883a 	mov	r8,r2
    a6a8:	1813883a 	mov	r9,r3
    a6ac:	003feb06 	br	a65c <__pack_d+0x100>
    a6b0:	383fe11e 	bne	r7,zero,a638 <__pack_d+0xdc>
    a6b4:	01004004 	movi	r4,256
    a6b8:	4104703a 	and	r2,r8,r4
    a6bc:	10c4b03a 	or	r2,r2,r3
    a6c0:	103fe326 	beq	r2,zero,a650 <__pack_d+0xf4>
    a6c4:	3005883a 	mov	r2,r6
    a6c8:	003fdc06 	br	a63c <__pack_d+0xe0>
    a6cc:	000d883a 	mov	r6,zero
    a6d0:	000f883a 	mov	r7,zero
    a6d4:	0201ffc4 	movi	r8,2047
    a6d8:	003fb406 	br	a5ac <__pack_d+0x50>
    a6dc:	0005883a 	mov	r2,zero
    a6e0:	00c00234 	movhi	r3,8
    a6e4:	408cb03a 	or	r6,r8,r2
    a6e8:	48ceb03a 	or	r7,r9,r3
    a6ec:	013fffc4 	movi	r4,-1
    a6f0:	01400434 	movhi	r5,16
    a6f4:	297fffc4 	addi	r5,r5,-1
    a6f8:	3104703a 	and	r2,r6,r4
    a6fc:	3946703a 	and	r3,r7,r5
    a700:	100d883a 	mov	r6,r2
    a704:	180f883a 	mov	r7,r3
    a708:	0201ffc4 	movi	r8,2047
    a70c:	003fa706 	br	a5ac <__pack_d+0x50>
    a710:	1109c83a 	sub	r4,r2,r4
    a714:	00800e04 	movi	r2,56
    a718:	11004316 	blt	r2,r4,a828 <__pack_d+0x2cc>
    a71c:	21fff804 	addi	r7,r4,-32
    a720:	38004516 	blt	r7,zero,a838 <__pack_d+0x2dc>
    a724:	49d8d83a 	srl	r12,r9,r7
    a728:	001b883a 	mov	r13,zero
    a72c:	0023883a 	mov	r17,zero
    a730:	01400044 	movi	r5,1
    a734:	0025883a 	mov	r18,zero
    a738:	38004716 	blt	r7,zero,a858 <__pack_d+0x2fc>
    a73c:	29d6983a 	sll	r11,r5,r7
    a740:	0015883a 	mov	r10,zero
    a744:	00bfffc4 	movi	r2,-1
    a748:	5089883a 	add	r4,r10,r2
    a74c:	588b883a 	add	r5,r11,r2
    a750:	228d803a 	cmpltu	r6,r4,r10
    a754:	314b883a 	add	r5,r6,r5
    a758:	4104703a 	and	r2,r8,r4
    a75c:	4946703a 	and	r3,r9,r5
    a760:	10c4b03a 	or	r2,r2,r3
    a764:	10000226 	beq	r2,zero,a770 <__pack_d+0x214>
    a768:	04400044 	movi	r17,1
    a76c:	0025883a 	mov	r18,zero
    a770:	00803fc4 	movi	r2,255
    a774:	644eb03a 	or	r7,r12,r17
    a778:	3892703a 	and	r9,r7,r2
    a77c:	00802004 	movi	r2,128
    a780:	6c90b03a 	or	r8,r13,r18
    a784:	0015883a 	mov	r10,zero
    a788:	48801626 	beq	r9,r2,a7e4 <__pack_d+0x288>
    a78c:	01001fc4 	movi	r4,127
    a790:	3905883a 	add	r2,r7,r4
    a794:	11cd803a 	cmpltu	r6,r2,r7
    a798:	320d883a 	add	r6,r6,r8
    a79c:	100f883a 	mov	r7,r2
    a7a0:	00840034 	movhi	r2,4096
    a7a4:	10bfffc4 	addi	r2,r2,-1
    a7a8:	3011883a 	mov	r8,r6
    a7ac:	0007883a 	mov	r3,zero
    a7b0:	11801b36 	bltu	r2,r6,a820 <__pack_d+0x2c4>
    a7b4:	4004963a 	slli	r2,r8,24
    a7b8:	3808d23a 	srli	r4,r7,8
    a7bc:	400ad23a 	srli	r5,r8,8
    a7c0:	1813883a 	mov	r9,r3
    a7c4:	1108b03a 	or	r4,r2,r4
    a7c8:	00bfffc4 	movi	r2,-1
    a7cc:	00c00434 	movhi	r3,16
    a7d0:	18ffffc4 	addi	r3,r3,-1
    a7d4:	208c703a 	and	r6,r4,r2
    a7d8:	28ce703a 	and	r7,r5,r3
    a7dc:	4a01ffcc 	andi	r8,r9,2047
    a7e0:	003f7206 	br	a5ac <__pack_d+0x50>
    a7e4:	503fe91e 	bne	r10,zero,a78c <__pack_d+0x230>
    a7e8:	01004004 	movi	r4,256
    a7ec:	3904703a 	and	r2,r7,r4
    a7f0:	0007883a 	mov	r3,zero
    a7f4:	10c4b03a 	or	r2,r2,r3
    a7f8:	10000626 	beq	r2,zero,a814 <__pack_d+0x2b8>
    a7fc:	3a45883a 	add	r2,r7,r9
    a800:	11cd803a 	cmpltu	r6,r2,r7
    a804:	320d883a 	add	r6,r6,r8
    a808:	100f883a 	mov	r7,r2
    a80c:	3011883a 	mov	r8,r6
    a810:	0007883a 	mov	r3,zero
    a814:	00840034 	movhi	r2,4096
    a818:	10bfffc4 	addi	r2,r2,-1
    a81c:	123fe52e 	bgeu	r2,r8,a7b4 <__pack_d+0x258>
    a820:	00c00044 	movi	r3,1
    a824:	003fe306 	br	a7b4 <__pack_d+0x258>
    a828:	0009883a 	mov	r4,zero
    a82c:	0013883a 	mov	r9,zero
    a830:	000b883a 	mov	r5,zero
    a834:	003fe406 	br	a7c8 <__pack_d+0x26c>
    a838:	4a47883a 	add	r3,r9,r9
    a83c:	008007c4 	movi	r2,31
    a840:	1105c83a 	sub	r2,r2,r4
    a844:	1886983a 	sll	r3,r3,r2
    a848:	4118d83a 	srl	r12,r8,r4
    a84c:	491ad83a 	srl	r13,r9,r4
    a850:	1b18b03a 	or	r12,r3,r12
    a854:	003fb506 	br	a72c <__pack_d+0x1d0>
    a858:	2806d07a 	srli	r3,r5,1
    a85c:	008007c4 	movi	r2,31
    a860:	1105c83a 	sub	r2,r2,r4
    a864:	1896d83a 	srl	r11,r3,r2
    a868:	2914983a 	sll	r10,r5,r4
    a86c:	003fb506 	br	a744 <__pack_d+0x1e8>

0000a870 <__unpack_d>:
    a870:	20c00117 	ldw	r3,4(r4)
    a874:	22400017 	ldw	r9,0(r4)
    a878:	00800434 	movhi	r2,16
    a87c:	10bfffc4 	addi	r2,r2,-1
    a880:	1808d53a 	srli	r4,r3,20
    a884:	180cd7fa 	srli	r6,r3,31
    a888:	1894703a 	and	r10,r3,r2
    a88c:	2201ffcc 	andi	r8,r4,2047
    a890:	281b883a 	mov	r13,r5
    a894:	4817883a 	mov	r11,r9
    a898:	29800115 	stw	r6,4(r5)
    a89c:	5019883a 	mov	r12,r10
    a8a0:	40001e1e 	bne	r8,zero,a91c <__unpack_d+0xac>
    a8a4:	4a84b03a 	or	r2,r9,r10
    a8a8:	10001926 	beq	r2,zero,a910 <__unpack_d+0xa0>
    a8ac:	4804d63a 	srli	r2,r9,24
    a8b0:	500c923a 	slli	r6,r10,8
    a8b4:	013f0084 	movi	r4,-1022
    a8b8:	00c40034 	movhi	r3,4096
    a8bc:	18ffffc4 	addi	r3,r3,-1
    a8c0:	118cb03a 	or	r6,r2,r6
    a8c4:	008000c4 	movi	r2,3
    a8c8:	480a923a 	slli	r5,r9,8
    a8cc:	68800015 	stw	r2,0(r13)
    a8d0:	69000215 	stw	r4,8(r13)
    a8d4:	19800b36 	bltu	r3,r6,a904 <__unpack_d+0x94>
    a8d8:	200f883a 	mov	r7,r4
    a8dc:	1811883a 	mov	r8,r3
    a8e0:	2945883a 	add	r2,r5,r5
    a8e4:	1149803a 	cmpltu	r4,r2,r5
    a8e8:	3187883a 	add	r3,r6,r6
    a8ec:	20c9883a 	add	r4,r4,r3
    a8f0:	100b883a 	mov	r5,r2
    a8f4:	200d883a 	mov	r6,r4
    a8f8:	39ffffc4 	addi	r7,r7,-1
    a8fc:	413ff82e 	bgeu	r8,r4,a8e0 <__unpack_d+0x70>
    a900:	69c00215 	stw	r7,8(r13)
    a904:	69800415 	stw	r6,16(r13)
    a908:	69400315 	stw	r5,12(r13)
    a90c:	f800283a 	ret
    a910:	00800084 	movi	r2,2
    a914:	28800015 	stw	r2,0(r5)
    a918:	f800283a 	ret
    a91c:	0081ffc4 	movi	r2,2047
    a920:	40800f26 	beq	r8,r2,a960 <__unpack_d+0xf0>
    a924:	480cd63a 	srli	r6,r9,24
    a928:	5006923a 	slli	r3,r10,8
    a92c:	4804923a 	slli	r2,r9,8
    a930:	0009883a 	mov	r4,zero
    a934:	30c6b03a 	or	r3,r6,r3
    a938:	01440034 	movhi	r5,4096
    a93c:	110cb03a 	or	r6,r2,r4
    a940:	423f0044 	addi	r8,r8,-1023
    a944:	194eb03a 	or	r7,r3,r5
    a948:	008000c4 	movi	r2,3
    a94c:	69c00415 	stw	r7,16(r13)
    a950:	6a000215 	stw	r8,8(r13)
    a954:	68800015 	stw	r2,0(r13)
    a958:	69800315 	stw	r6,12(r13)
    a95c:	f800283a 	ret
    a960:	4a84b03a 	or	r2,r9,r10
    a964:	1000031e 	bne	r2,zero,a974 <__unpack_d+0x104>
    a968:	00800104 	movi	r2,4
    a96c:	28800015 	stw	r2,0(r5)
    a970:	f800283a 	ret
    a974:	0009883a 	mov	r4,zero
    a978:	01400234 	movhi	r5,8
    a97c:	4904703a 	and	r2,r9,r4
    a980:	5146703a 	and	r3,r10,r5
    a984:	10c4b03a 	or	r2,r2,r3
    a988:	10000526 	beq	r2,zero,a9a0 <__unpack_d+0x130>
    a98c:	00800044 	movi	r2,1
    a990:	68800015 	stw	r2,0(r13)
    a994:	6b000415 	stw	r12,16(r13)
    a998:	6ac00315 	stw	r11,12(r13)
    a99c:	f800283a 	ret
    a9a0:	68000015 	stw	zero,0(r13)
    a9a4:	003ffb06 	br	a994 <__unpack_d+0x124>

0000a9a8 <__fpcmp_parts_d>:
    a9a8:	21800017 	ldw	r6,0(r4)
    a9ac:	00c00044 	movi	r3,1
    a9b0:	19800a2e 	bgeu	r3,r6,a9dc <__fpcmp_parts_d+0x34>
    a9b4:	28800017 	ldw	r2,0(r5)
    a9b8:	1880082e 	bgeu	r3,r2,a9dc <__fpcmp_parts_d+0x34>
    a9bc:	00c00104 	movi	r3,4
    a9c0:	30c02626 	beq	r6,r3,aa5c <__fpcmp_parts_d+0xb4>
    a9c4:	10c02226 	beq	r2,r3,aa50 <__fpcmp_parts_d+0xa8>
    a9c8:	00c00084 	movi	r3,2
    a9cc:	30c00526 	beq	r6,r3,a9e4 <__fpcmp_parts_d+0x3c>
    a9d0:	10c0071e 	bne	r2,r3,a9f0 <__fpcmp_parts_d+0x48>
    a9d4:	20800117 	ldw	r2,4(r4)
    a9d8:	1000091e 	bne	r2,zero,aa00 <__fpcmp_parts_d+0x58>
    a9dc:	00800044 	movi	r2,1
    a9e0:	f800283a 	ret
    a9e4:	10c01a1e 	bne	r2,r3,aa50 <__fpcmp_parts_d+0xa8>
    a9e8:	0005883a 	mov	r2,zero
    a9ec:	f800283a 	ret
    a9f0:	22000117 	ldw	r8,4(r4)
    a9f4:	28800117 	ldw	r2,4(r5)
    a9f8:	40800326 	beq	r8,r2,aa08 <__fpcmp_parts_d+0x60>
    a9fc:	403ff726 	beq	r8,zero,a9dc <__fpcmp_parts_d+0x34>
    aa00:	00bfffc4 	movi	r2,-1
    aa04:	f800283a 	ret
    aa08:	20c00217 	ldw	r3,8(r4)
    aa0c:	28800217 	ldw	r2,8(r5)
    aa10:	10fffa16 	blt	r2,r3,a9fc <__fpcmp_parts_d+0x54>
    aa14:	18800916 	blt	r3,r2,aa3c <__fpcmp_parts_d+0x94>
    aa18:	21c00417 	ldw	r7,16(r4)
    aa1c:	28c00417 	ldw	r3,16(r5)
    aa20:	21800317 	ldw	r6,12(r4)
    aa24:	28800317 	ldw	r2,12(r5)
    aa28:	19fff436 	bltu	r3,r7,a9fc <__fpcmp_parts_d+0x54>
    aa2c:	38c00526 	beq	r7,r3,aa44 <__fpcmp_parts_d+0x9c>
    aa30:	38c00236 	bltu	r7,r3,aa3c <__fpcmp_parts_d+0x94>
    aa34:	19ffec1e 	bne	r3,r7,a9e8 <__fpcmp_parts_d+0x40>
    aa38:	30bfeb2e 	bgeu	r6,r2,a9e8 <__fpcmp_parts_d+0x40>
    aa3c:	403fe71e 	bne	r8,zero,a9dc <__fpcmp_parts_d+0x34>
    aa40:	003fef06 	br	aa00 <__fpcmp_parts_d+0x58>
    aa44:	11bffa2e 	bgeu	r2,r6,aa30 <__fpcmp_parts_d+0x88>
    aa48:	403fe426 	beq	r8,zero,a9dc <__fpcmp_parts_d+0x34>
    aa4c:	003fec06 	br	aa00 <__fpcmp_parts_d+0x58>
    aa50:	28800117 	ldw	r2,4(r5)
    aa54:	103fe11e 	bne	r2,zero,a9dc <__fpcmp_parts_d+0x34>
    aa58:	003fe906 	br	aa00 <__fpcmp_parts_d+0x58>
    aa5c:	11bfdd1e 	bne	r2,r6,a9d4 <__fpcmp_parts_d+0x2c>
    aa60:	28c00117 	ldw	r3,4(r5)
    aa64:	20800117 	ldw	r2,4(r4)
    aa68:	1885c83a 	sub	r2,r3,r2
    aa6c:	f800283a 	ret

0000aa70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    aa70:	defff404 	addi	sp,sp,-48
    aa74:	df000b15 	stw	fp,44(sp)
    aa78:	df000b04 	addi	fp,sp,44
    aa7c:	e13ffb15 	stw	r4,-20(fp)
    aa80:	e17ffc15 	stw	r5,-16(fp)
    aa84:	e1bffd15 	stw	r6,-12(fp)
    aa88:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    aa8c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    aa90:	00800074 	movhi	r2,1
    aa94:	1083b904 	addi	r2,r2,3812
    aa98:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    aa9c:	1005003a 	cmpeq	r2,r2,zero
    aaa0:	1000411e 	bne	r2,zero,aba8 <alt_alarm_start+0x138>
  {
    if (alarm)
    aaa4:	e0bffb17 	ldw	r2,-20(fp)
    aaa8:	1005003a 	cmpeq	r2,r2,zero
    aaac:	10003b1e 	bne	r2,zero,ab9c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    aab0:	e0fffb17 	ldw	r3,-20(fp)
    aab4:	e0bffd17 	ldw	r2,-12(fp)
    aab8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    aabc:	e0fffb17 	ldw	r3,-20(fp)
    aac0:	e0bffe17 	ldw	r2,-8(fp)
    aac4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aac8:	0005303a 	rdctl	r2,status
    aacc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aad0:	e0fff817 	ldw	r3,-32(fp)
    aad4:	00bfff84 	movi	r2,-2
    aad8:	1884703a 	and	r2,r3,r2
    aadc:	1001703a 	wrctl	status,r2
  
  return context;
    aae0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    aae4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    aae8:	00800074 	movhi	r2,1
    aaec:	1083ba04 	addi	r2,r2,3816
    aaf0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    aaf4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    aaf8:	e0fffc17 	ldw	r3,-16(fp)
    aafc:	e0bff917 	ldw	r2,-28(fp)
    ab00:	1885883a 	add	r2,r3,r2
    ab04:	10c00044 	addi	r3,r2,1
    ab08:	e0bffb17 	ldw	r2,-20(fp)
    ab0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ab10:	e0bffb17 	ldw	r2,-20(fp)
    ab14:	10c00217 	ldw	r3,8(r2)
    ab18:	e0bff917 	ldw	r2,-28(fp)
    ab1c:	1880042e 	bgeu	r3,r2,ab30 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    ab20:	e0fffb17 	ldw	r3,-20(fp)
    ab24:	00800044 	movi	r2,1
    ab28:	18800405 	stb	r2,16(r3)
    ab2c:	00000206 	br	ab38 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    ab30:	e0bffb17 	ldw	r2,-20(fp)
    ab34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ab38:	e0fffb17 	ldw	r3,-20(fp)
    ab3c:	00800074 	movhi	r2,1
    ab40:	10bd1204 	addi	r2,r2,-3000
    ab44:	e0bff615 	stw	r2,-40(fp)
    ab48:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ab4c:	e0fff717 	ldw	r3,-36(fp)
    ab50:	e0bff617 	ldw	r2,-40(fp)
    ab54:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    ab58:	e0bff617 	ldw	r2,-40(fp)
    ab5c:	10c00017 	ldw	r3,0(r2)
    ab60:	e0bff717 	ldw	r2,-36(fp)
    ab64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ab68:	e0bff617 	ldw	r2,-40(fp)
    ab6c:	10c00017 	ldw	r3,0(r2)
    ab70:	e0bff717 	ldw	r2,-36(fp)
    ab74:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    ab78:	e0fff617 	ldw	r3,-40(fp)
    ab7c:	e0bff717 	ldw	r2,-36(fp)
    ab80:	18800015 	stw	r2,0(r3)
    ab84:	e0bffa17 	ldw	r2,-24(fp)
    ab88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab8c:	e0bff517 	ldw	r2,-44(fp)
    ab90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ab94:	e03fff15 	stw	zero,-4(fp)
    ab98:	00000506 	br	abb0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    ab9c:	00bffa84 	movi	r2,-22
    aba0:	e0bfff15 	stw	r2,-4(fp)
    aba4:	00000206 	br	abb0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    aba8:	00bfde84 	movi	r2,-134
    abac:	e0bfff15 	stw	r2,-4(fp)
    abb0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    abb4:	e037883a 	mov	sp,fp
    abb8:	df000017 	ldw	fp,0(sp)
    abbc:	dec00104 	addi	sp,sp,4
    abc0:	f800283a 	ret

0000abc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    abc4:	defff804 	addi	sp,sp,-32
    abc8:	dfc00715 	stw	ra,28(sp)
    abcc:	df000615 	stw	fp,24(sp)
    abd0:	df000604 	addi	fp,sp,24
    abd4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    abd8:	e0bffc17 	ldw	r2,-16(fp)
    abdc:	1004803a 	cmplt	r2,r2,zero
    abe0:	1000091e 	bne	r2,zero,ac08 <close+0x44>
    abe4:	e13ffc17 	ldw	r4,-16(fp)
    abe8:	01400304 	movi	r5,12
    abec:	0000af40 	call	af4 <__mulsi3>
    abf0:	1007883a 	mov	r3,r2
    abf4:	00800074 	movhi	r2,1
    abf8:	10b88d04 	addi	r2,r2,-7628
    abfc:	1887883a 	add	r3,r3,r2
    ac00:	e0ffff15 	stw	r3,-4(fp)
    ac04:	00000106 	br	ac0c <close+0x48>
    ac08:	e03fff15 	stw	zero,-4(fp)
    ac0c:	e0bfff17 	ldw	r2,-4(fp)
    ac10:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    ac14:	e0bffb17 	ldw	r2,-20(fp)
    ac18:	1005003a 	cmpeq	r2,r2,zero
    ac1c:	10001d1e 	bne	r2,zero,ac94 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ac20:	e0bffb17 	ldw	r2,-20(fp)
    ac24:	10800017 	ldw	r2,0(r2)
    ac28:	10800417 	ldw	r2,16(r2)
    ac2c:	1005003a 	cmpeq	r2,r2,zero
    ac30:	1000071e 	bne	r2,zero,ac50 <close+0x8c>
    ac34:	e0bffb17 	ldw	r2,-20(fp)
    ac38:	10800017 	ldw	r2,0(r2)
    ac3c:	10800417 	ldw	r2,16(r2)
    ac40:	e13ffb17 	ldw	r4,-20(fp)
    ac44:	103ee83a 	callr	r2
    ac48:	e0bffe15 	stw	r2,-8(fp)
    ac4c:	00000106 	br	ac54 <close+0x90>
    ac50:	e03ffe15 	stw	zero,-8(fp)
    ac54:	e0bffe17 	ldw	r2,-8(fp)
    ac58:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ac5c:	e13ffc17 	ldw	r4,-16(fp)
    ac60:	000b7140 	call	b714 <alt_release_fd>
    if (rval < 0)
    ac64:	e0bffa17 	ldw	r2,-24(fp)
    ac68:	1004403a 	cmpge	r2,r2,zero
    ac6c:	1000071e 	bne	r2,zero,ac8c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    ac70:	000acc40 	call	acc4 <alt_get_errno>
    ac74:	e0fffa17 	ldw	r3,-24(fp)
    ac78:	00c7c83a 	sub	r3,zero,r3
    ac7c:	10c00015 	stw	r3,0(r2)
      return -1;
    ac80:	00bfffc4 	movi	r2,-1
    ac84:	e0bffd15 	stw	r2,-12(fp)
    ac88:	00000806 	br	acac <close+0xe8>
    }
    return 0;
    ac8c:	e03ffd15 	stw	zero,-12(fp)
    ac90:	00000606 	br	acac <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ac94:	000acc40 	call	acc4 <alt_get_errno>
    ac98:	1007883a 	mov	r3,r2
    ac9c:	00801444 	movi	r2,81
    aca0:	18800015 	stw	r2,0(r3)
    return -1;
    aca4:	00bfffc4 	movi	r2,-1
    aca8:	e0bffd15 	stw	r2,-12(fp)
    acac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    acb0:	e037883a 	mov	sp,fp
    acb4:	dfc00117 	ldw	ra,4(sp)
    acb8:	df000017 	ldw	fp,0(sp)
    acbc:	dec00204 	addi	sp,sp,8
    acc0:	f800283a 	ret

0000acc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    acc4:	defffd04 	addi	sp,sp,-12
    acc8:	dfc00215 	stw	ra,8(sp)
    accc:	df000115 	stw	fp,4(sp)
    acd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    acd4:	00800074 	movhi	r2,1
    acd8:	10bd1004 	addi	r2,r2,-3008
    acdc:	10800017 	ldw	r2,0(r2)
    ace0:	1005003a 	cmpeq	r2,r2,zero
    ace4:	1000061e 	bne	r2,zero,ad00 <alt_get_errno+0x3c>
    ace8:	00800074 	movhi	r2,1
    acec:	10bd1004 	addi	r2,r2,-3008
    acf0:	10800017 	ldw	r2,0(r2)
    acf4:	103ee83a 	callr	r2
    acf8:	e0bfff15 	stw	r2,-4(fp)
    acfc:	00000306 	br	ad0c <alt_get_errno+0x48>
    ad00:	00800074 	movhi	r2,1
    ad04:	1083b204 	addi	r2,r2,3784
    ad08:	e0bfff15 	stw	r2,-4(fp)
    ad0c:	e0bfff17 	ldw	r2,-4(fp)
}
    ad10:	e037883a 	mov	sp,fp
    ad14:	dfc00117 	ldw	ra,4(sp)
    ad18:	df000017 	ldw	fp,0(sp)
    ad1c:	dec00204 	addi	sp,sp,8
    ad20:	f800283a 	ret

0000ad24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ad24:	defffc04 	addi	sp,sp,-16
    ad28:	df000315 	stw	fp,12(sp)
    ad2c:	df000304 	addi	fp,sp,12
    ad30:	e13ffd15 	stw	r4,-12(fp)
    ad34:	e17ffe15 	stw	r5,-8(fp)
    ad38:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ad3c:	e0bfff17 	ldw	r2,-4(fp)
}
    ad40:	e037883a 	mov	sp,fp
    ad44:	df000017 	ldw	fp,0(sp)
    ad48:	dec00104 	addi	sp,sp,4
    ad4c:	f800283a 	ret

0000ad50 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ad50:	defffd04 	addi	sp,sp,-12
    ad54:	df000215 	stw	fp,8(sp)
    ad58:	df000204 	addi	fp,sp,8
    ad5c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ad60:	e0bfff17 	ldw	r2,-4(fp)
    ad64:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ad68:	e0bffe17 	ldw	r2,-8(fp)
    ad6c:	1005003a 	cmpeq	r2,r2,zero
    ad70:	1000021e 	bne	r2,zero,ad7c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ad74:	002af070 	cmpltui	zero,zero,43969
    ad78:	00000106 	br	ad80 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ad7c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ad80:	e037883a 	mov	sp,fp
    ad84:	df000017 	ldw	fp,0(sp)
    ad88:	dec00104 	addi	sp,sp,4
    ad8c:	f800283a 	ret

0000ad90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ad90:	defffd04 	addi	sp,sp,-12
    ad94:	dfc00215 	stw	ra,8(sp)
    ad98:	df000115 	stw	fp,4(sp)
    ad9c:	df000104 	addi	fp,sp,4
    ada0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ada4:	e13fff17 	ldw	r4,-4(fp)
    ada8:	000ad500 	call	ad50 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    adac:	003fff06 	br	adac <_exit+0x1c>

0000adb0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    adb0:	defff904 	addi	sp,sp,-28
    adb4:	dfc00615 	stw	ra,24(sp)
    adb8:	df000515 	stw	fp,20(sp)
    adbc:	df000504 	addi	fp,sp,20
    adc0:	e13ffc15 	stw	r4,-16(fp)
    adc4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    adc8:	e0bffc17 	ldw	r2,-16(fp)
    adcc:	1004803a 	cmplt	r2,r2,zero
    add0:	1000091e 	bne	r2,zero,adf8 <fstat+0x48>
    add4:	e13ffc17 	ldw	r4,-16(fp)
    add8:	01400304 	movi	r5,12
    addc:	0000af40 	call	af4 <__mulsi3>
    ade0:	1007883a 	mov	r3,r2
    ade4:	00800074 	movhi	r2,1
    ade8:	10b88d04 	addi	r2,r2,-7628
    adec:	1887883a 	add	r3,r3,r2
    adf0:	e0ffff15 	stw	r3,-4(fp)
    adf4:	00000106 	br	adfc <fstat+0x4c>
    adf8:	e03fff15 	stw	zero,-4(fp)
    adfc:	e0bfff17 	ldw	r2,-4(fp)
    ae00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ae04:	e0bffb17 	ldw	r2,-20(fp)
    ae08:	1005003a 	cmpeq	r2,r2,zero
    ae0c:	1000121e 	bne	r2,zero,ae58 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ae10:	e0bffb17 	ldw	r2,-20(fp)
    ae14:	10800017 	ldw	r2,0(r2)
    ae18:	10800817 	ldw	r2,32(r2)
    ae1c:	1005003a 	cmpeq	r2,r2,zero
    ae20:	1000081e 	bne	r2,zero,ae44 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    ae24:	e0bffb17 	ldw	r2,-20(fp)
    ae28:	10800017 	ldw	r2,0(r2)
    ae2c:	10800817 	ldw	r2,32(r2)
    ae30:	e13ffb17 	ldw	r4,-20(fp)
    ae34:	e17ffd17 	ldw	r5,-12(fp)
    ae38:	103ee83a 	callr	r2
    ae3c:	e0bffe15 	stw	r2,-8(fp)
    ae40:	00000b06 	br	ae70 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ae44:	e0fffd17 	ldw	r3,-12(fp)
    ae48:	00880004 	movi	r2,8192
    ae4c:	18800115 	stw	r2,4(r3)
      return 0;
    ae50:	e03ffe15 	stw	zero,-8(fp)
    ae54:	00000606 	br	ae70 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ae58:	000ae880 	call	ae88 <alt_get_errno>
    ae5c:	1007883a 	mov	r3,r2
    ae60:	00801444 	movi	r2,81
    ae64:	18800015 	stw	r2,0(r3)
    return -1;
    ae68:	00bfffc4 	movi	r2,-1
    ae6c:	e0bffe15 	stw	r2,-8(fp)
    ae70:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ae74:	e037883a 	mov	sp,fp
    ae78:	dfc00117 	ldw	ra,4(sp)
    ae7c:	df000017 	ldw	fp,0(sp)
    ae80:	dec00204 	addi	sp,sp,8
    ae84:	f800283a 	ret

0000ae88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ae88:	defffd04 	addi	sp,sp,-12
    ae8c:	dfc00215 	stw	ra,8(sp)
    ae90:	df000115 	stw	fp,4(sp)
    ae94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ae98:	00800074 	movhi	r2,1
    ae9c:	10bd1004 	addi	r2,r2,-3008
    aea0:	10800017 	ldw	r2,0(r2)
    aea4:	1005003a 	cmpeq	r2,r2,zero
    aea8:	1000061e 	bne	r2,zero,aec4 <alt_get_errno+0x3c>
    aeac:	00800074 	movhi	r2,1
    aeb0:	10bd1004 	addi	r2,r2,-3008
    aeb4:	10800017 	ldw	r2,0(r2)
    aeb8:	103ee83a 	callr	r2
    aebc:	e0bfff15 	stw	r2,-4(fp)
    aec0:	00000306 	br	aed0 <alt_get_errno+0x48>
    aec4:	00800074 	movhi	r2,1
    aec8:	1083b204 	addi	r2,r2,3784
    aecc:	e0bfff15 	stw	r2,-4(fp)
    aed0:	e0bfff17 	ldw	r2,-4(fp)
}
    aed4:	e037883a 	mov	sp,fp
    aed8:	dfc00117 	ldw	ra,4(sp)
    aedc:	df000017 	ldw	fp,0(sp)
    aee0:	dec00204 	addi	sp,sp,8
    aee4:	f800283a 	ret

0000aee8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    aee8:	deffeb04 	addi	sp,sp,-84
    aeec:	dfc01415 	stw	ra,80(sp)
    aef0:	df001315 	stw	fp,76(sp)
    aef4:	df001304 	addi	fp,sp,76
    aef8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aefc:	e0bffd17 	ldw	r2,-12(fp)
    af00:	1004803a 	cmplt	r2,r2,zero
    af04:	1000091e 	bne	r2,zero,af2c <isatty+0x44>
    af08:	e13ffd17 	ldw	r4,-12(fp)
    af0c:	01400304 	movi	r5,12
    af10:	0000af40 	call	af4 <__mulsi3>
    af14:	1007883a 	mov	r3,r2
    af18:	00800074 	movhi	r2,1
    af1c:	10b88d04 	addi	r2,r2,-7628
    af20:	1887883a 	add	r3,r3,r2
    af24:	e0ffff15 	stw	r3,-4(fp)
    af28:	00000106 	br	af30 <isatty+0x48>
    af2c:	e03fff15 	stw	zero,-4(fp)
    af30:	e0bfff17 	ldw	r2,-4(fp)
    af34:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    af38:	e0bfed17 	ldw	r2,-76(fp)
    af3c:	1005003a 	cmpeq	r2,r2,zero
    af40:	10000f1e 	bne	r2,zero,af80 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    af44:	e0bfed17 	ldw	r2,-76(fp)
    af48:	10800017 	ldw	r2,0(r2)
    af4c:	10800817 	ldw	r2,32(r2)
    af50:	1004c03a 	cmpne	r2,r2,zero
    af54:	1000031e 	bne	r2,zero,af64 <isatty+0x7c>
    {
      return 1;
    af58:	00800044 	movi	r2,1
    af5c:	e0bffe15 	stw	r2,-8(fp)
    af60:	00000c06 	br	af94 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    af64:	e17fee04 	addi	r5,fp,-72
    af68:	e13ffd17 	ldw	r4,-12(fp)
    af6c:	000adb00 	call	adb0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    af70:	e0bfef17 	ldw	r2,-68(fp)
    af74:	10880020 	cmpeqi	r2,r2,8192
    af78:	e0bffe15 	stw	r2,-8(fp)
    af7c:	00000506 	br	af94 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af80:	000afac0 	call	afac <alt_get_errno>
    af84:	1007883a 	mov	r3,r2
    af88:	00801444 	movi	r2,81
    af8c:	18800015 	stw	r2,0(r3)
    return 0;
    af90:	e03ffe15 	stw	zero,-8(fp)
    af94:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    af98:	e037883a 	mov	sp,fp
    af9c:	dfc00117 	ldw	ra,4(sp)
    afa0:	df000017 	ldw	fp,0(sp)
    afa4:	dec00204 	addi	sp,sp,8
    afa8:	f800283a 	ret

0000afac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    afac:	defffd04 	addi	sp,sp,-12
    afb0:	dfc00215 	stw	ra,8(sp)
    afb4:	df000115 	stw	fp,4(sp)
    afb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    afbc:	00800074 	movhi	r2,1
    afc0:	10bd1004 	addi	r2,r2,-3008
    afc4:	10800017 	ldw	r2,0(r2)
    afc8:	1005003a 	cmpeq	r2,r2,zero
    afcc:	1000061e 	bne	r2,zero,afe8 <alt_get_errno+0x3c>
    afd0:	00800074 	movhi	r2,1
    afd4:	10bd1004 	addi	r2,r2,-3008
    afd8:	10800017 	ldw	r2,0(r2)
    afdc:	103ee83a 	callr	r2
    afe0:	e0bfff15 	stw	r2,-4(fp)
    afe4:	00000306 	br	aff4 <alt_get_errno+0x48>
    afe8:	00800074 	movhi	r2,1
    afec:	1083b204 	addi	r2,r2,3784
    aff0:	e0bfff15 	stw	r2,-4(fp)
    aff4:	e0bfff17 	ldw	r2,-4(fp)
}
    aff8:	e037883a 	mov	sp,fp
    affc:	dfc00117 	ldw	ra,4(sp)
    b000:	df000017 	ldw	fp,0(sp)
    b004:	dec00204 	addi	sp,sp,8
    b008:	f800283a 	ret

0000b00c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b00c:	defffe04 	addi	sp,sp,-8
    b010:	dfc00115 	stw	ra,4(sp)
    b014:	df000015 	stw	fp,0(sp)
    b018:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b01c:	01000074 	movhi	r4,1
    b020:	213d1504 	addi	r4,r4,-2988
    b024:	01400074 	movhi	r5,1
    b028:	29767e04 	addi	r5,r5,-9736
    b02c:	01800074 	movhi	r6,1
    b030:	31bd1504 	addi	r6,r6,-2988
    b034:	000b08c0 	call	b08c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b038:	01000034 	movhi	r4,0
    b03c:	21000804 	addi	r4,r4,32
    b040:	01400034 	movhi	r5,0
    b044:	29400804 	addi	r5,r5,32
    b048:	01800034 	movhi	r6,0
    b04c:	31807404 	addi	r6,r6,464
    b050:	000b08c0 	call	b08c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b054:	01000074 	movhi	r4,1
    b058:	21355704 	addi	r4,r4,-10916
    b05c:	01400074 	movhi	r5,1
    b060:	29755704 	addi	r5,r5,-10916
    b064:	01800074 	movhi	r6,1
    b068:	31b67e04 	addi	r6,r6,-9736
    b06c:	000b08c0 	call	b08c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b070:	000c7e40 	call	c7e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b074:	000c9dc0 	call	c9dc <alt_icache_flush_all>
}
    b078:	e037883a 	mov	sp,fp
    b07c:	dfc00117 	ldw	ra,4(sp)
    b080:	df000017 	ldw	fp,0(sp)
    b084:	dec00204 	addi	sp,sp,8
    b088:	f800283a 	ret

0000b08c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b08c:	defffc04 	addi	sp,sp,-16
    b090:	df000315 	stw	fp,12(sp)
    b094:	df000304 	addi	fp,sp,12
    b098:	e13ffd15 	stw	r4,-12(fp)
    b09c:	e17ffe15 	stw	r5,-8(fp)
    b0a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b0a4:	e0fffe17 	ldw	r3,-8(fp)
    b0a8:	e0bffd17 	ldw	r2,-12(fp)
    b0ac:	18800e26 	beq	r3,r2,b0e8 <alt_load_section+0x5c>
  {
    while( to != end )
    b0b0:	00000a06 	br	b0dc <alt_load_section+0x50>
    {
      *to++ = *from++;
    b0b4:	e0bffd17 	ldw	r2,-12(fp)
    b0b8:	10c00017 	ldw	r3,0(r2)
    b0bc:	e0bffe17 	ldw	r2,-8(fp)
    b0c0:	10c00015 	stw	r3,0(r2)
    b0c4:	e0bffe17 	ldw	r2,-8(fp)
    b0c8:	10800104 	addi	r2,r2,4
    b0cc:	e0bffe15 	stw	r2,-8(fp)
    b0d0:	e0bffd17 	ldw	r2,-12(fp)
    b0d4:	10800104 	addi	r2,r2,4
    b0d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b0dc:	e0fffe17 	ldw	r3,-8(fp)
    b0e0:	e0bfff17 	ldw	r2,-4(fp)
    b0e4:	18bff31e 	bne	r3,r2,b0b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b0e8:	e037883a 	mov	sp,fp
    b0ec:	df000017 	ldw	fp,0(sp)
    b0f0:	dec00104 	addi	sp,sp,4
    b0f4:	f800283a 	ret

0000b0f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b0f8:	defff804 	addi	sp,sp,-32
    b0fc:	dfc00715 	stw	ra,28(sp)
    b100:	df000615 	stw	fp,24(sp)
    b104:	df000604 	addi	fp,sp,24
    b108:	e13ffc15 	stw	r4,-16(fp)
    b10c:	e17ffd15 	stw	r5,-12(fp)
    b110:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b114:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b118:	e0bffc17 	ldw	r2,-16(fp)
    b11c:	1004803a 	cmplt	r2,r2,zero
    b120:	1000091e 	bne	r2,zero,b148 <lseek+0x50>
    b124:	e13ffc17 	ldw	r4,-16(fp)
    b128:	01400304 	movi	r5,12
    b12c:	0000af40 	call	af4 <__mulsi3>
    b130:	1007883a 	mov	r3,r2
    b134:	00800074 	movhi	r2,1
    b138:	10b88d04 	addi	r2,r2,-7628
    b13c:	1887883a 	add	r3,r3,r2
    b140:	e0ffff15 	stw	r3,-4(fp)
    b144:	00000106 	br	b14c <lseek+0x54>
    b148:	e03fff15 	stw	zero,-4(fp)
    b14c:	e0bfff17 	ldw	r2,-4(fp)
    b150:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b154:	e0bffb17 	ldw	r2,-20(fp)
    b158:	1005003a 	cmpeq	r2,r2,zero
    b15c:	1000111e 	bne	r2,zero,b1a4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b160:	e0bffb17 	ldw	r2,-20(fp)
    b164:	10800017 	ldw	r2,0(r2)
    b168:	10800717 	ldw	r2,28(r2)
    b16c:	1005003a 	cmpeq	r2,r2,zero
    b170:	1000091e 	bne	r2,zero,b198 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b174:	e0bffb17 	ldw	r2,-20(fp)
    b178:	10800017 	ldw	r2,0(r2)
    b17c:	10800717 	ldw	r2,28(r2)
    b180:	e13ffb17 	ldw	r4,-20(fp)
    b184:	e17ffd17 	ldw	r5,-12(fp)
    b188:	e1bffe17 	ldw	r6,-8(fp)
    b18c:	103ee83a 	callr	r2
    b190:	e0bffa15 	stw	r2,-24(fp)
    b194:	00000506 	br	b1ac <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b198:	00bfde84 	movi	r2,-134
    b19c:	e0bffa15 	stw	r2,-24(fp)
    b1a0:	00000206 	br	b1ac <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    b1a4:	00bfebc4 	movi	r2,-81
    b1a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b1ac:	e0bffa17 	ldw	r2,-24(fp)
    b1b0:	1004403a 	cmpge	r2,r2,zero
    b1b4:	1000071e 	bne	r2,zero,b1d4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    b1b8:	000b1ec0 	call	b1ec <alt_get_errno>
    b1bc:	1007883a 	mov	r3,r2
    b1c0:	e0bffa17 	ldw	r2,-24(fp)
    b1c4:	0085c83a 	sub	r2,zero,r2
    b1c8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b1cc:	00bfffc4 	movi	r2,-1
    b1d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b1d4:	e0bffa17 	ldw	r2,-24(fp)
}
    b1d8:	e037883a 	mov	sp,fp
    b1dc:	dfc00117 	ldw	ra,4(sp)
    b1e0:	df000017 	ldw	fp,0(sp)
    b1e4:	dec00204 	addi	sp,sp,8
    b1e8:	f800283a 	ret

0000b1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b1ec:	defffd04 	addi	sp,sp,-12
    b1f0:	dfc00215 	stw	ra,8(sp)
    b1f4:	df000115 	stw	fp,4(sp)
    b1f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b1fc:	00800074 	movhi	r2,1
    b200:	10bd1004 	addi	r2,r2,-3008
    b204:	10800017 	ldw	r2,0(r2)
    b208:	1005003a 	cmpeq	r2,r2,zero
    b20c:	1000061e 	bne	r2,zero,b228 <alt_get_errno+0x3c>
    b210:	00800074 	movhi	r2,1
    b214:	10bd1004 	addi	r2,r2,-3008
    b218:	10800017 	ldw	r2,0(r2)
    b21c:	103ee83a 	callr	r2
    b220:	e0bfff15 	stw	r2,-4(fp)
    b224:	00000306 	br	b234 <alt_get_errno+0x48>
    b228:	00800074 	movhi	r2,1
    b22c:	1083b204 	addi	r2,r2,3784
    b230:	e0bfff15 	stw	r2,-4(fp)
    b234:	e0bfff17 	ldw	r2,-4(fp)
}
    b238:	e037883a 	mov	sp,fp
    b23c:	dfc00117 	ldw	ra,4(sp)
    b240:	df000017 	ldw	fp,0(sp)
    b244:	dec00204 	addi	sp,sp,8
    b248:	f800283a 	ret

0000b24c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b24c:	defffd04 	addi	sp,sp,-12
    b250:	dfc00215 	stw	ra,8(sp)
    b254:	df000115 	stw	fp,4(sp)
    b258:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b25c:	0009883a 	mov	r4,zero
    b260:	000bb700 	call	bb70 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b264:	000bba40 	call	bba4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b268:	01000074 	movhi	r4,1
    b26c:	21367604 	addi	r4,r4,-9768
    b270:	01400074 	movhi	r5,1
    b274:	29767604 	addi	r5,r5,-9768
    b278:	01800074 	movhi	r6,1
    b27c:	31b67604 	addi	r6,r6,-9768
    b280:	000cd9c0 	call	cd9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b284:	000c9140 	call	c914 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b288:	01000074 	movhi	r4,1
    b28c:	21325e04 	addi	r4,r4,-13960
    b290:	000d39c0 	call	d39c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b294:	d126b117 	ldw	r4,-25916(gp)
    b298:	d166b217 	ldw	r5,-25912(gp)
    b29c:	d1a6b317 	ldw	r6,-25908(gp)
    b2a0:	00003540 	call	354 <main>
    b2a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b2a8:	01000044 	movi	r4,1
    b2ac:	000abc40 	call	abc4 <close>
  exit (result);
    b2b0:	e13fff17 	ldw	r4,-4(fp)
    b2b4:	0000b2c0 	call	b2c <exit>

0000b2b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b2b8:	defffe04 	addi	sp,sp,-8
    b2bc:	df000115 	stw	fp,4(sp)
    b2c0:	df000104 	addi	fp,sp,4
    b2c4:	e13fff15 	stw	r4,-4(fp)
}
    b2c8:	e037883a 	mov	sp,fp
    b2cc:	df000017 	ldw	fp,0(sp)
    b2d0:	dec00104 	addi	sp,sp,4
    b2d4:	f800283a 	ret

0000b2d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b2d8:	defffe04 	addi	sp,sp,-8
    b2dc:	df000115 	stw	fp,4(sp)
    b2e0:	df000104 	addi	fp,sp,4
    b2e4:	e13fff15 	stw	r4,-4(fp)
}
    b2e8:	e037883a 	mov	sp,fp
    b2ec:	df000017 	ldw	fp,0(sp)
    b2f0:	dec00104 	addi	sp,sp,4
    b2f4:	f800283a 	ret

0000b2f8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    b2f8:	defff204 	addi	sp,sp,-56
    b2fc:	dfc00a15 	stw	ra,40(sp)
    b300:	df000915 	stw	fp,36(sp)
    b304:	df000904 	addi	fp,sp,36
    b308:	e1400215 	stw	r5,8(fp)
    b30c:	e1800315 	stw	r6,12(fp)
    b310:	e1c00415 	stw	r7,16(fp)
    b314:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    b318:	e0800204 	addi	r2,fp,8
    b31c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    b320:	e0bfff17 	ldw	r2,-4(fp)
    b324:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    b328:	00007806 	br	b50c <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    b32c:	e0bffc07 	ldb	r2,-16(fp)
    b330:	10800960 	cmpeqi	r2,r2,37
    b334:	1000031e 	bne	r2,zero,b344 <alt_printf+0x4c>
        {
            alt_putchar(c);
    b338:	e13ffc07 	ldb	r4,-16(fp)
    b33c:	000b5500 	call	b550 <alt_putchar>
    b340:	00007206 	br	b50c <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    b344:	e0bffd17 	ldw	r2,-12(fp)
    b348:	10800003 	ldbu	r2,0(r2)
    b34c:	e0bffc05 	stb	r2,-16(fp)
    b350:	e0bffc07 	ldb	r2,-16(fp)
    b354:	1004c03a 	cmpne	r2,r2,zero
    b358:	1007883a 	mov	r3,r2
    b35c:	e0bffd17 	ldw	r2,-12(fp)
    b360:	10800044 	addi	r2,r2,1
    b364:	e0bffd15 	stw	r2,-12(fp)
    b368:	18803fcc 	andi	r2,r3,255
    b36c:	1005003a 	cmpeq	r2,r2,zero
    b370:	1000721e 	bne	r2,zero,b53c <alt_printf+0x244>
            {
                if (c == '%')
    b374:	e0bffc07 	ldb	r2,-16(fp)
    b378:	10800958 	cmpnei	r2,r2,37
    b37c:	1000031e 	bne	r2,zero,b38c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    b380:	e13ffc07 	ldb	r4,-16(fp)
    b384:	000b5500 	call	b550 <alt_putchar>
    b388:	00006006 	br	b50c <alt_printf+0x214>
                } 
                else if (c == 'c')
    b38c:	e0bffc07 	ldb	r2,-16(fp)
    b390:	108018d8 	cmpnei	r2,r2,99
    b394:	1000091e 	bne	r2,zero,b3bc <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    b398:	e0fffe17 	ldw	r3,-8(fp)
    b39c:	18800104 	addi	r2,r3,4
    b3a0:	e0bffe15 	stw	r2,-8(fp)
    b3a4:	1805883a 	mov	r2,r3
    b3a8:	10800017 	ldw	r2,0(r2)
    b3ac:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    b3b0:	e13ffb17 	ldw	r4,-20(fp)
    b3b4:	000b5500 	call	b550 <alt_putchar>
    b3b8:	00005406 	br	b50c <alt_printf+0x214>
                }
                else if (c == 'x')
    b3bc:	e0bffc07 	ldb	r2,-16(fp)
    b3c0:	10801e18 	cmpnei	r2,r2,120
    b3c4:	1000371e 	bne	r2,zero,b4a4 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    b3c8:	e0fffe17 	ldw	r3,-8(fp)
    b3cc:	18800104 	addi	r2,r3,4
    b3d0:	e0bffe15 	stw	r2,-8(fp)
    b3d4:	1805883a 	mov	r2,r3
    b3d8:	10800017 	ldw	r2,0(r2)
    b3dc:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    b3e0:	e0bffa17 	ldw	r2,-24(fp)
    b3e4:	1004c03a 	cmpne	r2,r2,zero
    b3e8:	1000031e 	bne	r2,zero,b3f8 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    b3ec:	01000c04 	movi	r4,48
    b3f0:	000b5500 	call	b550 <alt_putchar>
                        continue;
    b3f4:	00004506 	br	b50c <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    b3f8:	00800704 	movi	r2,28
    b3fc:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    b400:	00000306 	br	b410 <alt_printf+0x118>
                        digit_shift -= 4;
    b404:	e0bff817 	ldw	r2,-32(fp)
    b408:	10bfff04 	addi	r2,r2,-4
    b40c:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    b410:	00c003c4 	movi	r3,15
    b414:	e0bff817 	ldw	r2,-32(fp)
    b418:	1884983a 	sll	r2,r3,r2
    b41c:	1007883a 	mov	r3,r2
    b420:	e0bffa17 	ldw	r2,-24(fp)
    b424:	1884703a 	and	r2,r3,r2
    b428:	1005003a 	cmpeq	r2,r2,zero
    b42c:	103ff51e 	bne	r2,zero,b404 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    b430:	00001806 	br	b494 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    b434:	00c003c4 	movi	r3,15
    b438:	e0bff817 	ldw	r2,-32(fp)
    b43c:	1884983a 	sll	r2,r3,r2
    b440:	1007883a 	mov	r3,r2
    b444:	e0bffa17 	ldw	r2,-24(fp)
    b448:	1886703a 	and	r3,r3,r2
    b44c:	e0bff817 	ldw	r2,-32(fp)
    b450:	1884d83a 	srl	r2,r3,r2
    b454:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    b458:	e0bff917 	ldw	r2,-28(fp)
    b45c:	108002a8 	cmpgeui	r2,r2,10
    b460:	1000041e 	bne	r2,zero,b474 <alt_printf+0x17c>
                            c = '0' + digit;
    b464:	e0bff917 	ldw	r2,-28(fp)
    b468:	10800c04 	addi	r2,r2,48
    b46c:	e0bffc05 	stb	r2,-16(fp)
    b470:	00000306 	br	b480 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    b474:	e0bff917 	ldw	r2,-28(fp)
    b478:	108015c4 	addi	r2,r2,87
    b47c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    b480:	e13ffc07 	ldb	r4,-16(fp)
    b484:	000b5500 	call	b550 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    b488:	e0bff817 	ldw	r2,-32(fp)
    b48c:	10bfff04 	addi	r2,r2,-4
    b490:	e0bff815 	stw	r2,-32(fp)
    b494:	e0bff817 	ldw	r2,-32(fp)
    b498:	1004403a 	cmpge	r2,r2,zero
    b49c:	103fe51e 	bne	r2,zero,b434 <alt_printf+0x13c>
    b4a0:	00001a06 	br	b50c <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    b4a4:	e0bffc07 	ldb	r2,-16(fp)
    b4a8:	10801cd8 	cmpnei	r2,r2,115
    b4ac:	1000171e 	bne	r2,zero,b50c <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    b4b0:	e0fffe17 	ldw	r3,-8(fp)
    b4b4:	18800104 	addi	r2,r3,4
    b4b8:	e0bffe15 	stw	r2,-8(fp)
    b4bc:	1805883a 	mov	r2,r3
    b4c0:	10800017 	ldw	r2,0(r2)
    b4c4:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    b4c8:	00000906 	br	b4f0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    b4cc:	e0bff717 	ldw	r2,-36(fp)
    b4d0:	10800003 	ldbu	r2,0(r2)
    b4d4:	11003fcc 	andi	r4,r2,255
    b4d8:	2100201c 	xori	r4,r4,128
    b4dc:	213fe004 	addi	r4,r4,-128
    b4e0:	e0bff717 	ldw	r2,-36(fp)
    b4e4:	10800044 	addi	r2,r2,1
    b4e8:	e0bff715 	stw	r2,-36(fp)
    b4ec:	000b5500 	call	b550 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    b4f0:	e0bff717 	ldw	r2,-36(fp)
    b4f4:	10800003 	ldbu	r2,0(r2)
    b4f8:	10803fcc 	andi	r2,r2,255
    b4fc:	1080201c 	xori	r2,r2,128
    b500:	10bfe004 	addi	r2,r2,-128
    b504:	1004c03a 	cmpne	r2,r2,zero
    b508:	103ff01e 	bne	r2,zero,b4cc <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    b50c:	e0bffd17 	ldw	r2,-12(fp)
    b510:	10800003 	ldbu	r2,0(r2)
    b514:	e0bffc05 	stb	r2,-16(fp)
    b518:	e0bffc07 	ldb	r2,-16(fp)
    b51c:	1004c03a 	cmpne	r2,r2,zero
    b520:	1007883a 	mov	r3,r2
    b524:	e0bffd17 	ldw	r2,-12(fp)
    b528:	10800044 	addi	r2,r2,1
    b52c:	e0bffd15 	stw	r2,-12(fp)
    b530:	18803fcc 	andi	r2,r3,255
    b534:	1004c03a 	cmpne	r2,r2,zero
    b538:	103f7c1e 	bne	r2,zero,b32c <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    b53c:	e037883a 	mov	sp,fp
    b540:	dfc00117 	ldw	ra,4(sp)
    b544:	df000017 	ldw	fp,0(sp)
    b548:	dec00504 	addi	sp,sp,20
    b54c:	f800283a 	ret

0000b550 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    b550:	defffd04 	addi	sp,sp,-12
    b554:	dfc00215 	stw	ra,8(sp)
    b558:	df000115 	stw	fp,4(sp)
    b55c:	df000104 	addi	fp,sp,4
    b560:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    b564:	00800074 	movhi	r2,1
    b568:	10bd0504 	addi	r2,r2,-3052
    b56c:	10800017 	ldw	r2,0(r2)
    b570:	11400217 	ldw	r5,8(r2)
    b574:	e13fff17 	ldw	r4,-4(fp)
    b578:	00075740 	call	7574 <putc>
#endif
}
    b57c:	e037883a 	mov	sp,fp
    b580:	dfc00117 	ldw	ra,4(sp)
    b584:	df000017 	ldw	fp,0(sp)
    b588:	dec00204 	addi	sp,sp,8
    b58c:	f800283a 	ret

0000b590 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b590:	defff704 	addi	sp,sp,-36
    b594:	dfc00815 	stw	ra,32(sp)
    b598:	df000715 	stw	fp,28(sp)
    b59c:	df000704 	addi	fp,sp,28
    b5a0:	e13ffb15 	stw	r4,-20(fp)
    b5a4:	e17ffc15 	stw	r5,-16(fp)
    b5a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b5ac:	e0bffb17 	ldw	r2,-20(fp)
    b5b0:	1004803a 	cmplt	r2,r2,zero
    b5b4:	1000091e 	bne	r2,zero,b5dc <read+0x4c>
    b5b8:	e13ffb17 	ldw	r4,-20(fp)
    b5bc:	01400304 	movi	r5,12
    b5c0:	0000af40 	call	af4 <__mulsi3>
    b5c4:	1007883a 	mov	r3,r2
    b5c8:	00800074 	movhi	r2,1
    b5cc:	10b88d04 	addi	r2,r2,-7628
    b5d0:	1887883a 	add	r3,r3,r2
    b5d4:	e0ffff15 	stw	r3,-4(fp)
    b5d8:	00000106 	br	b5e0 <read+0x50>
    b5dc:	e03fff15 	stw	zero,-4(fp)
    b5e0:	e0bfff17 	ldw	r2,-4(fp)
    b5e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b5e8:	e0bffa17 	ldw	r2,-24(fp)
    b5ec:	1005003a 	cmpeq	r2,r2,zero
    b5f0:	1000241e 	bne	r2,zero,b684 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b5f4:	e0bffa17 	ldw	r2,-24(fp)
    b5f8:	10800217 	ldw	r2,8(r2)
    b5fc:	108000cc 	andi	r2,r2,3
    b600:	10800060 	cmpeqi	r2,r2,1
    b604:	10001a1e 	bne	r2,zero,b670 <read+0xe0>
    b608:	e0bffa17 	ldw	r2,-24(fp)
    b60c:	10800017 	ldw	r2,0(r2)
    b610:	10800517 	ldw	r2,20(r2)
    b614:	1005003a 	cmpeq	r2,r2,zero
    b618:	1000151e 	bne	r2,zero,b670 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b61c:	e0bffa17 	ldw	r2,-24(fp)
    b620:	10800017 	ldw	r2,0(r2)
    b624:	10800517 	ldw	r2,20(r2)
    b628:	e17ffc17 	ldw	r5,-16(fp)
    b62c:	e1bffd17 	ldw	r6,-12(fp)
    b630:	e13ffa17 	ldw	r4,-24(fp)
    b634:	103ee83a 	callr	r2
    b638:	e0bff915 	stw	r2,-28(fp)
    b63c:	e0bff917 	ldw	r2,-28(fp)
    b640:	1004403a 	cmpge	r2,r2,zero
    b644:	1000071e 	bne	r2,zero,b664 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    b648:	000b6b40 	call	b6b4 <alt_get_errno>
    b64c:	e0fff917 	ldw	r3,-28(fp)
    b650:	00c7c83a 	sub	r3,zero,r3
    b654:	10c00015 	stw	r3,0(r2)
          return -1;
    b658:	00bfffc4 	movi	r2,-1
    b65c:	e0bffe15 	stw	r2,-8(fp)
    b660:	00000e06 	br	b69c <read+0x10c>
        }
        return rval;
    b664:	e0bff917 	ldw	r2,-28(fp)
    b668:	e0bffe15 	stw	r2,-8(fp)
    b66c:	00000b06 	br	b69c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b670:	000b6b40 	call	b6b4 <alt_get_errno>
    b674:	1007883a 	mov	r3,r2
    b678:	00800344 	movi	r2,13
    b67c:	18800015 	stw	r2,0(r3)
    b680:	00000406 	br	b694 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b684:	000b6b40 	call	b6b4 <alt_get_errno>
    b688:	1007883a 	mov	r3,r2
    b68c:	00801444 	movi	r2,81
    b690:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b694:	00bfffc4 	movi	r2,-1
    b698:	e0bffe15 	stw	r2,-8(fp)
    b69c:	e0bffe17 	ldw	r2,-8(fp)
}
    b6a0:	e037883a 	mov	sp,fp
    b6a4:	dfc00117 	ldw	ra,4(sp)
    b6a8:	df000017 	ldw	fp,0(sp)
    b6ac:	dec00204 	addi	sp,sp,8
    b6b0:	f800283a 	ret

0000b6b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6b4:	defffd04 	addi	sp,sp,-12
    b6b8:	dfc00215 	stw	ra,8(sp)
    b6bc:	df000115 	stw	fp,4(sp)
    b6c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6c4:	00800074 	movhi	r2,1
    b6c8:	10bd1004 	addi	r2,r2,-3008
    b6cc:	10800017 	ldw	r2,0(r2)
    b6d0:	1005003a 	cmpeq	r2,r2,zero
    b6d4:	1000061e 	bne	r2,zero,b6f0 <alt_get_errno+0x3c>
    b6d8:	00800074 	movhi	r2,1
    b6dc:	10bd1004 	addi	r2,r2,-3008
    b6e0:	10800017 	ldw	r2,0(r2)
    b6e4:	103ee83a 	callr	r2
    b6e8:	e0bfff15 	stw	r2,-4(fp)
    b6ec:	00000306 	br	b6fc <alt_get_errno+0x48>
    b6f0:	00800074 	movhi	r2,1
    b6f4:	1083b204 	addi	r2,r2,3784
    b6f8:	e0bfff15 	stw	r2,-4(fp)
    b6fc:	e0bfff17 	ldw	r2,-4(fp)
}
    b700:	e037883a 	mov	sp,fp
    b704:	dfc00117 	ldw	ra,4(sp)
    b708:	df000017 	ldw	fp,0(sp)
    b70c:	dec00204 	addi	sp,sp,8
    b710:	f800283a 	ret

0000b714 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b714:	defffc04 	addi	sp,sp,-16
    b718:	dfc00315 	stw	ra,12(sp)
    b71c:	df000215 	stw	fp,8(sp)
    b720:	dc000115 	stw	r16,4(sp)
    b724:	df000104 	addi	fp,sp,4
    b728:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b72c:	e0bfff17 	ldw	r2,-4(fp)
    b730:	108000d0 	cmplti	r2,r2,3
    b734:	10000f1e 	bne	r2,zero,b774 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    b738:	e13fff17 	ldw	r4,-4(fp)
    b73c:	04000074 	movhi	r16,1
    b740:	84388d04 	addi	r16,r16,-7628
    b744:	01400304 	movi	r5,12
    b748:	0000af40 	call	af4 <__mulsi3>
    b74c:	1405883a 	add	r2,r2,r16
    b750:	10800204 	addi	r2,r2,8
    b754:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b758:	e13fff17 	ldw	r4,-4(fp)
    b75c:	04000074 	movhi	r16,1
    b760:	84388d04 	addi	r16,r16,-7628
    b764:	01400304 	movi	r5,12
    b768:	0000af40 	call	af4 <__mulsi3>
    b76c:	1405883a 	add	r2,r2,r16
    b770:	10000015 	stw	zero,0(r2)
  }
}
    b774:	e037883a 	mov	sp,fp
    b778:	dfc00217 	ldw	ra,8(sp)
    b77c:	df000117 	ldw	fp,4(sp)
    b780:	dc000017 	ldw	r16,0(sp)
    b784:	dec00304 	addi	sp,sp,12
    b788:	f800283a 	ret

0000b78c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b78c:	defff804 	addi	sp,sp,-32
    b790:	df000715 	stw	fp,28(sp)
    b794:	df000704 	addi	fp,sp,28
    b798:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b79c:	0005303a 	rdctl	r2,status
    b7a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7a4:	e0fffb17 	ldw	r3,-20(fp)
    b7a8:	00bfff84 	movi	r2,-2
    b7ac:	1884703a 	and	r2,r3,r2
    b7b0:	1001703a 	wrctl	status,r2
  
  return context;
    b7b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b7b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b7bc:	d0a00c17 	ldw	r2,-32720(gp)
    b7c0:	10c000c4 	addi	r3,r2,3
    b7c4:	00bfff04 	movi	r2,-4
    b7c8:	1884703a 	and	r2,r3,r2
    b7cc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b7d0:	d0e00c17 	ldw	r3,-32720(gp)
    b7d4:	e0bffe17 	ldw	r2,-8(fp)
    b7d8:	1887883a 	add	r3,r3,r2
    b7dc:	00802034 	movhi	r2,128
    b7e0:	10800004 	addi	r2,r2,0
    b7e4:	10c0072e 	bgeu	r2,r3,b804 <sbrk+0x78>
    b7e8:	e0bffd17 	ldw	r2,-12(fp)
    b7ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7f0:	e0bffa17 	ldw	r2,-24(fp)
    b7f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b7f8:	00bfffc4 	movi	r2,-1
    b7fc:	e0bfff15 	stw	r2,-4(fp)
    b800:	00000c06 	br	b834 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b804:	d0a00c17 	ldw	r2,-32720(gp)
    b808:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b80c:	d0e00c17 	ldw	r3,-32720(gp)
    b810:	e0bffe17 	ldw	r2,-8(fp)
    b814:	1885883a 	add	r2,r3,r2
    b818:	d0a00c15 	stw	r2,-32720(gp)
    b81c:	e0bffd17 	ldw	r2,-12(fp)
    b820:	e0bff915 	stw	r2,-28(fp)
    b824:	e0bff917 	ldw	r2,-28(fp)
    b828:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b82c:	e0bffc17 	ldw	r2,-16(fp)
    b830:	e0bfff15 	stw	r2,-4(fp)
    b834:	e0bfff17 	ldw	r2,-4(fp)
} 
    b838:	e037883a 	mov	sp,fp
    b83c:	df000017 	ldw	fp,0(sp)
    b840:	dec00104 	addi	sp,sp,4
    b844:	f800283a 	ret

0000b848 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b848:	defffa04 	addi	sp,sp,-24
    b84c:	df000515 	stw	fp,20(sp)
    b850:	df000504 	addi	fp,sp,20
    b854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b858:	0005303a 	rdctl	r2,status
    b85c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b860:	e0fffd17 	ldw	r3,-12(fp)
    b864:	00bfff84 	movi	r2,-2
    b868:	1884703a 	and	r2,r3,r2
    b86c:	1001703a 	wrctl	status,r2
  
  return context;
    b870:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b874:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b878:	e0bfff17 	ldw	r2,-4(fp)
    b87c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b880:	e0bffc17 	ldw	r2,-16(fp)
    b884:	10c00017 	ldw	r3,0(r2)
    b888:	e0bffc17 	ldw	r2,-16(fp)
    b88c:	10800117 	ldw	r2,4(r2)
    b890:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b894:	e0bffc17 	ldw	r2,-16(fp)
    b898:	10c00117 	ldw	r3,4(r2)
    b89c:	e0bffc17 	ldw	r2,-16(fp)
    b8a0:	10800017 	ldw	r2,0(r2)
    b8a4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b8a8:	e0fffc17 	ldw	r3,-16(fp)
    b8ac:	e0bffc17 	ldw	r2,-16(fp)
    b8b0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    b8b4:	e0fffc17 	ldw	r3,-16(fp)
    b8b8:	e0bffc17 	ldw	r2,-16(fp)
    b8bc:	18800015 	stw	r2,0(r3)
    b8c0:	e0bffe17 	ldw	r2,-8(fp)
    b8c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8c8:	e0bffb17 	ldw	r2,-20(fp)
    b8cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b8d0:	e037883a 	mov	sp,fp
    b8d4:	df000017 	ldw	fp,0(sp)
    b8d8:	dec00104 	addi	sp,sp,4
    b8dc:	f800283a 	ret

0000b8e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b8e0:	defffb04 	addi	sp,sp,-20
    b8e4:	dfc00415 	stw	ra,16(sp)
    b8e8:	df000315 	stw	fp,12(sp)
    b8ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b8f0:	d0a00d17 	ldw	r2,-32716(gp)
    b8f4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b8f8:	d0a6b517 	ldw	r2,-25900(gp)
    b8fc:	10800044 	addi	r2,r2,1
    b900:	d0a6b515 	stw	r2,-25900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b904:	00003106 	br	b9cc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    b908:	e0bffe17 	ldw	r2,-8(fp)
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b914:	e0bffe17 	ldw	r2,-8(fp)
    b918:	10800403 	ldbu	r2,16(r2)
    b91c:	10803fcc 	andi	r2,r2,255
    b920:	1005003a 	cmpeq	r2,r2,zero
    b924:	1000051e 	bne	r2,zero,b93c <alt_tick+0x5c>
    b928:	d0a6b517 	ldw	r2,-25900(gp)
    b92c:	1004c03a 	cmpne	r2,r2,zero
    b930:	1000021e 	bne	r2,zero,b93c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    b934:	e0bffe17 	ldw	r2,-8(fp)
    b938:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b93c:	e0bffe17 	ldw	r2,-8(fp)
    b940:	10c00217 	ldw	r3,8(r2)
    b944:	d0a6b517 	ldw	r2,-25900(gp)
    b948:	10c01e36 	bltu	r2,r3,b9c4 <alt_tick+0xe4>
    b94c:	e0bffe17 	ldw	r2,-8(fp)
    b950:	10800403 	ldbu	r2,16(r2)
    b954:	10803fcc 	andi	r2,r2,255
    b958:	1004c03a 	cmpne	r2,r2,zero
    b95c:	1000191e 	bne	r2,zero,b9c4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    b960:	e0bffe17 	ldw	r2,-8(fp)
    b964:	10c00317 	ldw	r3,12(r2)
    b968:	e0bffe17 	ldw	r2,-8(fp)
    b96c:	11000517 	ldw	r4,20(r2)
    b970:	183ee83a 	callr	r3
    b974:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b978:	e0bffd17 	ldw	r2,-12(fp)
    b97c:	1004c03a 	cmpne	r2,r2,zero
    b980:	1000031e 	bne	r2,zero,b990 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    b984:	e13ffe17 	ldw	r4,-8(fp)
    b988:	000b8480 	call	b848 <alt_alarm_stop>
    b98c:	00000d06 	br	b9c4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    b990:	e0bffe17 	ldw	r2,-8(fp)
    b994:	10c00217 	ldw	r3,8(r2)
    b998:	e0bffd17 	ldw	r2,-12(fp)
    b99c:	1887883a 	add	r3,r3,r2
    b9a0:	e0bffe17 	ldw	r2,-8(fp)
    b9a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	10c00217 	ldw	r3,8(r2)
    b9b0:	d0a6b517 	ldw	r2,-25900(gp)
    b9b4:	1880032e 	bgeu	r3,r2,b9c4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b9b8:	e0fffe17 	ldw	r3,-8(fp)
    b9bc:	00800044 	movi	r2,1
    b9c0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b9c4:	e0bfff17 	ldw	r2,-4(fp)
    b9c8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b9cc:	d0e00d04 	addi	r3,gp,-32716
    b9d0:	e0bffe17 	ldw	r2,-8(fp)
    b9d4:	10ffcc1e 	bne	r2,r3,b908 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b9d8:	e037883a 	mov	sp,fp
    b9dc:	dfc00117 	ldw	ra,4(sp)
    b9e0:	df000017 	ldw	fp,0(sp)
    b9e4:	dec00204 	addi	sp,sp,8
    b9e8:	f800283a 	ret

0000b9ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b9ec:	defff704 	addi	sp,sp,-36
    b9f0:	dfc00815 	stw	ra,32(sp)
    b9f4:	df000715 	stw	fp,28(sp)
    b9f8:	df000704 	addi	fp,sp,28
    b9fc:	e13ffb15 	stw	r4,-20(fp)
    ba00:	e17ffc15 	stw	r5,-16(fp)
    ba04:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ba08:	e0bffb17 	ldw	r2,-20(fp)
    ba0c:	1004803a 	cmplt	r2,r2,zero
    ba10:	1000091e 	bne	r2,zero,ba38 <write+0x4c>
    ba14:	e13ffb17 	ldw	r4,-20(fp)
    ba18:	01400304 	movi	r5,12
    ba1c:	0000af40 	call	af4 <__mulsi3>
    ba20:	1007883a 	mov	r3,r2
    ba24:	00800074 	movhi	r2,1
    ba28:	10b88d04 	addi	r2,r2,-7628
    ba2c:	1887883a 	add	r3,r3,r2
    ba30:	e0ffff15 	stw	r3,-4(fp)
    ba34:	00000106 	br	ba3c <write+0x50>
    ba38:	e03fff15 	stw	zero,-4(fp)
    ba3c:	e0bfff17 	ldw	r2,-4(fp)
    ba40:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    ba44:	e0bffa17 	ldw	r2,-24(fp)
    ba48:	1005003a 	cmpeq	r2,r2,zero
    ba4c:	1000241e 	bne	r2,zero,bae0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ba50:	e0bffa17 	ldw	r2,-24(fp)
    ba54:	10800217 	ldw	r2,8(r2)
    ba58:	108000cc 	andi	r2,r2,3
    ba5c:	1005003a 	cmpeq	r2,r2,zero
    ba60:	10001a1e 	bne	r2,zero,bacc <write+0xe0>
    ba64:	e0bffa17 	ldw	r2,-24(fp)
    ba68:	10800017 	ldw	r2,0(r2)
    ba6c:	10800617 	ldw	r2,24(r2)
    ba70:	1005003a 	cmpeq	r2,r2,zero
    ba74:	1000151e 	bne	r2,zero,bacc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ba78:	e0bffa17 	ldw	r2,-24(fp)
    ba7c:	10800017 	ldw	r2,0(r2)
    ba80:	10800617 	ldw	r2,24(r2)
    ba84:	e17ffc17 	ldw	r5,-16(fp)
    ba88:	e1bffd17 	ldw	r6,-12(fp)
    ba8c:	e13ffa17 	ldw	r4,-24(fp)
    ba90:	103ee83a 	callr	r2
    ba94:	e0bff915 	stw	r2,-28(fp)
    ba98:	e0bff917 	ldw	r2,-28(fp)
    ba9c:	1004403a 	cmpge	r2,r2,zero
    baa0:	1000071e 	bne	r2,zero,bac0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    baa4:	000bb100 	call	bb10 <alt_get_errno>
    baa8:	e0fff917 	ldw	r3,-28(fp)
    baac:	00c7c83a 	sub	r3,zero,r3
    bab0:	10c00015 	stw	r3,0(r2)
        return -1;
    bab4:	00bfffc4 	movi	r2,-1
    bab8:	e0bffe15 	stw	r2,-8(fp)
    babc:	00000e06 	br	baf8 <write+0x10c>
      }
      return rval;
    bac0:	e0bff917 	ldw	r2,-28(fp)
    bac4:	e0bffe15 	stw	r2,-8(fp)
    bac8:	00000b06 	br	baf8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bacc:	000bb100 	call	bb10 <alt_get_errno>
    bad0:	1007883a 	mov	r3,r2
    bad4:	00800344 	movi	r2,13
    bad8:	18800015 	stw	r2,0(r3)
    badc:	00000406 	br	baf0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bae0:	000bb100 	call	bb10 <alt_get_errno>
    bae4:	1007883a 	mov	r3,r2
    bae8:	00801444 	movi	r2,81
    baec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    baf0:	00bfffc4 	movi	r2,-1
    baf4:	e0bffe15 	stw	r2,-8(fp)
    baf8:	e0bffe17 	ldw	r2,-8(fp)
}
    bafc:	e037883a 	mov	sp,fp
    bb00:	dfc00117 	ldw	ra,4(sp)
    bb04:	df000017 	ldw	fp,0(sp)
    bb08:	dec00204 	addi	sp,sp,8
    bb0c:	f800283a 	ret

0000bb10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb10:	defffd04 	addi	sp,sp,-12
    bb14:	dfc00215 	stw	ra,8(sp)
    bb18:	df000115 	stw	fp,4(sp)
    bb1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bb20:	00800074 	movhi	r2,1
    bb24:	10bd1004 	addi	r2,r2,-3008
    bb28:	10800017 	ldw	r2,0(r2)
    bb2c:	1005003a 	cmpeq	r2,r2,zero
    bb30:	1000061e 	bne	r2,zero,bb4c <alt_get_errno+0x3c>
    bb34:	00800074 	movhi	r2,1
    bb38:	10bd1004 	addi	r2,r2,-3008
    bb3c:	10800017 	ldw	r2,0(r2)
    bb40:	103ee83a 	callr	r2
    bb44:	e0bfff15 	stw	r2,-4(fp)
    bb48:	00000306 	br	bb58 <alt_get_errno+0x48>
    bb4c:	00800074 	movhi	r2,1
    bb50:	1083b204 	addi	r2,r2,3784
    bb54:	e0bfff15 	stw	r2,-4(fp)
    bb58:	e0bfff17 	ldw	r2,-4(fp)
}
    bb5c:	e037883a 	mov	sp,fp
    bb60:	dfc00117 	ldw	ra,4(sp)
    bb64:	df000017 	ldw	fp,0(sp)
    bb68:	dec00204 	addi	sp,sp,8
    bb6c:	f800283a 	ret

0000bb70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bb70:	defffd04 	addi	sp,sp,-12
    bb74:	dfc00215 	stw	ra,8(sp)
    bb78:	df000115 	stw	fp,4(sp)
    bb7c:	df000104 	addi	fp,sp,4
    bb80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    bb84:	000d0f80 	call	d0f8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bb88:	00800044 	movi	r2,1
    bb8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bb90:	e037883a 	mov	sp,fp
    bb94:	dfc00117 	ldw	ra,4(sp)
    bb98:	df000017 	ldw	fp,0(sp)
    bb9c:	dec00204 	addi	sp,sp,8
    bba0:	f800283a 	ret

0000bba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bba4:	defffe04 	addi	sp,sp,-8
    bba8:	dfc00115 	stw	ra,4(sp)
    bbac:	df000015 	stw	fp,0(sp)
    bbb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    bbb4:	01040034 	movhi	r4,4096
    bbb8:	21080004 	addi	r4,r4,8192
    bbbc:	000b883a 	mov	r5,zero
    bbc0:	000d883a 	mov	r6,zero
    bbc4:	01c00204 	movi	r7,8
    bbc8:	000c7540 	call	c754 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    bbcc:	01000074 	movhi	r4,1
    bbd0:	2138f704 	addi	r4,r4,-7204
    bbd4:	000b883a 	mov	r5,zero
    bbd8:	01800204 	movi	r6,8
    bbdc:	000bd800 	call	bd80 <altera_avalon_jtag_uart_init>
    bbe0:	01000074 	movhi	r4,1
    bbe4:	2138ed04 	addi	r4,r4,-7244
    bbe8:	000bc000 	call	bc00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    bbec:	e037883a 	mov	sp,fp
    bbf0:	dfc00117 	ldw	ra,4(sp)
    bbf4:	df000017 	ldw	fp,0(sp)
    bbf8:	dec00204 	addi	sp,sp,8
    bbfc:	f800283a 	ret

0000bc00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bc00:	defffd04 	addi	sp,sp,-12
    bc04:	dfc00215 	stw	ra,8(sp)
    bc08:	df000115 	stw	fp,4(sp)
    bc0c:	df000104 	addi	fp,sp,4
    bc10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bc14:	e13fff17 	ldw	r4,-4(fp)
    bc18:	01400074 	movhi	r5,1
    bc1c:	297d0d04 	addi	r5,r5,-3020
    bc20:	000c8000 	call	c800 <alt_dev_llist_insert>
}
    bc24:	e037883a 	mov	sp,fp
    bc28:	dfc00117 	ldw	ra,4(sp)
    bc2c:	df000017 	ldw	fp,0(sp)
    bc30:	dec00204 	addi	sp,sp,8
    bc34:	f800283a 	ret

0000bc38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bc38:	defffa04 	addi	sp,sp,-24
    bc3c:	dfc00515 	stw	ra,20(sp)
    bc40:	df000415 	stw	fp,16(sp)
    bc44:	df000404 	addi	fp,sp,16
    bc48:	e13ffd15 	stw	r4,-12(fp)
    bc4c:	e17ffe15 	stw	r5,-8(fp)
    bc50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bc54:	e0bffd17 	ldw	r2,-12(fp)
    bc58:	10800017 	ldw	r2,0(r2)
    bc5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bc60:	e0bffc17 	ldw	r2,-16(fp)
    bc64:	11000a04 	addi	r4,r2,40
    bc68:	e0bffd17 	ldw	r2,-12(fp)
    bc6c:	11c00217 	ldw	r7,8(r2)
    bc70:	e17ffe17 	ldw	r5,-8(fp)
    bc74:	e1bfff17 	ldw	r6,-4(fp)
    bc78:	000c2800 	call	c280 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bc7c:	e037883a 	mov	sp,fp
    bc80:	dfc00117 	ldw	ra,4(sp)
    bc84:	df000017 	ldw	fp,0(sp)
    bc88:	dec00204 	addi	sp,sp,8
    bc8c:	f800283a 	ret

0000bc90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bc90:	defffa04 	addi	sp,sp,-24
    bc94:	dfc00515 	stw	ra,20(sp)
    bc98:	df000415 	stw	fp,16(sp)
    bc9c:	df000404 	addi	fp,sp,16
    bca0:	e13ffd15 	stw	r4,-12(fp)
    bca4:	e17ffe15 	stw	r5,-8(fp)
    bca8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bcac:	e0bffd17 	ldw	r2,-12(fp)
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bcb8:	e0bffc17 	ldw	r2,-16(fp)
    bcbc:	11000a04 	addi	r4,r2,40
    bcc0:	e0bffd17 	ldw	r2,-12(fp)
    bcc4:	11c00217 	ldw	r7,8(r2)
    bcc8:	e17ffe17 	ldw	r5,-8(fp)
    bccc:	e1bfff17 	ldw	r6,-4(fp)
    bcd0:	000c4a40 	call	c4a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bcd4:	e037883a 	mov	sp,fp
    bcd8:	dfc00117 	ldw	ra,4(sp)
    bcdc:	df000017 	ldw	fp,0(sp)
    bce0:	dec00204 	addi	sp,sp,8
    bce4:	f800283a 	ret

0000bce8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bce8:	defffc04 	addi	sp,sp,-16
    bcec:	dfc00315 	stw	ra,12(sp)
    bcf0:	df000215 	stw	fp,8(sp)
    bcf4:	df000204 	addi	fp,sp,8
    bcf8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bcfc:	e0bfff17 	ldw	r2,-4(fp)
    bd00:	10800017 	ldw	r2,0(r2)
    bd04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bd08:	e0bffe17 	ldw	r2,-8(fp)
    bd0c:	11000a04 	addi	r4,r2,40
    bd10:	e0bfff17 	ldw	r2,-4(fp)
    bd14:	11400217 	ldw	r5,8(r2)
    bd18:	000c1180 	call	c118 <altera_avalon_jtag_uart_close>
}
    bd1c:	e037883a 	mov	sp,fp
    bd20:	dfc00117 	ldw	ra,4(sp)
    bd24:	df000017 	ldw	fp,0(sp)
    bd28:	dec00204 	addi	sp,sp,8
    bd2c:	f800283a 	ret

0000bd30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bd30:	defffa04 	addi	sp,sp,-24
    bd34:	dfc00515 	stw	ra,20(sp)
    bd38:	df000415 	stw	fp,16(sp)
    bd3c:	df000404 	addi	fp,sp,16
    bd40:	e13ffd15 	stw	r4,-12(fp)
    bd44:	e17ffe15 	stw	r5,-8(fp)
    bd48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bd4c:	e0bffd17 	ldw	r2,-12(fp)
    bd50:	10800017 	ldw	r2,0(r2)
    bd54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bd58:	e0bffc17 	ldw	r2,-16(fp)
    bd5c:	11000a04 	addi	r4,r2,40
    bd60:	e17ffe17 	ldw	r5,-8(fp)
    bd64:	e1bfff17 	ldw	r6,-4(fp)
    bd68:	000c18c0 	call	c18c <altera_avalon_jtag_uart_ioctl>
}
    bd6c:	e037883a 	mov	sp,fp
    bd70:	dfc00117 	ldw	ra,4(sp)
    bd74:	df000017 	ldw	fp,0(sp)
    bd78:	dec00204 	addi	sp,sp,8
    bd7c:	f800283a 	ret

0000bd80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bd80:	defffa04 	addi	sp,sp,-24
    bd84:	dfc00515 	stw	ra,20(sp)
    bd88:	df000415 	stw	fp,16(sp)
    bd8c:	df000404 	addi	fp,sp,16
    bd90:	e13ffd15 	stw	r4,-12(fp)
    bd94:	e17ffe15 	stw	r5,-8(fp)
    bd98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bd9c:	e0fffd17 	ldw	r3,-12(fp)
    bda0:	00800044 	movi	r2,1
    bda4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bda8:	e0bffd17 	ldw	r2,-12(fp)
    bdac:	10800017 	ldw	r2,0(r2)
    bdb0:	11000104 	addi	r4,r2,4
    bdb4:	e0bffd17 	ldw	r2,-12(fp)
    bdb8:	10800817 	ldw	r2,32(r2)
    bdbc:	1007883a 	mov	r3,r2
    bdc0:	2005883a 	mov	r2,r4
    bdc4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    bdc8:	e13ffe17 	ldw	r4,-8(fp)
    bdcc:	e17fff17 	ldw	r5,-4(fp)
    bdd0:	d8000015 	stw	zero,0(sp)
    bdd4:	01800074 	movhi	r6,1
    bdd8:	31af9004 	addi	r6,r6,-16832
    bddc:	e1fffd17 	ldw	r7,-12(fp)
    bde0:	000c9f80 	call	c9f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bde4:	e0bffd17 	ldw	r2,-12(fp)
    bde8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bdec:	e0bffd17 	ldw	r2,-12(fp)
    bdf0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bdf4:	00800074 	movhi	r2,1
    bdf8:	1083b904 	addi	r2,r2,3812
    bdfc:	10800017 	ldw	r2,0(r2)
    be00:	100b883a 	mov	r5,r2
    be04:	01800074 	movhi	r6,1
    be08:	31b01a04 	addi	r6,r6,-16280
    be0c:	e1fffd17 	ldw	r7,-12(fp)
    be10:	000aa700 	call	aa70 <alt_alarm_start>
    be14:	1004403a 	cmpge	r2,r2,zero
    be18:	1000041e 	bne	r2,zero,be2c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    be1c:	e0fffd17 	ldw	r3,-12(fp)
    be20:	00a00034 	movhi	r2,32768
    be24:	10bfffc4 	addi	r2,r2,-1
    be28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    be2c:	e037883a 	mov	sp,fp
    be30:	dfc00117 	ldw	ra,4(sp)
    be34:	df000017 	ldw	fp,0(sp)
    be38:	dec00204 	addi	sp,sp,8
    be3c:	f800283a 	ret

0000be40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    be40:	defff804 	addi	sp,sp,-32
    be44:	df000715 	stw	fp,28(sp)
    be48:	df000704 	addi	fp,sp,28
    be4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    be50:	e0bfff17 	ldw	r2,-4(fp)
    be54:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    be58:	e0bffe17 	ldw	r2,-8(fp)
    be5c:	10800017 	ldw	r2,0(r2)
    be60:	e0bffd15 	stw	r2,-12(fp)
    be64:	00000006 	br	be68 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    be68:	e0bffd17 	ldw	r2,-12(fp)
    be6c:	10800104 	addi	r2,r2,4
    be70:	10800037 	ldwio	r2,0(r2)
    be74:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    be78:	e0bffc17 	ldw	r2,-16(fp)
    be7c:	1080c00c 	andi	r2,r2,768
    be80:	1005003a 	cmpeq	r2,r2,zero
    be84:	1000741e 	bne	r2,zero,c058 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    be88:	e0bffc17 	ldw	r2,-16(fp)
    be8c:	1080400c 	andi	r2,r2,256
    be90:	1005003a 	cmpeq	r2,r2,zero
    be94:	1000351e 	bne	r2,zero,bf6c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    be98:	00800074 	movhi	r2,1
    be9c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bea0:	e0bffe17 	ldw	r2,-8(fp)
    bea4:	10800a17 	ldw	r2,40(r2)
    bea8:	10800044 	addi	r2,r2,1
    beac:	1081ffcc 	andi	r2,r2,2047
    beb0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    beb4:	e0bffe17 	ldw	r2,-8(fp)
    beb8:	10c00b17 	ldw	r3,44(r2)
    bebc:	e0bffa17 	ldw	r2,-24(fp)
    bec0:	18801626 	beq	r3,r2,bf1c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bec4:	e0bffd17 	ldw	r2,-12(fp)
    bec8:	10800037 	ldwio	r2,0(r2)
    becc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bed0:	e0bffb17 	ldw	r2,-20(fp)
    bed4:	10a0000c 	andi	r2,r2,32768
    bed8:	1005003a 	cmpeq	r2,r2,zero
    bedc:	10000f1e 	bne	r2,zero,bf1c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bee0:	e0bffe17 	ldw	r2,-8(fp)
    bee4:	10c00a17 	ldw	r3,40(r2)
    bee8:	e0bffb17 	ldw	r2,-20(fp)
    beec:	1009883a 	mov	r4,r2
    bef0:	e0bffe17 	ldw	r2,-8(fp)
    bef4:	1885883a 	add	r2,r3,r2
    bef8:	10800e04 	addi	r2,r2,56
    befc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bf00:	e0bffe17 	ldw	r2,-8(fp)
    bf04:	10800a17 	ldw	r2,40(r2)
    bf08:	10800044 	addi	r2,r2,1
    bf0c:	10c1ffcc 	andi	r3,r2,2047
    bf10:	e0bffe17 	ldw	r2,-8(fp)
    bf14:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    bf18:	003fe106 	br	bea0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    bf1c:	e0bffb17 	ldw	r2,-20(fp)
    bf20:	10bfffec 	andhi	r2,r2,65535
    bf24:	1005003a 	cmpeq	r2,r2,zero
    bf28:	1000101e 	bne	r2,zero,bf6c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bf2c:	e0bffe17 	ldw	r2,-8(fp)
    bf30:	10c00817 	ldw	r3,32(r2)
    bf34:	00bfff84 	movi	r2,-2
    bf38:	1886703a 	and	r3,r3,r2
    bf3c:	e0bffe17 	ldw	r2,-8(fp)
    bf40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bf44:	e0bffd17 	ldw	r2,-12(fp)
    bf48:	11000104 	addi	r4,r2,4
    bf4c:	e0bffe17 	ldw	r2,-8(fp)
    bf50:	10800817 	ldw	r2,32(r2)
    bf54:	1007883a 	mov	r3,r2
    bf58:	2005883a 	mov	r2,r4
    bf5c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bf60:	e0bffd17 	ldw	r2,-12(fp)
    bf64:	10800104 	addi	r2,r2,4
    bf68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bf6c:	e0bffc17 	ldw	r2,-16(fp)
    bf70:	1080800c 	andi	r2,r2,512
    bf74:	1005003a 	cmpeq	r2,r2,zero
    bf78:	103fbb1e 	bne	r2,zero,be68 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	10bfffec 	andhi	r2,r2,65535
    bf84:	1004d43a 	srli	r2,r2,16
    bf88:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bf8c:	00001506 	br	bfe4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bf90:	e13ffd17 	ldw	r4,-12(fp)
    bf94:	e0bffe17 	ldw	r2,-8(fp)
    bf98:	10c00d17 	ldw	r3,52(r2)
    bf9c:	e0bffe17 	ldw	r2,-8(fp)
    bfa0:	1885883a 	add	r2,r3,r2
    bfa4:	10820e04 	addi	r2,r2,2104
    bfa8:	10800003 	ldbu	r2,0(r2)
    bfac:	10c03fcc 	andi	r3,r2,255
    bfb0:	18c0201c 	xori	r3,r3,128
    bfb4:	18ffe004 	addi	r3,r3,-128
    bfb8:	2005883a 	mov	r2,r4
    bfbc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bfc0:	e0bffe17 	ldw	r2,-8(fp)
    bfc4:	10800d17 	ldw	r2,52(r2)
    bfc8:	10800044 	addi	r2,r2,1
    bfcc:	10c1ffcc 	andi	r3,r2,2047
    bfd0:	e0bffe17 	ldw	r2,-8(fp)
    bfd4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bfd8:	e0bff917 	ldw	r2,-28(fp)
    bfdc:	10bfffc4 	addi	r2,r2,-1
    bfe0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bfe4:	e0bff917 	ldw	r2,-28(fp)
    bfe8:	1005003a 	cmpeq	r2,r2,zero
    bfec:	1000051e 	bne	r2,zero,c004 <altera_avalon_jtag_uart_irq+0x1c4>
    bff0:	e0bffe17 	ldw	r2,-8(fp)
    bff4:	10c00d17 	ldw	r3,52(r2)
    bff8:	e0bffe17 	ldw	r2,-8(fp)
    bffc:	10800c17 	ldw	r2,48(r2)
    c000:	18bfe31e 	bne	r3,r2,bf90 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c004:	e0bff917 	ldw	r2,-28(fp)
    c008:	1005003a 	cmpeq	r2,r2,zero
    c00c:	103f961e 	bne	r2,zero,be68 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c010:	e0bffe17 	ldw	r2,-8(fp)
    c014:	10c00817 	ldw	r3,32(r2)
    c018:	00bfff44 	movi	r2,-3
    c01c:	1886703a 	and	r3,r3,r2
    c020:	e0bffe17 	ldw	r2,-8(fp)
    c024:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c028:	e0bffe17 	ldw	r2,-8(fp)
    c02c:	10800017 	ldw	r2,0(r2)
    c030:	11000104 	addi	r4,r2,4
    c034:	e0bffe17 	ldw	r2,-8(fp)
    c038:	10800817 	ldw	r2,32(r2)
    c03c:	1007883a 	mov	r3,r2
    c040:	2005883a 	mov	r2,r4
    c044:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c048:	e0bffd17 	ldw	r2,-12(fp)
    c04c:	10800104 	addi	r2,r2,4
    c050:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c054:	003f8406 	br	be68 <altera_avalon_jtag_uart_irq+0x28>
}
    c058:	e037883a 	mov	sp,fp
    c05c:	df000017 	ldw	fp,0(sp)
    c060:	dec00104 	addi	sp,sp,4
    c064:	f800283a 	ret

0000c068 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c068:	defffc04 	addi	sp,sp,-16
    c06c:	df000315 	stw	fp,12(sp)
    c070:	df000304 	addi	fp,sp,12
    c074:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c078:	e0bfff17 	ldw	r2,-4(fp)
    c07c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c080:	e0bffe17 	ldw	r2,-8(fp)
    c084:	10800017 	ldw	r2,0(r2)
    c088:	10800104 	addi	r2,r2,4
    c08c:	10800037 	ldwio	r2,0(r2)
    c090:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c094:	e0bffd17 	ldw	r2,-12(fp)
    c098:	1081000c 	andi	r2,r2,1024
    c09c:	1005003a 	cmpeq	r2,r2,zero
    c0a0:	10000c1e 	bne	r2,zero,c0d4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c0a4:	e0bffe17 	ldw	r2,-8(fp)
    c0a8:	10800017 	ldw	r2,0(r2)
    c0ac:	11000104 	addi	r4,r2,4
    c0b0:	e0bffe17 	ldw	r2,-8(fp)
    c0b4:	10800817 	ldw	r2,32(r2)
    c0b8:	10810014 	ori	r2,r2,1024
    c0bc:	1007883a 	mov	r3,r2
    c0c0:	2005883a 	mov	r2,r4
    c0c4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c0c8:	e0bffe17 	ldw	r2,-8(fp)
    c0cc:	10000915 	stw	zero,36(r2)
    c0d0:	00000a06 	br	c0fc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c0d4:	e0bffe17 	ldw	r2,-8(fp)
    c0d8:	10c00917 	ldw	r3,36(r2)
    c0dc:	00a00034 	movhi	r2,32768
    c0e0:	10bfff04 	addi	r2,r2,-4
    c0e4:	10c00536 	bltu	r2,r3,c0fc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c0e8:	e0bffe17 	ldw	r2,-8(fp)
    c0ec:	10800917 	ldw	r2,36(r2)
    c0f0:	10c00044 	addi	r3,r2,1
    c0f4:	e0bffe17 	ldw	r2,-8(fp)
    c0f8:	10c00915 	stw	r3,36(r2)
    c0fc:	00800074 	movhi	r2,1
    c100:	1083b904 	addi	r2,r2,3812
    c104:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c108:	e037883a 	mov	sp,fp
    c10c:	df000017 	ldw	fp,0(sp)
    c110:	dec00104 	addi	sp,sp,4
    c114:	f800283a 	ret

0000c118 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c118:	defffc04 	addi	sp,sp,-16
    c11c:	df000315 	stw	fp,12(sp)
    c120:	df000304 	addi	fp,sp,12
    c124:	e13ffd15 	stw	r4,-12(fp)
    c128:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c12c:	00000706 	br	c14c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c130:	e0bffe17 	ldw	r2,-8(fp)
    c134:	1090000c 	andi	r2,r2,16384
    c138:	1005003a 	cmpeq	r2,r2,zero
    c13c:	1000031e 	bne	r2,zero,c14c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c140:	00bffd44 	movi	r2,-11
    c144:	e0bfff15 	stw	r2,-4(fp)
    c148:	00000b06 	br	c178 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c14c:	e0bffd17 	ldw	r2,-12(fp)
    c150:	10c00d17 	ldw	r3,52(r2)
    c154:	e0bffd17 	ldw	r2,-12(fp)
    c158:	10800c17 	ldw	r2,48(r2)
    c15c:	18800526 	beq	r3,r2,c174 <altera_avalon_jtag_uart_close+0x5c>
    c160:	e0bffd17 	ldw	r2,-12(fp)
    c164:	10c00917 	ldw	r3,36(r2)
    c168:	e0bffd17 	ldw	r2,-12(fp)
    c16c:	10800117 	ldw	r2,4(r2)
    c170:	18bfef36 	bltu	r3,r2,c130 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c174:	e03fff15 	stw	zero,-4(fp)
    c178:	e0bfff17 	ldw	r2,-4(fp)
}
    c17c:	e037883a 	mov	sp,fp
    c180:	df000017 	ldw	fp,0(sp)
    c184:	dec00104 	addi	sp,sp,4
    c188:	f800283a 	ret

0000c18c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c18c:	defff804 	addi	sp,sp,-32
    c190:	df000715 	stw	fp,28(sp)
    c194:	df000704 	addi	fp,sp,28
    c198:	e13ffb15 	stw	r4,-20(fp)
    c19c:	e17ffc15 	stw	r5,-16(fp)
    c1a0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c1a4:	00bff9c4 	movi	r2,-25
    c1a8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c1ac:	e0bffc17 	ldw	r2,-16(fp)
    c1b0:	e0bfff15 	stw	r2,-4(fp)
    c1b4:	e0ffff17 	ldw	r3,-4(fp)
    c1b8:	189a8060 	cmpeqi	r2,r3,27137
    c1bc:	1000041e 	bne	r2,zero,c1d0 <altera_avalon_jtag_uart_ioctl+0x44>
    c1c0:	e0ffff17 	ldw	r3,-4(fp)
    c1c4:	189a80a0 	cmpeqi	r2,r3,27138
    c1c8:	10001b1e 	bne	r2,zero,c238 <altera_avalon_jtag_uart_ioctl+0xac>
    c1cc:	00002706 	br	c26c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c1d0:	e0bffb17 	ldw	r2,-20(fp)
    c1d4:	10c00117 	ldw	r3,4(r2)
    c1d8:	00a00034 	movhi	r2,32768
    c1dc:	10bfffc4 	addi	r2,r2,-1
    c1e0:	18802226 	beq	r3,r2,c26c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c1e4:	e0bffd17 	ldw	r2,-12(fp)
    c1e8:	10800017 	ldw	r2,0(r2)
    c1ec:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c1f0:	e0bff917 	ldw	r2,-28(fp)
    c1f4:	10800090 	cmplti	r2,r2,2
    c1f8:	1000071e 	bne	r2,zero,c218 <altera_avalon_jtag_uart_ioctl+0x8c>
    c1fc:	e0fff917 	ldw	r3,-28(fp)
    c200:	00a00034 	movhi	r2,32768
    c204:	10bfffc4 	addi	r2,r2,-1
    c208:	18800326 	beq	r3,r2,c218 <altera_avalon_jtag_uart_ioctl+0x8c>
    c20c:	e0bff917 	ldw	r2,-28(fp)
    c210:	e0bffe15 	stw	r2,-8(fp)
    c214:	00000306 	br	c224 <altera_avalon_jtag_uart_ioctl+0x98>
    c218:	00e00034 	movhi	r3,32768
    c21c:	18ffff84 	addi	r3,r3,-2
    c220:	e0fffe15 	stw	r3,-8(fp)
    c224:	e0bffb17 	ldw	r2,-20(fp)
    c228:	e0fffe17 	ldw	r3,-8(fp)
    c22c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c230:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c234:	00000d06 	br	c26c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c238:	e0bffb17 	ldw	r2,-20(fp)
    c23c:	10c00117 	ldw	r3,4(r2)
    c240:	00a00034 	movhi	r2,32768
    c244:	10bfffc4 	addi	r2,r2,-1
    c248:	18800826 	beq	r3,r2,c26c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c24c:	e13ffd17 	ldw	r4,-12(fp)
    c250:	e0bffb17 	ldw	r2,-20(fp)
    c254:	10c00917 	ldw	r3,36(r2)
    c258:	e0bffb17 	ldw	r2,-20(fp)
    c25c:	10800117 	ldw	r2,4(r2)
    c260:	1885803a 	cmpltu	r2,r3,r2
    c264:	20800015 	stw	r2,0(r4)
      rc = 0;
    c268:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c26c:	e0bffa17 	ldw	r2,-24(fp)
}
    c270:	e037883a 	mov	sp,fp
    c274:	df000017 	ldw	fp,0(sp)
    c278:	dec00104 	addi	sp,sp,4
    c27c:	f800283a 	ret

0000c280 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c280:	defff204 	addi	sp,sp,-56
    c284:	dfc00d15 	stw	ra,52(sp)
    c288:	df000c15 	stw	fp,48(sp)
    c28c:	df000c04 	addi	fp,sp,48
    c290:	e13ffb15 	stw	r4,-20(fp)
    c294:	e17ffc15 	stw	r5,-16(fp)
    c298:	e1bffd15 	stw	r6,-12(fp)
    c29c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c2a0:	e0bffc17 	ldw	r2,-16(fp)
    c2a4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c2a8:	00004806 	br	c3cc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c2ac:	e0bffb17 	ldw	r2,-20(fp)
    c2b0:	10800a17 	ldw	r2,40(r2)
    c2b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c2b8:	e0bffb17 	ldw	r2,-20(fp)
    c2bc:	10800b17 	ldw	r2,44(r2)
    c2c0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c2c4:	e0fff717 	ldw	r3,-36(fp)
    c2c8:	e0bff617 	ldw	r2,-40(fp)
    c2cc:	18800536 	bltu	r3,r2,c2e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c2d0:	e0bff717 	ldw	r2,-36(fp)
    c2d4:	e0fff617 	ldw	r3,-40(fp)
    c2d8:	10c5c83a 	sub	r2,r2,r3
    c2dc:	e0bff815 	stw	r2,-32(fp)
    c2e0:	00000406 	br	c2f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c2e4:	00820004 	movi	r2,2048
    c2e8:	e0fff617 	ldw	r3,-40(fp)
    c2ec:	10c5c83a 	sub	r2,r2,r3
    c2f0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c2f4:	e0bff817 	ldw	r2,-32(fp)
    c2f8:	1005003a 	cmpeq	r2,r2,zero
    c2fc:	10001f1e 	bne	r2,zero,c37c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c300:	e0fffd17 	ldw	r3,-12(fp)
    c304:	e0bff817 	ldw	r2,-32(fp)
    c308:	1880022e 	bgeu	r3,r2,c314 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c30c:	e0bffd17 	ldw	r2,-12(fp)
    c310:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c314:	e0bffb17 	ldw	r2,-20(fp)
    c318:	10c00e04 	addi	r3,r2,56
    c31c:	e0bff617 	ldw	r2,-40(fp)
    c320:	1887883a 	add	r3,r3,r2
    c324:	e0bffa17 	ldw	r2,-24(fp)
    c328:	1009883a 	mov	r4,r2
    c32c:	180b883a 	mov	r5,r3
    c330:	e1bff817 	ldw	r6,-32(fp)
    c334:	00062d00 	call	62d0 <memcpy>
      ptr   += n;
    c338:	e0fff817 	ldw	r3,-32(fp)
    c33c:	e0bffa17 	ldw	r2,-24(fp)
    c340:	10c5883a 	add	r2,r2,r3
    c344:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c348:	e0fffd17 	ldw	r3,-12(fp)
    c34c:	e0bff817 	ldw	r2,-32(fp)
    c350:	1885c83a 	sub	r2,r3,r2
    c354:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c358:	e0fff617 	ldw	r3,-40(fp)
    c35c:	e0bff817 	ldw	r2,-32(fp)
    c360:	1885883a 	add	r2,r3,r2
    c364:	10c1ffcc 	andi	r3,r2,2047
    c368:	e0bffb17 	ldw	r2,-20(fp)
    c36c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c370:	e0bffd17 	ldw	r2,-12(fp)
    c374:	10800048 	cmpgei	r2,r2,1
    c378:	103fcc1e 	bne	r2,zero,c2ac <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c37c:	e0fffa17 	ldw	r3,-24(fp)
    c380:	e0bffc17 	ldw	r2,-16(fp)
    c384:	1880141e 	bne	r3,r2,c3d8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c388:	e0bffe17 	ldw	r2,-8(fp)
    c38c:	1090000c 	andi	r2,r2,16384
    c390:	1004c03a 	cmpne	r2,r2,zero
    c394:	1000101e 	bne	r2,zero,c3d8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c398:	e0bffb17 	ldw	r2,-20(fp)
    c39c:	10c00a17 	ldw	r3,40(r2)
    c3a0:	e0bff717 	ldw	r2,-36(fp)
    c3a4:	1880051e 	bne	r3,r2,c3bc <altera_avalon_jtag_uart_read+0x13c>
    c3a8:	e0bffb17 	ldw	r2,-20(fp)
    c3ac:	10c00917 	ldw	r3,36(r2)
    c3b0:	e0bffb17 	ldw	r2,-20(fp)
    c3b4:	10800117 	ldw	r2,4(r2)
    c3b8:	18bff736 	bltu	r3,r2,c398 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c3bc:	e0bffb17 	ldw	r2,-20(fp)
    c3c0:	10c00a17 	ldw	r3,40(r2)
    c3c4:	e0bff717 	ldw	r2,-36(fp)
    c3c8:	18800326 	beq	r3,r2,c3d8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c3cc:	e0bffd17 	ldw	r2,-12(fp)
    c3d0:	10800048 	cmpgei	r2,r2,1
    c3d4:	103fb51e 	bne	r2,zero,c2ac <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c3d8:	e0fffa17 	ldw	r3,-24(fp)
    c3dc:	e0bffc17 	ldw	r2,-16(fp)
    c3e0:	18801926 	beq	r3,r2,c448 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3e4:	0005303a 	rdctl	r2,status
    c3e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3ec:	e0fff517 	ldw	r3,-44(fp)
    c3f0:	00bfff84 	movi	r2,-2
    c3f4:	1884703a 	and	r2,r3,r2
    c3f8:	1001703a 	wrctl	status,r2
  
  return context;
    c3fc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c400:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c404:	e0bffb17 	ldw	r2,-20(fp)
    c408:	10800817 	ldw	r2,32(r2)
    c40c:	10c00054 	ori	r3,r2,1
    c410:	e0bffb17 	ldw	r2,-20(fp)
    c414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c418:	e0bffb17 	ldw	r2,-20(fp)
    c41c:	10800017 	ldw	r2,0(r2)
    c420:	11000104 	addi	r4,r2,4
    c424:	e0bffb17 	ldw	r2,-20(fp)
    c428:	10800817 	ldw	r2,32(r2)
    c42c:	1007883a 	mov	r3,r2
    c430:	2005883a 	mov	r2,r4
    c434:	10c00035 	stwio	r3,0(r2)
    c438:	e0bff917 	ldw	r2,-28(fp)
    c43c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c440:	e0bff417 	ldw	r2,-48(fp)
    c444:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c448:	e0fffa17 	ldw	r3,-24(fp)
    c44c:	e0bffc17 	ldw	r2,-16(fp)
    c450:	18800526 	beq	r3,r2,c468 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c454:	e0fffa17 	ldw	r3,-24(fp)
    c458:	e0bffc17 	ldw	r2,-16(fp)
    c45c:	1887c83a 	sub	r3,r3,r2
    c460:	e0ffff15 	stw	r3,-4(fp)
    c464:	00000906 	br	c48c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c468:	e0bffe17 	ldw	r2,-8(fp)
    c46c:	1090000c 	andi	r2,r2,16384
    c470:	1005003a 	cmpeq	r2,r2,zero
    c474:	1000031e 	bne	r2,zero,c484 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c478:	00bffd44 	movi	r2,-11
    c47c:	e0bfff15 	stw	r2,-4(fp)
    c480:	00000206 	br	c48c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c484:	00bffec4 	movi	r2,-5
    c488:	e0bfff15 	stw	r2,-4(fp)
    c48c:	e0bfff17 	ldw	r2,-4(fp)
}
    c490:	e037883a 	mov	sp,fp
    c494:	dfc00117 	ldw	ra,4(sp)
    c498:	df000017 	ldw	fp,0(sp)
    c49c:	dec00204 	addi	sp,sp,8
    c4a0:	f800283a 	ret

0000c4a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c4a4:	defff204 	addi	sp,sp,-56
    c4a8:	dfc00d15 	stw	ra,52(sp)
    c4ac:	df000c15 	stw	fp,48(sp)
    c4b0:	df000c04 	addi	fp,sp,48
    c4b4:	e13ffb15 	stw	r4,-20(fp)
    c4b8:	e17ffc15 	stw	r5,-16(fp)
    c4bc:	e1bffd15 	stw	r6,-12(fp)
    c4c0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c4c4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c4c8:	e0bffc17 	ldw	r2,-16(fp)
    c4cc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c4d0:	00003a06 	br	c5bc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c4d4:	e0bffb17 	ldw	r2,-20(fp)
    c4d8:	10800c17 	ldw	r2,48(r2)
    c4dc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c4e0:	e0bffb17 	ldw	r2,-20(fp)
    c4e4:	10800d17 	ldw	r2,52(r2)
    c4e8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c4ec:	e0fffa17 	ldw	r3,-24(fp)
    c4f0:	e0bff917 	ldw	r2,-28(fp)
    c4f4:	1880062e 	bgeu	r3,r2,c510 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c4f8:	e0fff917 	ldw	r3,-28(fp)
    c4fc:	e0bffa17 	ldw	r2,-24(fp)
    c500:	1885c83a 	sub	r2,r3,r2
    c504:	10bfffc4 	addi	r2,r2,-1
    c508:	e0bff815 	stw	r2,-32(fp)
    c50c:	00000c06 	br	c540 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c510:	e0bff917 	ldw	r2,-28(fp)
    c514:	1005003a 	cmpeq	r2,r2,zero
    c518:	1000051e 	bne	r2,zero,c530 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c51c:	00820004 	movi	r2,2048
    c520:	e0fffa17 	ldw	r3,-24(fp)
    c524:	10c5c83a 	sub	r2,r2,r3
    c528:	e0bff815 	stw	r2,-32(fp)
    c52c:	00000406 	br	c540 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c530:	0081ffc4 	movi	r2,2047
    c534:	e0fffa17 	ldw	r3,-24(fp)
    c538:	10c5c83a 	sub	r2,r2,r3
    c53c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c540:	e0bff817 	ldw	r2,-32(fp)
    c544:	1005003a 	cmpeq	r2,r2,zero
    c548:	10001f1e 	bne	r2,zero,c5c8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c54c:	e0fffd17 	ldw	r3,-12(fp)
    c550:	e0bff817 	ldw	r2,-32(fp)
    c554:	1880022e 	bgeu	r3,r2,c560 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c558:	e0bffd17 	ldw	r2,-12(fp)
    c55c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c560:	e0bffb17 	ldw	r2,-20(fp)
    c564:	10c20e04 	addi	r3,r2,2104
    c568:	e0bffa17 	ldw	r2,-24(fp)
    c56c:	1885883a 	add	r2,r3,r2
    c570:	e0fffc17 	ldw	r3,-16(fp)
    c574:	1009883a 	mov	r4,r2
    c578:	180b883a 	mov	r5,r3
    c57c:	e1bff817 	ldw	r6,-32(fp)
    c580:	00062d00 	call	62d0 <memcpy>
      ptr   += n;
    c584:	e0fff817 	ldw	r3,-32(fp)
    c588:	e0bffc17 	ldw	r2,-16(fp)
    c58c:	10c5883a 	add	r2,r2,r3
    c590:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c594:	e0fffd17 	ldw	r3,-12(fp)
    c598:	e0bff817 	ldw	r2,-32(fp)
    c59c:	1885c83a 	sub	r2,r3,r2
    c5a0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c5a4:	e0fffa17 	ldw	r3,-24(fp)
    c5a8:	e0bff817 	ldw	r2,-32(fp)
    c5ac:	1885883a 	add	r2,r3,r2
    c5b0:	10c1ffcc 	andi	r3,r2,2047
    c5b4:	e0bffb17 	ldw	r2,-20(fp)
    c5b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c5bc:	e0bffd17 	ldw	r2,-12(fp)
    c5c0:	10800048 	cmpgei	r2,r2,1
    c5c4:	103fc31e 	bne	r2,zero,c4d4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5c8:	0005303a 	rdctl	r2,status
    c5cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5d0:	e0fff517 	ldw	r3,-44(fp)
    c5d4:	00bfff84 	movi	r2,-2
    c5d8:	1884703a 	and	r2,r3,r2
    c5dc:	1001703a 	wrctl	status,r2
  
  return context;
    c5e0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c5e4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c5e8:	e0bffb17 	ldw	r2,-20(fp)
    c5ec:	10800817 	ldw	r2,32(r2)
    c5f0:	10c00094 	ori	r3,r2,2
    c5f4:	e0bffb17 	ldw	r2,-20(fp)
    c5f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c5fc:	e0bffb17 	ldw	r2,-20(fp)
    c600:	10800017 	ldw	r2,0(r2)
    c604:	11000104 	addi	r4,r2,4
    c608:	e0bffb17 	ldw	r2,-20(fp)
    c60c:	10800817 	ldw	r2,32(r2)
    c610:	1007883a 	mov	r3,r2
    c614:	2005883a 	mov	r2,r4
    c618:	10c00035 	stwio	r3,0(r2)
    c61c:	e0bff717 	ldw	r2,-36(fp)
    c620:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c624:	e0bff417 	ldw	r2,-48(fp)
    c628:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c62c:	e0bffd17 	ldw	r2,-12(fp)
    c630:	10800050 	cmplti	r2,r2,1
    c634:	1000111e 	bne	r2,zero,c67c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c638:	e0bffe17 	ldw	r2,-8(fp)
    c63c:	1090000c 	andi	r2,r2,16384
    c640:	1004c03a 	cmpne	r2,r2,zero
    c644:	1000101e 	bne	r2,zero,c688 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c648:	e0bffb17 	ldw	r2,-20(fp)
    c64c:	10c00d17 	ldw	r3,52(r2)
    c650:	e0bff917 	ldw	r2,-28(fp)
    c654:	1880051e 	bne	r3,r2,c66c <altera_avalon_jtag_uart_write+0x1c8>
    c658:	e0bffb17 	ldw	r2,-20(fp)
    c65c:	10c00917 	ldw	r3,36(r2)
    c660:	e0bffb17 	ldw	r2,-20(fp)
    c664:	10800117 	ldw	r2,4(r2)
    c668:	18bff736 	bltu	r3,r2,c648 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c66c:	e0bffb17 	ldw	r2,-20(fp)
    c670:	10c00d17 	ldw	r3,52(r2)
    c674:	e0bff917 	ldw	r2,-28(fp)
    c678:	18800326 	beq	r3,r2,c688 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    c67c:	e0bffd17 	ldw	r2,-12(fp)
    c680:	10800048 	cmpgei	r2,r2,1
    c684:	103fcd1e 	bne	r2,zero,c5bc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c688:	e0fffc17 	ldw	r3,-16(fp)
    c68c:	e0bff617 	ldw	r2,-40(fp)
    c690:	18800526 	beq	r3,r2,c6a8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c694:	e0fffc17 	ldw	r3,-16(fp)
    c698:	e0bff617 	ldw	r2,-40(fp)
    c69c:	1887c83a 	sub	r3,r3,r2
    c6a0:	e0ffff15 	stw	r3,-4(fp)
    c6a4:	00000906 	br	c6cc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c6a8:	e0bffe17 	ldw	r2,-8(fp)
    c6ac:	1090000c 	andi	r2,r2,16384
    c6b0:	1005003a 	cmpeq	r2,r2,zero
    c6b4:	1000031e 	bne	r2,zero,c6c4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c6b8:	00bffd44 	movi	r2,-11
    c6bc:	e0bfff15 	stw	r2,-4(fp)
    c6c0:	00000206 	br	c6cc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c6c4:	00bffec4 	movi	r2,-5
    c6c8:	e0bfff15 	stw	r2,-4(fp)
    c6cc:	e0bfff17 	ldw	r2,-4(fp)
}
    c6d0:	e037883a 	mov	sp,fp
    c6d4:	dfc00117 	ldw	ra,4(sp)
    c6d8:	df000017 	ldw	fp,0(sp)
    c6dc:	dec00204 	addi	sp,sp,8
    c6e0:	f800283a 	ret

0000c6e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c6e4:	defffa04 	addi	sp,sp,-24
    c6e8:	dfc00515 	stw	ra,20(sp)
    c6ec:	df000415 	stw	fp,16(sp)
    c6f0:	df000404 	addi	fp,sp,16
    c6f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c700:	e0bfff17 	ldw	r2,-4(fp)
    c704:	10800104 	addi	r2,r2,4
    c708:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c70c:	0005303a 	rdctl	r2,status
    c710:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c714:	e0fffd17 	ldw	r3,-12(fp)
    c718:	00bfff84 	movi	r2,-2
    c71c:	1884703a 	and	r2,r3,r2
    c720:	1001703a 	wrctl	status,r2
  
  return context;
    c724:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c728:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c72c:	000b8e00 	call	b8e0 <alt_tick>
    c730:	e0bffe17 	ldw	r2,-8(fp)
    c734:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c738:	e0bffc17 	ldw	r2,-16(fp)
    c73c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c740:	e037883a 	mov	sp,fp
    c744:	dfc00117 	ldw	ra,4(sp)
    c748:	df000017 	ldw	fp,0(sp)
    c74c:	dec00204 	addi	sp,sp,8
    c750:	f800283a 	ret

0000c754 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c754:	defff804 	addi	sp,sp,-32
    c758:	dfc00715 	stw	ra,28(sp)
    c75c:	df000615 	stw	fp,24(sp)
    c760:	df000604 	addi	fp,sp,24
    c764:	e13ffc15 	stw	r4,-16(fp)
    c768:	e17ffd15 	stw	r5,-12(fp)
    c76c:	e1bffe15 	stw	r6,-8(fp)
    c770:	e1ffff15 	stw	r7,-4(fp)
    c774:	e0bfff17 	ldw	r2,-4(fp)
    c778:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c77c:	00800074 	movhi	r2,1
    c780:	1083b904 	addi	r2,r2,3812
    c784:	10800017 	ldw	r2,0(r2)
    c788:	1004c03a 	cmpne	r2,r2,zero
    c78c:	1000041e 	bne	r2,zero,c7a0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c790:	00c00074 	movhi	r3,1
    c794:	18c3b904 	addi	r3,r3,3812
    c798:	e0bffb17 	ldw	r2,-20(fp)
    c79c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	10800104 	addi	r2,r2,4
    c7a8:	1007883a 	mov	r3,r2
    c7ac:	008001c4 	movi	r2,7
    c7b0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c7b4:	d8000015 	stw	zero,0(sp)
    c7b8:	e13ffd17 	ldw	r4,-12(fp)
    c7bc:	e17ffe17 	ldw	r5,-8(fp)
    c7c0:	01800074 	movhi	r6,1
    c7c4:	31b1b904 	addi	r6,r6,-14620
    c7c8:	e1fffc17 	ldw	r7,-16(fp)
    c7cc:	000c9f80 	call	c9f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c7d0:	e037883a 	mov	sp,fp
    c7d4:	dfc00117 	ldw	ra,4(sp)
    c7d8:	df000017 	ldw	fp,0(sp)
    c7dc:	dec00204 	addi	sp,sp,8
    c7e0:	f800283a 	ret

0000c7e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c7e4:	deffff04 	addi	sp,sp,-4
    c7e8:	df000015 	stw	fp,0(sp)
    c7ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c7f0:	e037883a 	mov	sp,fp
    c7f4:	df000017 	ldw	fp,0(sp)
    c7f8:	dec00104 	addi	sp,sp,4
    c7fc:	f800283a 	ret

0000c800 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c800:	defff904 	addi	sp,sp,-28
    c804:	dfc00615 	stw	ra,24(sp)
    c808:	df000515 	stw	fp,20(sp)
    c80c:	df000504 	addi	fp,sp,20
    c810:	e13ffd15 	stw	r4,-12(fp)
    c814:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c818:	e0bffd17 	ldw	r2,-12(fp)
    c81c:	1005003a 	cmpeq	r2,r2,zero
    c820:	1000041e 	bne	r2,zero,c834 <alt_dev_llist_insert+0x34>
    c824:	e0bffd17 	ldw	r2,-12(fp)
    c828:	10800217 	ldw	r2,8(r2)
    c82c:	1004c03a 	cmpne	r2,r2,zero
    c830:	1000071e 	bne	r2,zero,c850 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c834:	000c8b40 	call	c8b4 <alt_get_errno>
    c838:	1007883a 	mov	r3,r2
    c83c:	00800584 	movi	r2,22
    c840:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c844:	00bffa84 	movi	r2,-22
    c848:	e0bfff15 	stw	r2,-4(fp)
    c84c:	00001306 	br	c89c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c850:	e0fffd17 	ldw	r3,-12(fp)
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	e0bffb15 	stw	r2,-20(fp)
    c85c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c860:	e0fffc17 	ldw	r3,-16(fp)
    c864:	e0bffb17 	ldw	r2,-20(fp)
    c868:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c86c:	e0bffb17 	ldw	r2,-20(fp)
    c870:	10c00017 	ldw	r3,0(r2)
    c874:	e0bffc17 	ldw	r2,-16(fp)
    c878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c87c:	e0bffb17 	ldw	r2,-20(fp)
    c880:	10c00017 	ldw	r3,0(r2)
    c884:	e0bffc17 	ldw	r2,-16(fp)
    c888:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c88c:	e0fffb17 	ldw	r3,-20(fp)
    c890:	e0bffc17 	ldw	r2,-16(fp)
    c894:	18800015 	stw	r2,0(r3)

  return 0;  
    c898:	e03fff15 	stw	zero,-4(fp)
    c89c:	e0bfff17 	ldw	r2,-4(fp)
}
    c8a0:	e037883a 	mov	sp,fp
    c8a4:	dfc00117 	ldw	ra,4(sp)
    c8a8:	df000017 	ldw	fp,0(sp)
    c8ac:	dec00204 	addi	sp,sp,8
    c8b0:	f800283a 	ret

0000c8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c8b4:	defffd04 	addi	sp,sp,-12
    c8b8:	dfc00215 	stw	ra,8(sp)
    c8bc:	df000115 	stw	fp,4(sp)
    c8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c8c4:	00800074 	movhi	r2,1
    c8c8:	10bd1004 	addi	r2,r2,-3008
    c8cc:	10800017 	ldw	r2,0(r2)
    c8d0:	1005003a 	cmpeq	r2,r2,zero
    c8d4:	1000061e 	bne	r2,zero,c8f0 <alt_get_errno+0x3c>
    c8d8:	00800074 	movhi	r2,1
    c8dc:	10bd1004 	addi	r2,r2,-3008
    c8e0:	10800017 	ldw	r2,0(r2)
    c8e4:	103ee83a 	callr	r2
    c8e8:	e0bfff15 	stw	r2,-4(fp)
    c8ec:	00000306 	br	c8fc <alt_get_errno+0x48>
    c8f0:	00800074 	movhi	r2,1
    c8f4:	1083b204 	addi	r2,r2,3784
    c8f8:	e0bfff15 	stw	r2,-4(fp)
    c8fc:	e0bfff17 	ldw	r2,-4(fp)
}
    c900:	e037883a 	mov	sp,fp
    c904:	dfc00117 	ldw	ra,4(sp)
    c908:	df000017 	ldw	fp,0(sp)
    c90c:	dec00204 	addi	sp,sp,8
    c910:	f800283a 	ret

0000c914 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c914:	defffd04 	addi	sp,sp,-12
    c918:	dfc00215 	stw	ra,8(sp)
    c91c:	df000115 	stw	fp,4(sp)
    c920:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c924:	00bfff04 	movi	r2,-4
    c928:	00c00074 	movhi	r3,1
    c92c:	18f55704 	addi	r3,r3,-10916
    c930:	1885883a 	add	r2,r3,r2
    c934:	e0bfff15 	stw	r2,-4(fp)
    c938:	00000606 	br	c954 <_do_ctors+0x40>
        (*ctor) (); 
    c93c:	e0bfff17 	ldw	r2,-4(fp)
    c940:	10800017 	ldw	r2,0(r2)
    c944:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c948:	e0bfff17 	ldw	r2,-4(fp)
    c94c:	10bfff04 	addi	r2,r2,-4
    c950:	e0bfff15 	stw	r2,-4(fp)
    c954:	e0ffff17 	ldw	r3,-4(fp)
    c958:	00800074 	movhi	r2,1
    c95c:	10b55604 	addi	r2,r2,-10920
    c960:	18bff62e 	bgeu	r3,r2,c93c <_do_ctors+0x28>
        (*ctor) (); 
}
    c964:	e037883a 	mov	sp,fp
    c968:	dfc00117 	ldw	ra,4(sp)
    c96c:	df000017 	ldw	fp,0(sp)
    c970:	dec00204 	addi	sp,sp,8
    c974:	f800283a 	ret

0000c978 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c978:	defffd04 	addi	sp,sp,-12
    c97c:	dfc00215 	stw	ra,8(sp)
    c980:	df000115 	stw	fp,4(sp)
    c984:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c988:	00bfff04 	movi	r2,-4
    c98c:	00c00074 	movhi	r3,1
    c990:	18f55704 	addi	r3,r3,-10916
    c994:	1885883a 	add	r2,r3,r2
    c998:	e0bfff15 	stw	r2,-4(fp)
    c99c:	00000606 	br	c9b8 <_do_dtors+0x40>
        (*dtor) (); 
    c9a0:	e0bfff17 	ldw	r2,-4(fp)
    c9a4:	10800017 	ldw	r2,0(r2)
    c9a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c9ac:	e0bfff17 	ldw	r2,-4(fp)
    c9b0:	10bfff04 	addi	r2,r2,-4
    c9b4:	e0bfff15 	stw	r2,-4(fp)
    c9b8:	e0ffff17 	ldw	r3,-4(fp)
    c9bc:	00800074 	movhi	r2,1
    c9c0:	10b55704 	addi	r2,r2,-10916
    c9c4:	18bff62e 	bgeu	r3,r2,c9a0 <_do_dtors+0x28>
        (*dtor) (); 
}
    c9c8:	e037883a 	mov	sp,fp
    c9cc:	dfc00117 	ldw	ra,4(sp)
    c9d0:	df000017 	ldw	fp,0(sp)
    c9d4:	dec00204 	addi	sp,sp,8
    c9d8:	f800283a 	ret

0000c9dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c9dc:	deffff04 	addi	sp,sp,-4
    c9e0:	df000015 	stw	fp,0(sp)
    c9e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c9e8:	e037883a 	mov	sp,fp
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00104 	addi	sp,sp,4
    c9f4:	f800283a 	ret

0000c9f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c9f8:	defff904 	addi	sp,sp,-28
    c9fc:	dfc00615 	stw	ra,24(sp)
    ca00:	df000515 	stw	fp,20(sp)
    ca04:	df000504 	addi	fp,sp,20
    ca08:	e13ffc15 	stw	r4,-16(fp)
    ca0c:	e17ffd15 	stw	r5,-12(fp)
    ca10:	e1bffe15 	stw	r6,-8(fp)
    ca14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ca18:	e0800217 	ldw	r2,8(fp)
    ca1c:	d8800015 	stw	r2,0(sp)
    ca20:	e13ffc17 	ldw	r4,-16(fp)
    ca24:	e17ffd17 	ldw	r5,-12(fp)
    ca28:	e1bffe17 	ldw	r6,-8(fp)
    ca2c:	e1ffff17 	ldw	r7,-4(fp)
    ca30:	000cbcc0 	call	cbcc <alt_iic_isr_register>
}  
    ca34:	e037883a 	mov	sp,fp
    ca38:	dfc00117 	ldw	ra,4(sp)
    ca3c:	df000017 	ldw	fp,0(sp)
    ca40:	dec00204 	addi	sp,sp,8
    ca44:	f800283a 	ret

0000ca48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ca48:	defff904 	addi	sp,sp,-28
    ca4c:	df000615 	stw	fp,24(sp)
    ca50:	df000604 	addi	fp,sp,24
    ca54:	e13ffe15 	stw	r4,-8(fp)
    ca58:	e17fff15 	stw	r5,-4(fp)
    ca5c:	e0bfff17 	ldw	r2,-4(fp)
    ca60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca64:	0005303a 	rdctl	r2,status
    ca68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca6c:	e0fffb17 	ldw	r3,-20(fp)
    ca70:	00bfff84 	movi	r2,-2
    ca74:	1884703a 	and	r2,r3,r2
    ca78:	1001703a 	wrctl	status,r2
  
  return context;
    ca7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ca80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    ca84:	e0fffc17 	ldw	r3,-16(fp)
    ca88:	00800044 	movi	r2,1
    ca8c:	10c4983a 	sll	r2,r2,r3
    ca90:	1007883a 	mov	r3,r2
    ca94:	00800074 	movhi	r2,1
    ca98:	1083bb04 	addi	r2,r2,3820
    ca9c:	10800017 	ldw	r2,0(r2)
    caa0:	1886b03a 	or	r3,r3,r2
    caa4:	00800074 	movhi	r2,1
    caa8:	1083bb04 	addi	r2,r2,3820
    caac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cab0:	00800074 	movhi	r2,1
    cab4:	1083bb04 	addi	r2,r2,3820
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	100170fa 	wrctl	ienable,r2
    cac0:	e0bffd17 	ldw	r2,-12(fp)
    cac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cac8:	e0bffa17 	ldw	r2,-24(fp)
    cacc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cad0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cad4:	e037883a 	mov	sp,fp
    cad8:	df000017 	ldw	fp,0(sp)
    cadc:	dec00104 	addi	sp,sp,4
    cae0:	f800283a 	ret

0000cae4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cae4:	defff904 	addi	sp,sp,-28
    cae8:	df000615 	stw	fp,24(sp)
    caec:	df000604 	addi	fp,sp,24
    caf0:	e13ffe15 	stw	r4,-8(fp)
    caf4:	e17fff15 	stw	r5,-4(fp)
    caf8:	e0bfff17 	ldw	r2,-4(fp)
    cafc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb00:	0005303a 	rdctl	r2,status
    cb04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb08:	e0fffb17 	ldw	r3,-20(fp)
    cb0c:	00bfff84 	movi	r2,-2
    cb10:	1884703a 	and	r2,r3,r2
    cb14:	1001703a 	wrctl	status,r2
  
  return context;
    cb18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cb1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    cb20:	e0fffc17 	ldw	r3,-16(fp)
    cb24:	00800044 	movi	r2,1
    cb28:	10c4983a 	sll	r2,r2,r3
    cb2c:	0084303a 	nor	r2,zero,r2
    cb30:	1007883a 	mov	r3,r2
    cb34:	00800074 	movhi	r2,1
    cb38:	1083bb04 	addi	r2,r2,3820
    cb3c:	10800017 	ldw	r2,0(r2)
    cb40:	1886703a 	and	r3,r3,r2
    cb44:	00800074 	movhi	r2,1
    cb48:	1083bb04 	addi	r2,r2,3820
    cb4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cb50:	00800074 	movhi	r2,1
    cb54:	1083bb04 	addi	r2,r2,3820
    cb58:	10800017 	ldw	r2,0(r2)
    cb5c:	100170fa 	wrctl	ienable,r2
    cb60:	e0bffd17 	ldw	r2,-12(fp)
    cb64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb68:	e0bffa17 	ldw	r2,-24(fp)
    cb6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cb70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    cb74:	e037883a 	mov	sp,fp
    cb78:	df000017 	ldw	fp,0(sp)
    cb7c:	dec00104 	addi	sp,sp,4
    cb80:	f800283a 	ret

0000cb84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cb84:	defffc04 	addi	sp,sp,-16
    cb88:	df000315 	stw	fp,12(sp)
    cb8c:	df000304 	addi	fp,sp,12
    cb90:	e13ffe15 	stw	r4,-8(fp)
    cb94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cb98:	000530fa 	rdctl	r2,ienable
    cb9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cba0:	e0ffff17 	ldw	r3,-4(fp)
    cba4:	00800044 	movi	r2,1
    cba8:	10c4983a 	sll	r2,r2,r3
    cbac:	1007883a 	mov	r3,r2
    cbb0:	e0bffd17 	ldw	r2,-12(fp)
    cbb4:	1884703a 	and	r2,r3,r2
    cbb8:	1004c03a 	cmpne	r2,r2,zero
}
    cbbc:	e037883a 	mov	sp,fp
    cbc0:	df000017 	ldw	fp,0(sp)
    cbc4:	dec00104 	addi	sp,sp,4
    cbc8:	f800283a 	ret

0000cbcc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cbcc:	defff404 	addi	sp,sp,-48
    cbd0:	dfc00b15 	stw	ra,44(sp)
    cbd4:	df000a15 	stw	fp,40(sp)
    cbd8:	df000a04 	addi	fp,sp,40
    cbdc:	e13ffb15 	stw	r4,-20(fp)
    cbe0:	e17ffc15 	stw	r5,-16(fp)
    cbe4:	e1bffd15 	stw	r6,-12(fp)
    cbe8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    cbec:	00bffa84 	movi	r2,-22
    cbf0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cbf4:	e0bffc17 	ldw	r2,-16(fp)
    cbf8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cbfc:	e0bff917 	ldw	r2,-28(fp)
    cc00:	10800808 	cmpgei	r2,r2,32
    cc04:	1000291e 	bne	r2,zero,ccac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc08:	0005303a 	rdctl	r2,status
    cc0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc10:	e0fff717 	ldw	r3,-36(fp)
    cc14:	00bfff84 	movi	r2,-2
    cc18:	1884703a 	and	r2,r3,r2
    cc1c:	1001703a 	wrctl	status,r2
  
  return context;
    cc20:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cc24:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    cc28:	e0bff917 	ldw	r2,-28(fp)
    cc2c:	00c00074 	movhi	r3,1
    cc30:	18c3e204 	addi	r3,r3,3976
    cc34:	100490fa 	slli	r2,r2,3
    cc38:	10c7883a 	add	r3,r2,r3
    cc3c:	e0bffd17 	ldw	r2,-12(fp)
    cc40:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    cc44:	e0bff917 	ldw	r2,-28(fp)
    cc48:	00c00074 	movhi	r3,1
    cc4c:	18c3e204 	addi	r3,r3,3976
    cc50:	100490fa 	slli	r2,r2,3
    cc54:	10c5883a 	add	r2,r2,r3
    cc58:	10c00104 	addi	r3,r2,4
    cc5c:	e0bffe17 	ldw	r2,-8(fp)
    cc60:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cc64:	e0bffd17 	ldw	r2,-12(fp)
    cc68:	1005003a 	cmpeq	r2,r2,zero
    cc6c:	1000051e 	bne	r2,zero,cc84 <alt_iic_isr_register+0xb8>
    cc70:	e17ff917 	ldw	r5,-28(fp)
    cc74:	e13ffb17 	ldw	r4,-20(fp)
    cc78:	000ca480 	call	ca48 <alt_ic_irq_enable>
    cc7c:	e0bfff15 	stw	r2,-4(fp)
    cc80:	00000406 	br	cc94 <alt_iic_isr_register+0xc8>
    cc84:	e17ff917 	ldw	r5,-28(fp)
    cc88:	e13ffb17 	ldw	r4,-20(fp)
    cc8c:	000cae40 	call	cae4 <alt_ic_irq_disable>
    cc90:	e0bfff15 	stw	r2,-4(fp)
    cc94:	e0bfff17 	ldw	r2,-4(fp)
    cc98:	e0bffa15 	stw	r2,-24(fp)
    cc9c:	e0bff817 	ldw	r2,-32(fp)
    cca0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cca4:	e0bff617 	ldw	r2,-40(fp)
    cca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ccac:	e0bffa17 	ldw	r2,-24(fp)
}
    ccb0:	e037883a 	mov	sp,fp
    ccb4:	dfc00117 	ldw	ra,4(sp)
    ccb8:	df000017 	ldw	fp,0(sp)
    ccbc:	dec00204 	addi	sp,sp,8
    ccc0:	f800283a 	ret

0000ccc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ccc4:	defff804 	addi	sp,sp,-32
    ccc8:	dfc00715 	stw	ra,28(sp)
    cccc:	df000615 	stw	fp,24(sp)
    ccd0:	dc000515 	stw	r16,20(sp)
    ccd4:	df000504 	addi	fp,sp,20
    ccd8:	e13ffc15 	stw	r4,-16(fp)
    ccdc:	e17ffd15 	stw	r5,-12(fp)
    cce0:	e1bffe15 	stw	r6,-8(fp)
    cce4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cce8:	e13ffd17 	ldw	r4,-12(fp)
    ccec:	e17ffe17 	ldw	r5,-8(fp)
    ccf0:	e1bfff17 	ldw	r6,-4(fp)
    ccf4:	000cf0c0 	call	cf0c <open>
    ccf8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ccfc:	e0bffb17 	ldw	r2,-20(fp)
    cd00:	1004803a 	cmplt	r2,r2,zero
    cd04:	10001f1e 	bne	r2,zero,cd84 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    cd08:	e13ffb17 	ldw	r4,-20(fp)
    cd0c:	04000074 	movhi	r16,1
    cd10:	84388d04 	addi	r16,r16,-7628
    cd14:	01400304 	movi	r5,12
    cd18:	0000af40 	call	af4 <__mulsi3>
    cd1c:	1405883a 	add	r2,r2,r16
    cd20:	10c00017 	ldw	r3,0(r2)
    cd24:	e0bffc17 	ldw	r2,-16(fp)
    cd28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cd2c:	e13ffb17 	ldw	r4,-20(fp)
    cd30:	04000074 	movhi	r16,1
    cd34:	84388d04 	addi	r16,r16,-7628
    cd38:	01400304 	movi	r5,12
    cd3c:	0000af40 	call	af4 <__mulsi3>
    cd40:	1405883a 	add	r2,r2,r16
    cd44:	10800104 	addi	r2,r2,4
    cd48:	10c00017 	ldw	r3,0(r2)
    cd4c:	e0bffc17 	ldw	r2,-16(fp)
    cd50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cd54:	e13ffb17 	ldw	r4,-20(fp)
    cd58:	04000074 	movhi	r16,1
    cd5c:	84388d04 	addi	r16,r16,-7628
    cd60:	01400304 	movi	r5,12
    cd64:	0000af40 	call	af4 <__mulsi3>
    cd68:	1405883a 	add	r2,r2,r16
    cd6c:	10800204 	addi	r2,r2,8
    cd70:	10c00017 	ldw	r3,0(r2)
    cd74:	e0bffc17 	ldw	r2,-16(fp)
    cd78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cd7c:	e13ffb17 	ldw	r4,-20(fp)
    cd80:	000b7140 	call	b714 <alt_release_fd>
  }
} 
    cd84:	e037883a 	mov	sp,fp
    cd88:	dfc00217 	ldw	ra,8(sp)
    cd8c:	df000117 	ldw	fp,4(sp)
    cd90:	dc000017 	ldw	r16,0(sp)
    cd94:	dec00304 	addi	sp,sp,12
    cd98:	f800283a 	ret

0000cd9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cd9c:	defffb04 	addi	sp,sp,-20
    cda0:	dfc00415 	stw	ra,16(sp)
    cda4:	df000315 	stw	fp,12(sp)
    cda8:	df000304 	addi	fp,sp,12
    cdac:	e13ffd15 	stw	r4,-12(fp)
    cdb0:	e17ffe15 	stw	r5,-8(fp)
    cdb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cdb8:	01000074 	movhi	r4,1
    cdbc:	21389004 	addi	r4,r4,-7616
    cdc0:	e17ffd17 	ldw	r5,-12(fp)
    cdc4:	01800044 	movi	r6,1
    cdc8:	01c07fc4 	movi	r7,511
    cdcc:	000ccc40 	call	ccc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    cdd0:	01000074 	movhi	r4,1
    cdd4:	21388d04 	addi	r4,r4,-7628
    cdd8:	e17ffe17 	ldw	r5,-8(fp)
    cddc:	000d883a 	mov	r6,zero
    cde0:	01c07fc4 	movi	r7,511
    cde4:	000ccc40 	call	ccc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    cde8:	01000074 	movhi	r4,1
    cdec:	21389304 	addi	r4,r4,-7604
    cdf0:	e17fff17 	ldw	r5,-4(fp)
    cdf4:	01800044 	movi	r6,1
    cdf8:	01c07fc4 	movi	r7,511
    cdfc:	000ccc40 	call	ccc4 <alt_open_fd>
}  
    ce00:	e037883a 	mov	sp,fp
    ce04:	dfc00117 	ldw	ra,4(sp)
    ce08:	df000017 	ldw	fp,0(sp)
    ce0c:	dec00204 	addi	sp,sp,8
    ce10:	f800283a 	ret

0000ce14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ce14:	defffa04 	addi	sp,sp,-24
    ce18:	dfc00515 	stw	ra,20(sp)
    ce1c:	df000415 	stw	fp,16(sp)
    ce20:	dc000315 	stw	r16,12(sp)
    ce24:	df000304 	addi	fp,sp,12
    ce28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ce2c:	e0bffe17 	ldw	r2,-8(fp)
    ce30:	10800217 	ldw	r2,8(r2)
    ce34:	10d00034 	orhi	r3,r2,16384
    ce38:	e0bffe17 	ldw	r2,-8(fp)
    ce3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ce40:	e03ffd15 	stw	zero,-12(fp)
    ce44:	00002306 	br	ced4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ce48:	e13ffd17 	ldw	r4,-12(fp)
    ce4c:	04000074 	movhi	r16,1
    ce50:	84388d04 	addi	r16,r16,-7628
    ce54:	01400304 	movi	r5,12
    ce58:	0000af40 	call	af4 <__mulsi3>
    ce5c:	1405883a 	add	r2,r2,r16
    ce60:	10c00017 	ldw	r3,0(r2)
    ce64:	e0bffe17 	ldw	r2,-8(fp)
    ce68:	10800017 	ldw	r2,0(r2)
    ce6c:	1880161e 	bne	r3,r2,cec8 <alt_file_locked+0xb4>
    ce70:	e13ffd17 	ldw	r4,-12(fp)
    ce74:	04000074 	movhi	r16,1
    ce78:	84388d04 	addi	r16,r16,-7628
    ce7c:	01400304 	movi	r5,12
    ce80:	0000af40 	call	af4 <__mulsi3>
    ce84:	1405883a 	add	r2,r2,r16
    ce88:	10800204 	addi	r2,r2,8
    ce8c:	10800017 	ldw	r2,0(r2)
    ce90:	1004403a 	cmpge	r2,r2,zero
    ce94:	10000c1e 	bne	r2,zero,cec8 <alt_file_locked+0xb4>
    ce98:	e13ffd17 	ldw	r4,-12(fp)
    ce9c:	01400304 	movi	r5,12
    cea0:	0000af40 	call	af4 <__mulsi3>
    cea4:	1007883a 	mov	r3,r2
    cea8:	00800074 	movhi	r2,1
    ceac:	10b88d04 	addi	r2,r2,-7628
    ceb0:	1887883a 	add	r3,r3,r2
    ceb4:	e0bffe17 	ldw	r2,-8(fp)
    ceb8:	18800326 	beq	r3,r2,cec8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    cebc:	00bffcc4 	movi	r2,-13
    cec0:	e0bfff15 	stw	r2,-4(fp)
    cec4:	00000a06 	br	cef0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cec8:	e0bffd17 	ldw	r2,-12(fp)
    cecc:	10800044 	addi	r2,r2,1
    ced0:	e0bffd15 	stw	r2,-12(fp)
    ced4:	00800074 	movhi	r2,1
    ced8:	10bd0f04 	addi	r2,r2,-3012
    cedc:	10800017 	ldw	r2,0(r2)
    cee0:	1007883a 	mov	r3,r2
    cee4:	e0bffd17 	ldw	r2,-12(fp)
    cee8:	18bfd72e 	bgeu	r3,r2,ce48 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ceec:	e03fff15 	stw	zero,-4(fp)
    cef0:	e0bfff17 	ldw	r2,-4(fp)
}
    cef4:	e037883a 	mov	sp,fp
    cef8:	dfc00217 	ldw	ra,8(sp)
    cefc:	df000117 	ldw	fp,4(sp)
    cf00:	dc000017 	ldw	r16,0(sp)
    cf04:	dec00304 	addi	sp,sp,12
    cf08:	f800283a 	ret

0000cf0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    cf0c:	defff404 	addi	sp,sp,-48
    cf10:	dfc00b15 	stw	ra,44(sp)
    cf14:	df000a15 	stw	fp,40(sp)
    cf18:	df000a04 	addi	fp,sp,40
    cf1c:	e13ffb15 	stw	r4,-20(fp)
    cf20:	e17ffc15 	stw	r5,-16(fp)
    cf24:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    cf28:	00bfffc4 	movi	r2,-1
    cf2c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    cf30:	00bffb44 	movi	r2,-19
    cf34:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    cf38:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    cf3c:	e13ffb17 	ldw	r4,-20(fp)
    cf40:	01400074 	movhi	r5,1
    cf44:	297d0d04 	addi	r5,r5,-3020
    cf48:	000d1180 	call	d118 <alt_find_dev>
    cf4c:	e0bffa15 	stw	r2,-24(fp)
    cf50:	e0bffa17 	ldw	r2,-24(fp)
    cf54:	1004c03a 	cmpne	r2,r2,zero
    cf58:	1000051e 	bne	r2,zero,cf70 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    cf5c:	e13ffb17 	ldw	r4,-20(fp)
    cf60:	000d1ac0 	call	d1ac <alt_find_file>
    cf64:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    cf68:	00800044 	movi	r2,1
    cf6c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    cf70:	e0bffa17 	ldw	r2,-24(fp)
    cf74:	1005003a 	cmpeq	r2,r2,zero
    cf78:	1000311e 	bne	r2,zero,d040 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    cf7c:	e13ffa17 	ldw	r4,-24(fp)
    cf80:	000d2cc0 	call	d2cc <alt_get_fd>
    cf84:	e0bff815 	stw	r2,-32(fp)
    cf88:	e0bff817 	ldw	r2,-32(fp)
    cf8c:	1004403a 	cmpge	r2,r2,zero
    cf90:	1000031e 	bne	r2,zero,cfa0 <open+0x94>
    {
      status = index;
    cf94:	e0bff817 	ldw	r2,-32(fp)
    cf98:	e0bff715 	stw	r2,-36(fp)
    cf9c:	00002a06 	br	d048 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    cfa0:	e13ff817 	ldw	r4,-32(fp)
    cfa4:	01400304 	movi	r5,12
    cfa8:	0000af40 	call	af4 <__mulsi3>
    cfac:	1007883a 	mov	r3,r2
    cfb0:	00800074 	movhi	r2,1
    cfb4:	10b88d04 	addi	r2,r2,-7628
    cfb8:	1885883a 	add	r2,r3,r2
    cfbc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    cfc0:	e0fffc17 	ldw	r3,-16(fp)
    cfc4:	00900034 	movhi	r2,16384
    cfc8:	10bfffc4 	addi	r2,r2,-1
    cfcc:	1886703a 	and	r3,r3,r2
    cfd0:	e0bff917 	ldw	r2,-28(fp)
    cfd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cfd8:	e0bff617 	ldw	r2,-40(fp)
    cfdc:	1004c03a 	cmpne	r2,r2,zero
    cfe0:	1000061e 	bne	r2,zero,cffc <open+0xf0>
    cfe4:	e13ff917 	ldw	r4,-28(fp)
    cfe8:	000ce140 	call	ce14 <alt_file_locked>
    cfec:	e0bff715 	stw	r2,-36(fp)
    cff0:	e0bff717 	ldw	r2,-36(fp)
    cff4:	1004803a 	cmplt	r2,r2,zero
    cff8:	1000131e 	bne	r2,zero,d048 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cffc:	e0bffa17 	ldw	r2,-24(fp)
    d000:	10800317 	ldw	r2,12(r2)
    d004:	1005003a 	cmpeq	r2,r2,zero
    d008:	1000091e 	bne	r2,zero,d030 <open+0x124>
    d00c:	e0bffa17 	ldw	r2,-24(fp)
    d010:	10800317 	ldw	r2,12(r2)
    d014:	e13ff917 	ldw	r4,-28(fp)
    d018:	e17ffb17 	ldw	r5,-20(fp)
    d01c:	e1bffc17 	ldw	r6,-16(fp)
    d020:	e1fffd17 	ldw	r7,-12(fp)
    d024:	103ee83a 	callr	r2
    d028:	e0bfff15 	stw	r2,-4(fp)
    d02c:	00000106 	br	d034 <open+0x128>
    d030:	e03fff15 	stw	zero,-4(fp)
    d034:	e0bfff17 	ldw	r2,-4(fp)
    d038:	e0bff715 	stw	r2,-36(fp)
    d03c:	00000206 	br	d048 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d040:	00bffb44 	movi	r2,-19
    d044:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d048:	e0bff717 	ldw	r2,-36(fp)
    d04c:	1004403a 	cmpge	r2,r2,zero
    d050:	1000091e 	bne	r2,zero,d078 <open+0x16c>
  {
    alt_release_fd (index);  
    d054:	e13ff817 	ldw	r4,-32(fp)
    d058:	000b7140 	call	b714 <alt_release_fd>
    ALT_ERRNO = -status;
    d05c:	000d0980 	call	d098 <alt_get_errno>
    d060:	e0fff717 	ldw	r3,-36(fp)
    d064:	00c7c83a 	sub	r3,zero,r3
    d068:	10c00015 	stw	r3,0(r2)
    return -1;
    d06c:	00bfffc4 	movi	r2,-1
    d070:	e0bffe15 	stw	r2,-8(fp)
    d074:	00000206 	br	d080 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    d078:	e0bff817 	ldw	r2,-32(fp)
    d07c:	e0bffe15 	stw	r2,-8(fp)
    d080:	e0bffe17 	ldw	r2,-8(fp)
}
    d084:	e037883a 	mov	sp,fp
    d088:	dfc00117 	ldw	ra,4(sp)
    d08c:	df000017 	ldw	fp,0(sp)
    d090:	dec00204 	addi	sp,sp,8
    d094:	f800283a 	ret

0000d098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d098:	defffd04 	addi	sp,sp,-12
    d09c:	dfc00215 	stw	ra,8(sp)
    d0a0:	df000115 	stw	fp,4(sp)
    d0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d0a8:	00800074 	movhi	r2,1
    d0ac:	10bd1004 	addi	r2,r2,-3008
    d0b0:	10800017 	ldw	r2,0(r2)
    d0b4:	1005003a 	cmpeq	r2,r2,zero
    d0b8:	1000061e 	bne	r2,zero,d0d4 <alt_get_errno+0x3c>
    d0bc:	00800074 	movhi	r2,1
    d0c0:	10bd1004 	addi	r2,r2,-3008
    d0c4:	10800017 	ldw	r2,0(r2)
    d0c8:	103ee83a 	callr	r2
    d0cc:	e0bfff15 	stw	r2,-4(fp)
    d0d0:	00000306 	br	d0e0 <alt_get_errno+0x48>
    d0d4:	00800074 	movhi	r2,1
    d0d8:	1083b204 	addi	r2,r2,3784
    d0dc:	e0bfff15 	stw	r2,-4(fp)
    d0e0:	e0bfff17 	ldw	r2,-4(fp)
}
    d0e4:	e037883a 	mov	sp,fp
    d0e8:	dfc00117 	ldw	ra,4(sp)
    d0ec:	df000017 	ldw	fp,0(sp)
    d0f0:	dec00204 	addi	sp,sp,8
    d0f4:	f800283a 	ret

0000d0f8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    d0f8:	deffff04 	addi	sp,sp,-4
    d0fc:	df000015 	stw	fp,0(sp)
    d100:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d104:	000170fa 	wrctl	ienable,zero
}
    d108:	e037883a 	mov	sp,fp
    d10c:	df000017 	ldw	fp,0(sp)
    d110:	dec00104 	addi	sp,sp,4
    d114:	f800283a 	ret

0000d118 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d118:	defff904 	addi	sp,sp,-28
    d11c:	dfc00615 	stw	ra,24(sp)
    d120:	df000515 	stw	fp,20(sp)
    d124:	df000504 	addi	fp,sp,20
    d128:	e13ffd15 	stw	r4,-12(fp)
    d12c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d130:	e0bffe17 	ldw	r2,-8(fp)
    d134:	10800017 	ldw	r2,0(r2)
    d138:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d13c:	e13ffd17 	ldw	r4,-12(fp)
    d140:	00015780 	call	1578 <strlen>
    d144:	10800044 	addi	r2,r2,1
    d148:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d14c:	00000d06 	br	d184 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d150:	e0bffc17 	ldw	r2,-16(fp)
    d154:	11000217 	ldw	r4,8(r2)
    d158:	e1bffb17 	ldw	r6,-20(fp)
    d15c:	e17ffd17 	ldw	r5,-12(fp)
    d160:	000d3b00 	call	d3b0 <memcmp>
    d164:	1004c03a 	cmpne	r2,r2,zero
    d168:	1000031e 	bne	r2,zero,d178 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d16c:	e0bffc17 	ldw	r2,-16(fp)
    d170:	e0bfff15 	stw	r2,-4(fp)
    d174:	00000706 	br	d194 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d178:	e0bffc17 	ldw	r2,-16(fp)
    d17c:	10800017 	ldw	r2,0(r2)
    d180:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d184:	e0fffe17 	ldw	r3,-8(fp)
    d188:	e0bffc17 	ldw	r2,-16(fp)
    d18c:	10fff01e 	bne	r2,r3,d150 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d190:	e03fff15 	stw	zero,-4(fp)
    d194:	e0bfff17 	ldw	r2,-4(fp)
}
    d198:	e037883a 	mov	sp,fp
    d19c:	dfc00117 	ldw	ra,4(sp)
    d1a0:	df000017 	ldw	fp,0(sp)
    d1a4:	dec00204 	addi	sp,sp,8
    d1a8:	f800283a 	ret

0000d1ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d1ac:	defffa04 	addi	sp,sp,-24
    d1b0:	dfc00515 	stw	ra,20(sp)
    d1b4:	df000415 	stw	fp,16(sp)
    d1b8:	df000404 	addi	fp,sp,16
    d1bc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d1c0:	00800074 	movhi	r2,1
    d1c4:	10bd0b04 	addi	r2,r2,-3028
    d1c8:	10800017 	ldw	r2,0(r2)
    d1cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d1d0:	00003306 	br	d2a0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    d1d4:	e0bffd17 	ldw	r2,-12(fp)
    d1d8:	11000217 	ldw	r4,8(r2)
    d1dc:	00015780 	call	1578 <strlen>
    d1e0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    d1e4:	e0bffd17 	ldw	r2,-12(fp)
    d1e8:	10c00217 	ldw	r3,8(r2)
    d1ec:	e0bffc17 	ldw	r2,-16(fp)
    d1f0:	1885883a 	add	r2,r3,r2
    d1f4:	10bfffc4 	addi	r2,r2,-1
    d1f8:	10800003 	ldbu	r2,0(r2)
    d1fc:	10803fcc 	andi	r2,r2,255
    d200:	1080201c 	xori	r2,r2,128
    d204:	10bfe004 	addi	r2,r2,-128
    d208:	10800bd8 	cmpnei	r2,r2,47
    d20c:	1000031e 	bne	r2,zero,d21c <alt_find_file+0x70>
    {
      len -= 1;
    d210:	e0bffc17 	ldw	r2,-16(fp)
    d214:	10bfffc4 	addi	r2,r2,-1
    d218:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d21c:	e0bffc17 	ldw	r2,-16(fp)
    d220:	1007883a 	mov	r3,r2
    d224:	e0bffe17 	ldw	r2,-8(fp)
    d228:	1885883a 	add	r2,r3,r2
    d22c:	10800003 	ldbu	r2,0(r2)
    d230:	10803fcc 	andi	r2,r2,255
    d234:	1080201c 	xori	r2,r2,128
    d238:	10bfe004 	addi	r2,r2,-128
    d23c:	10800be0 	cmpeqi	r2,r2,47
    d240:	10000a1e 	bne	r2,zero,d26c <alt_find_file+0xc0>
    d244:	e0bffc17 	ldw	r2,-16(fp)
    d248:	1007883a 	mov	r3,r2
    d24c:	e0bffe17 	ldw	r2,-8(fp)
    d250:	1885883a 	add	r2,r3,r2
    d254:	10800003 	ldbu	r2,0(r2)
    d258:	10803fcc 	andi	r2,r2,255
    d25c:	1080201c 	xori	r2,r2,128
    d260:	10bfe004 	addi	r2,r2,-128
    d264:	1004c03a 	cmpne	r2,r2,zero
    d268:	10000a1e 	bne	r2,zero,d294 <alt_find_file+0xe8>
    d26c:	e0bffd17 	ldw	r2,-12(fp)
    d270:	11000217 	ldw	r4,8(r2)
    d274:	e1bffc17 	ldw	r6,-16(fp)
    d278:	e17ffe17 	ldw	r5,-8(fp)
    d27c:	000d3b00 	call	d3b0 <memcmp>
    d280:	1004c03a 	cmpne	r2,r2,zero
    d284:	1000031e 	bne	r2,zero,d294 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d288:	e0bffd17 	ldw	r2,-12(fp)
    d28c:	e0bfff15 	stw	r2,-4(fp)
    d290:	00000806 	br	d2b4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d294:	e0bffd17 	ldw	r2,-12(fp)
    d298:	10800017 	ldw	r2,0(r2)
    d29c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d2a0:	00c00074 	movhi	r3,1
    d2a4:	18fd0b04 	addi	r3,r3,-3028
    d2a8:	e0bffd17 	ldw	r2,-12(fp)
    d2ac:	10ffc91e 	bne	r2,r3,d1d4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d2b0:	e03fff15 	stw	zero,-4(fp)
    d2b4:	e0bfff17 	ldw	r2,-4(fp)
}
    d2b8:	e037883a 	mov	sp,fp
    d2bc:	dfc00117 	ldw	ra,4(sp)
    d2c0:	df000017 	ldw	fp,0(sp)
    d2c4:	dec00204 	addi	sp,sp,8
    d2c8:	f800283a 	ret

0000d2cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d2cc:	defffa04 	addi	sp,sp,-24
    d2d0:	dfc00515 	stw	ra,20(sp)
    d2d4:	df000415 	stw	fp,16(sp)
    d2d8:	dc000315 	stw	r16,12(sp)
    d2dc:	df000304 	addi	fp,sp,12
    d2e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d2e4:	00bffa04 	movi	r2,-24
    d2e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d2ec:	e03ffe15 	stw	zero,-8(fp)
    d2f0:	00002006 	br	d374 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    d2f4:	e13ffe17 	ldw	r4,-8(fp)
    d2f8:	04000074 	movhi	r16,1
    d2fc:	84388d04 	addi	r16,r16,-7628
    d300:	01400304 	movi	r5,12
    d304:	0000af40 	call	af4 <__mulsi3>
    d308:	1405883a 	add	r2,r2,r16
    d30c:	10800017 	ldw	r2,0(r2)
    d310:	1004c03a 	cmpne	r2,r2,zero
    d314:	1000141e 	bne	r2,zero,d368 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    d318:	e13ffe17 	ldw	r4,-8(fp)
    d31c:	04000074 	movhi	r16,1
    d320:	84388d04 	addi	r16,r16,-7628
    d324:	01400304 	movi	r5,12
    d328:	0000af40 	call	af4 <__mulsi3>
    d32c:	1407883a 	add	r3,r2,r16
    d330:	e0bfff17 	ldw	r2,-4(fp)
    d334:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d338:	00800074 	movhi	r2,1
    d33c:	10bd0f04 	addi	r2,r2,-3012
    d340:	10c00017 	ldw	r3,0(r2)
    d344:	e0bffe17 	ldw	r2,-8(fp)
    d348:	1880040e 	bge	r3,r2,d35c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    d34c:	00c00074 	movhi	r3,1
    d350:	18fd0f04 	addi	r3,r3,-3012
    d354:	e0bffe17 	ldw	r2,-8(fp)
    d358:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d35c:	e0bffe17 	ldw	r2,-8(fp)
    d360:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d364:	00000606 	br	d380 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d368:	e0bffe17 	ldw	r2,-8(fp)
    d36c:	10800044 	addi	r2,r2,1
    d370:	e0bffe15 	stw	r2,-8(fp)
    d374:	e0bffe17 	ldw	r2,-8(fp)
    d378:	10800810 	cmplti	r2,r2,32
    d37c:	103fdd1e 	bne	r2,zero,d2f4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d380:	e0bffd17 	ldw	r2,-12(fp)
}
    d384:	e037883a 	mov	sp,fp
    d388:	dfc00217 	ldw	ra,8(sp)
    d38c:	df000117 	ldw	fp,4(sp)
    d390:	dc000017 	ldw	r16,0(sp)
    d394:	dec00304 	addi	sp,sp,12
    d398:	f800283a 	ret

0000d39c <atexit>:
    d39c:	200b883a 	mov	r5,r4
    d3a0:	000d883a 	mov	r6,zero
    d3a4:	0009883a 	mov	r4,zero
    d3a8:	000f883a 	mov	r7,zero
    d3ac:	000d4241 	jmpi	d424 <__register_exitproc>

0000d3b0 <memcmp>:
    d3b0:	00c000c4 	movi	r3,3
    d3b4:	1980032e 	bgeu	r3,r6,d3c4 <memcmp+0x14>
    d3b8:	2144b03a 	or	r2,r4,r5
    d3bc:	10c4703a 	and	r2,r2,r3
    d3c0:	10000f26 	beq	r2,zero,d400 <memcmp+0x50>
    d3c4:	31ffffc4 	addi	r7,r6,-1
    d3c8:	3000061e 	bne	r6,zero,d3e4 <memcmp+0x34>
    d3cc:	00000a06 	br	d3f8 <memcmp+0x48>
    d3d0:	39ffffc4 	addi	r7,r7,-1
    d3d4:	00bfffc4 	movi	r2,-1
    d3d8:	21000044 	addi	r4,r4,1
    d3dc:	29400044 	addi	r5,r5,1
    d3e0:	38800526 	beq	r7,r2,d3f8 <memcmp+0x48>
    d3e4:	20c00003 	ldbu	r3,0(r4)
    d3e8:	28800003 	ldbu	r2,0(r5)
    d3ec:	18bff826 	beq	r3,r2,d3d0 <memcmp+0x20>
    d3f0:	1885c83a 	sub	r2,r3,r2
    d3f4:	f800283a 	ret
    d3f8:	0005883a 	mov	r2,zero
    d3fc:	f800283a 	ret
    d400:	180f883a 	mov	r7,r3
    d404:	20c00017 	ldw	r3,0(r4)
    d408:	28800017 	ldw	r2,0(r5)
    d40c:	18bfed1e 	bne	r3,r2,d3c4 <memcmp+0x14>
    d410:	31bfff04 	addi	r6,r6,-4
    d414:	21000104 	addi	r4,r4,4
    d418:	29400104 	addi	r5,r5,4
    d41c:	39bff936 	bltu	r7,r6,d404 <memcmp+0x54>
    d420:	003fe806 	br	d3c4 <memcmp+0x14>

0000d424 <__register_exitproc>:
    d424:	defffa04 	addi	sp,sp,-24
    d428:	00800074 	movhi	r2,1
    d42c:	10bd0604 	addi	r2,r2,-3048
    d430:	dc000015 	stw	r16,0(sp)
    d434:	14000017 	ldw	r16,0(r2)
    d438:	dd000415 	stw	r20,16(sp)
    d43c:	2829883a 	mov	r20,r5
    d440:	81405217 	ldw	r5,328(r16)
    d444:	dcc00315 	stw	r19,12(sp)
    d448:	dc800215 	stw	r18,8(sp)
    d44c:	dc400115 	stw	r17,4(sp)
    d450:	dfc00515 	stw	ra,20(sp)
    d454:	2023883a 	mov	r17,r4
    d458:	3027883a 	mov	r19,r6
    d45c:	3825883a 	mov	r18,r7
    d460:	28002526 	beq	r5,zero,d4f8 <__register_exitproc+0xd4>
    d464:	29000117 	ldw	r4,4(r5)
    d468:	008007c4 	movi	r2,31
    d46c:	11002716 	blt	r2,r4,d50c <__register_exitproc+0xe8>
    d470:	8800101e 	bne	r17,zero,d4b4 <__register_exitproc+0x90>
    d474:	2105883a 	add	r2,r4,r4
    d478:	1085883a 	add	r2,r2,r2
    d47c:	20c00044 	addi	r3,r4,1
    d480:	1145883a 	add	r2,r2,r5
    d484:	0009883a 	mov	r4,zero
    d488:	15000215 	stw	r20,8(r2)
    d48c:	28c00115 	stw	r3,4(r5)
    d490:	2005883a 	mov	r2,r4
    d494:	dfc00517 	ldw	ra,20(sp)
    d498:	dd000417 	ldw	r20,16(sp)
    d49c:	dcc00317 	ldw	r19,12(sp)
    d4a0:	dc800217 	ldw	r18,8(sp)
    d4a4:	dc400117 	ldw	r17,4(sp)
    d4a8:	dc000017 	ldw	r16,0(sp)
    d4ac:	dec00604 	addi	sp,sp,24
    d4b0:	f800283a 	ret
    d4b4:	29802204 	addi	r6,r5,136
    d4b8:	00800044 	movi	r2,1
    d4bc:	110e983a 	sll	r7,r2,r4
    d4c0:	30c04017 	ldw	r3,256(r6)
    d4c4:	2105883a 	add	r2,r4,r4
    d4c8:	1085883a 	add	r2,r2,r2
    d4cc:	1185883a 	add	r2,r2,r6
    d4d0:	19c6b03a 	or	r3,r3,r7
    d4d4:	14802015 	stw	r18,128(r2)
    d4d8:	14c00015 	stw	r19,0(r2)
    d4dc:	00800084 	movi	r2,2
    d4e0:	30c04015 	stw	r3,256(r6)
    d4e4:	88bfe31e 	bne	r17,r2,d474 <__register_exitproc+0x50>
    d4e8:	30804117 	ldw	r2,260(r6)
    d4ec:	11c4b03a 	or	r2,r2,r7
    d4f0:	30804115 	stw	r2,260(r6)
    d4f4:	003fdf06 	br	d474 <__register_exitproc+0x50>
    d4f8:	00800074 	movhi	r2,1
    d4fc:	10842204 	addi	r2,r2,4232
    d500:	100b883a 	mov	r5,r2
    d504:	80805215 	stw	r2,328(r16)
    d508:	003fd606 	br	d464 <__register_exitproc+0x40>
    d50c:	00800034 	movhi	r2,0
    d510:	10831904 	addi	r2,r2,3172
    d514:	1000021e 	bne	r2,zero,d520 <__register_exitproc+0xfc>
    d518:	013fffc4 	movi	r4,-1
    d51c:	003fdc06 	br	d490 <__register_exitproc+0x6c>
    d520:	01006404 	movi	r4,400
    d524:	103ee83a 	callr	r2
    d528:	1007883a 	mov	r3,r2
    d52c:	103ffa26 	beq	r2,zero,d518 <__register_exitproc+0xf4>
    d530:	80805217 	ldw	r2,328(r16)
    d534:	180b883a 	mov	r5,r3
    d538:	18000115 	stw	zero,4(r3)
    d53c:	18800015 	stw	r2,0(r3)
    d540:	80c05215 	stw	r3,328(r16)
    d544:	18006215 	stw	zero,392(r3)
    d548:	18006315 	stw	zero,396(r3)
    d54c:	0009883a 	mov	r4,zero
    d550:	883fc826 	beq	r17,zero,d474 <__register_exitproc+0x50>
    d554:	003fd706 	br	d4b4 <__register_exitproc+0x90>
    d558:	00003668 	cmpgeui	zero,zero,217
